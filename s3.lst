00000000                            ; Sonic 3 Beta 03/11/1993 Disassembly (Version 1.0) By Neto ( Esrael L. G. Neto ) (https://www.neto-games.com.br) 
00000000                            ; 
00000000                            ; "Sonic The Hedgehog 3 (Nov 03, 1993) (hidden-palace.org).bin" Rom by drx (http://www.hidden-palace.org/)
00000000                            ;
00000000                            ; Dados n_o usados (left over ???):
00000000                            ; 0x00F972 - Obj_Classic_Shield
00000000                            ; 0x010C60 - Obj_S1_0x4B_Big_Ring
00000000                            ; 0x010D26 - Obj_S1_0x7C_Big_Ring_Flash
00000000                            ; 0x010FC2 - Obj_S2_0xDC_Slot_Machine_Ring
00000000                            ; 0x024BCC - Obj_S2_0x6F_Special_Stage_Results
00000000                            ; 0x04C3A6 - Itens n_o linkados na lista de objetos do debug da Lava Reef
00000000                            ; 0x080DE0 - Art_Invincibility 
00000000                            ; 0x0EF1DD - C_digo n_o linkado
00000000                            ; 0x10687E - Art_Horizontal_Spring
00000000                            ; 0x106CB0 - Art_Head_Up_Display
00000000                            ; 0x109B4A - Art_Result_Font_2P
00000000                            ; 0x10ADA2 - Art_Seal
00000000                            ; 0x10AEBE - Art_Pig
00000000                            ; 0x10DCE6 - Mapeamento n_o referenciado
00000000                            ; 0x10DFC4 - Script din_mico n_o referenciado ( Obj 0x97 - Cluckoid )
00000000                            ; 0x10E18E - Script din_mico n_o referenciado ( Obj 0x96 - Butterdroid )
00000000                            ; 0x10E2C4 - Script din_mico n_o referenciado ( Obj 0x90 - Fireworm )
00000000                            ; 0x10E5B6 - Ponteiro de mapeamento sobrescrito
00000000                            ; 0x132802 - Art_Hz_Enemies
00000000                            ; 0x1885CA - Chunks n_o usados na Launch Base
00000000                            ; 0x1E9814 - Segunda linha da paleta do Sonic n_o _ usada   
00000000                            align macro
00000000                                 cnop 0,\1
00000000                                 endm   
00000000                                            include 'vars.asm'    
00000000                            ; Constantes
00000000 =00000000                  StackPointer          equ $00000000 
00000000 =00000000                  Compiler_Place_Holder equ $00000000    
00000000 =0020800C                  Check_Interrupt       equ $0020800C   
00000000                            
00000000 =00000000                  gm_SEGALogo            equ $00
00000000 =00000004                  gm_TitleScreen         equ $04
00000000 =00000008                  gm_DemoMode            equ $08
00000000 =0000000C                  gm_PlayMode            equ $0C
00000000 =00000010                  gm_S2_SpecialStage     equ $10 
00000000 =00000014                  gm_Continue            equ $14
00000000 =0000001C                  gm_S2_Versus_Mode_Menu equ $1C
00000000 =00000024                  gm_S2_Options_Menu     equ $24
00000000 =00000028                  gm_Level_Select_Menu   equ $28
00000000 =0000002C                  gm_S3_Special_Stage    equ $2C
00000000 =00000030                  gm_SK_Special_Stage    equ $30
00000000                            
00000000 =00000000                  Sonic_And_Miles       equ $00
00000000 =00000001                  Sonic_Alone           equ $01
00000000 =00000002                  Miles_Alone           equ $02
00000000 =00000003                  Knuckles_Alone        equ $03
00000000                            
00000000                            ; Bot_es dos Controles
00000000 =00000000                  Btn_Up                equ $00    
00000000 =00000001                  Btn_Down              equ $01  
00000000 =00000002                  Btn_Left              equ $02    
00000000 =00000003                  Btn_Right             equ $03
00000000 =00000004                  Btn_B                 equ $04
00000000 =00000005                  Btn_C                 equ $05   
00000000 =00000006                  Btn_A                 equ $06
00000000 =00000007                  Btn_Start             equ $07
00000000                            
00000000                            ; Var_aveis de objetos
00000000 =00000000                  Obj_Pointer           equ $00     ; Longword      ; 00          ; 00..03
00000000 =00000004                  Obj_Flags             equ $04     ; Byte          ; 01          ; 04
00000000 =00000005                  Obj_Routine           equ $05     ; Byte          ; 24          ; 05
00000000 =00000006                  Obj_Height            equ $06     ; Byte 
00000000 =00000007                  Obj_Width             equ $07     ; Byte          ; 19          ; 07
00000000 =00000008                  Obj_Priority          equ $08     ; Word          ; 18          ; 08..09
00000000 =0000000A                  Obj_Art_VRAM          equ $0A     ; Word          ; 02..03      ; 0A..0B
00000000 =0000000C                  Obj_Map               equ $0C     ; Longword      ; 04..07      ; 0C..0F
00000000 =00000010                  Obj_X                 equ $10     ; Word          ; 08..09      ; 10..11
00000000 =00000012                  Obj_Sub_X             equ $12     ; Word          ; 0A..0B      ; 12..13  ; Fixed position
00000000 =00000014                  Obj_Y                 equ $14     ; Word          ; 0C..0D      ; 14..15
00000000 =00000016                  Obj_Sub_Y             equ $16     ; Word          ; 0E..0F      ; 16..17
00000000 =00000018                  Obj_Speed_X           equ $18     ; Longword      ; 10..13      ; 18..1B
00000000 =0000001A                  Obj_Speed_Y           equ $1A     ; complemento do $18 as vezes referenciado em word ; 12..13 ; 1A..1B
00000000 =0000001C                  Obj_Inertia           equ $1C     ; Word          ; 14..15      ; 1C..1D
00000000 =0000001E                  Obj_Height_2          equ $1E     ; Byte          ; 16          ; 1E
00000000 =0000001F                  Obj_Width_2           equ $1F     ; Byte          ; 17          ; 1F
00000000 =00000020                  Obj_Ani_Number        equ $20     ; Byte          ; 1C          ; 20
00000000 =00000021                  Obj_Ani_Flag          equ $21     ; Byte          ; 1D          ; 21
00000000 =00000022                  Obj_Map_Id            equ $22     ; Byte          ; 1A          ; 22
00000000 =00000023                  Obj_Ani_Frame         equ $23     ; Byte          ; 1B          ; 23
00000000 =00000024                  Obj_Ani_Time          equ $24     ; Byte          ; 1E..1F      ; 24..25
00000000 =00000025                  Obj_Ani_Time_2        equ $25     ; Byte          ; 1F          ; 25   ; Usado por alguns objetos do Sonic 1
00000000 =00000026                  Obj_Angle             equ $26     ; Byte          ; $26         ; $26
00000000 =00000027                  Obj_Flip_Angle        equ $27     ; Byte          ; $27         ; $27
00000000 =00000028                  Obj_Col_Flags         equ $28     ; Byte          ; 20          ; 28   ; Collision Flags
00000000 =00000029                  Obj_Col_Prop          equ $29     ; Byte          ; 21          ; 29 
00000000 =0000002A                  Obj_Status            equ $2A     ; Byte          ; 22          ; 2A
00000000 =0000002B                  Obj_Status_2          equ $2B     ; Byte
00000000 =0000002C                  Obj_Subtype           equ $2C     ; Byte          ; 28          ; 2C
00000000 =0000002D                  Obj_Flags_2           equ $2D     ; Byte          ; 29          ; 2D
00000000 =0000002E                  Obj_Timer             equ $2E     ; Word          ; 2A..2B      ; 2E..2F
00000000 =0000002F                  Obj_Timer_2           equ $2F 
00000000 =00000030                  Obj_Child_Data        equ $30  
00000000 =00000034                  Obj_Child             equ $34 
00000000 =0000003D                  Obj_Destr_Flag        equ $3D     ; Byte          ; 39          ; 3D
00000000 =0000003E                  Obj_Parent_Ref        equ $3E     ; Word          ; 3E..3F      ; 3E..3F     
00000000 =00000044                  Obj_Height_3          equ $44 
00000000 =00000045                  Obj_Width_3           equ $45 
00000000 =00000046                  Obj_Child_Ref         equ $46
00000000 =00000048                  Obj_Respaw_Ref        equ $48     ; Word          ; None        ; 48..49
00000000                            
00000000 =0000004A                  Obj_Size              equ $4A
00000000                            
00000000                            ; Variaveis locais de objectos
00000000 =00000030                  Obj_Control_Var_00      equ $30
00000000 =00000031                  Obj_Control_Var_01      equ $31
00000000 =00000032                  Obj_Control_Var_02      equ $32
00000000 =00000033                  Obj_Control_Var_03      equ $33
00000000 =00000034                  Obj_Control_Var_04      equ $34 
00000000 =00000035                  Obj_Control_Var_05      equ $35
00000000 =00000036                  Obj_Control_Var_06      equ $36
00000000 =00000037                  Obj_Control_Var_07      equ $37
00000000 =00000038                  Obj_Control_Var_08      equ $38
00000000 =00000039                  Obj_Control_Var_09      equ $39
00000000 =0000003A                  Obj_Control_Var_0A      equ $3A
00000000 =0000003B                  Obj_Control_Var_0B      equ $3B
00000000 =0000003C                  Obj_Control_Var_0C      equ $3C
00000000 =0000003D                  Obj_Control_Var_0D      equ $3D
00000000 =0000003E                  Obj_Control_Var_0E      equ $3E
00000000 =0000003F                  Obj_Control_Var_0F      equ $3F
00000000 =0000003F                  Obj_Player_One_Or_Two   equ $3F
00000000 =00000040                  Obj_Control_Var_10      equ $40
00000000 =00000041                  Obj_Control_Var_11      equ $41
00000000 =00000042                  Obj_Control_Var_12      equ $42
00000000 =00000043                  Obj_Control_Var_13      equ $43  
00000000 =00000043                  Obj_Player_One_Or_Two_2 equ $43
00000000 =00000044                  Obj_Control_Var_14      equ $44  
00000000 =00000046                  Obj_Control_Var_16      equ $46  
00000000                            
00000000                            
00000000                            
00000000                            ; Variaveis usadas pelos jogadores
00000000 =0000002D                  Obj_Player_Flip_Flag  equ $2D     ; Byte          ; 29          ; 2D
00000000 =0000002E                  Obj_Player_Control    equ $2E     ; Byte          ; 2A          ; 2E 
00000000 =0000002F                  Obj_Player_Status     equ $2F     ; Byte          ; 2B          ; 2F
00000000 =00000030                  Obj_P_Flips_Remaining equ $30     ; Byte          ; 2C          ; 30   
00000000 =00000031                  Obj_Player_Flip_Speed equ $31     ; Byte          ; 2D          ; 31
00000000 =00000032                  Obj_P_Horiz_Ctrl_Lock equ $32     ; Word          ; 2E..2F      ; 32..33  
00000000 =00000034                  Obj_P_Invunerblt_Time equ $34     ; Word / Byte   ; 30..31      ; 34
00000000 =00000035                  Obj_P_Invcbility_Time equ $35     ; Word / Byte   ; 32..33      ; 35
00000000 =00000036                  Obj_P_Spd_Shoes_Time  equ $36     ; Word / Byte   ; 34..35      ; 36
00000000 =00000037                  Obj_Player_Hit_Flag   equ $37     ; Byte                        ; 37
00000000 =00000038                  Obj_Player_Selected   equ $38     ; Byte                        ; 38  0 Sonic 1 Miles 2 Knuckles
00000000 =00000039                  Obj_Look_Up_Down_Time equ $39     ; Byte                        ; 39 
00000000 =0000003A                  Obj_Player_Next_Tilt  equ $3A     ; Byte          ; 36          ; 3A
00000000 =0000003B                  Obj_Player_Tilt       equ $3B     ; Byte          ; 37          ; 3B
00000000 =0000003C                  Obj_Player_St_Convex  equ $3C     ; Byte          ; 38          ; 3C
00000000 =0000003D                  Obj_Player_Spdsh_Flag equ $3D     ; Byte          ; 39          ; 3D
00000000 =0000003E                  Obj_Player_Spdsh_Cnt  equ $3E     ; Byte          ; 3A          ; 3E
00000000 =00000040                  Obj_Player_Jump       equ $40     ; Byte          ; 3C          ; 40   
00000000 =00000041                  Obj_Player_Angle_Flag equ $41
00000000 =00000042                  Obj_Player_Last       equ $42     ; Byte / Word   ; 3D          ; 42..43
00000000 =00000046                  Obj_Player_Top_Solid  equ $46     ; Byte          ; 3E          ; 46
00000000 =00000047                  Obj_Player_LRB_Solid  equ $47     ; Byte          ; 3F          ; 47 ; Left / Right / Bottom
00000000                            
00000000                            ; Variaveis usadas pelos chefes
00000000 =00000029                  Obj_Boss_Hit          equ $29
00000000                            
00000000                            
00000000                            ; Status dos jogadores. Tamb_m usado pelos escudos para prote__o
00000000 =00000000                  Classic_Type       equ $00
00000000 =00000001                  Invincibility_Type equ $01
00000000 =00000002                  Speed_Type         equ $02
00000000 =00000003                  Projectile_Type    equ $03 
00000000 =00000004                  Fire_Type          equ $04 
00000000 =00000005                  Lightning_Type     equ $05 
00000000 =00000006                  Water_Type         equ $06
00000000                            
00000000                            
00000000 =00000002                  Acceleration equ $0002
00000000 =00000004                  Deceleration equ $0004
00000000                            
00000000                            Max_Dynamic_Objects   equ (((Obj_Dynamic_RAM_End-Obj_Dynamic_RAM)/$4A)-$01)
00000000                                                      
00000000                            ; Fases 
00000000 =00000000                  S2_EHz_Id             equ $00
00000000 =00000000                  S2_EHz_Act_1          equ $0000
00000000 =00000001                  S2_EHz_Act_2          equ $0001
00000000 =00000500                  S2_Mz_Act_3           equ $0500
00000000 =00000600                  S2_WFz                equ $0600
00000000 =00000701                  S2_HTz_Act_2          equ $0701
00000000 =00000A01                  S2_OOz_Act_2          equ $0A01
00000000 =00000B01                  S2_MCz_Act_2          equ $0B01
00000000 =0000000C                  S2_CNz_Id             equ $0C
00000000 =00000C00                  S2_CNz_Act_1          equ $0C00
00000000 =00000C01                  S2_CNz_Act_2          equ $0C01
00000000 =00000D00                  S2_CPz_Act_1          equ $0D00
00000000 =00000D01                  S2_CPz_Act_2          equ $0D01
00000000 =00000E00                  S2_DEz                equ $0E00  
00000000 =00000F00                  S2_ARz_Act_1          equ $0F00
00000000 =00000F01                  S2_ARz_Act_2          equ $0F01
00000000 =00001000                  S2_SCz                equ $1000
00000000                            
00000000 =00000000                  Aiz_Id                equ $00
00000000 =00000000                  AIz_Act_1             equ $0000   
00000000 =00000001                  AIz_Act_2             equ $0001
00000000 =00000001                  Hz_Id                 equ $01
00000000 =00000100                  Hz_Act_1              equ $0100
00000000 =00000101                  Hz_Act_2              equ $0101
00000000 =00000002                  MGz_Id                equ $02
00000000 =00000200                  MGz_Act_1             equ $0200
00000000 =00000201                  MGz_Act_2             equ $0201
00000000 =00000003                  CNz_Id                equ $03
00000000 =00000300                  CNz_Act_1             equ $0300
00000000 =00000301                  CNz_Act_2             equ $0301
00000000 =00000400                  FBz_Act_1             equ $0400
00000000 =00000401                  FBz_Act_2             equ $0401 
00000000 =00000005                  Iz_Id                 equ $05
00000000 =00000500                  Iz_Act_1              equ $0500
00000000 =00000501                  Iz_Act_2              equ $0501
00000000 =00000006                  LBz_Id                equ $06
00000000 =00000600                  LBz_Act_1             equ $0600
00000000 =00000601                  LBz_Act_2             equ $0601
00000000 =00000009                  LRz_Id                equ $09
00000000 =00000900                  LRz_Act_1             equ $0900
00000000 =0000000E                  ALz_Id                equ $0E
00000000 =00000E00                  Alz_Act_1             equ $0E00  
00000000 =0000000F                  BPz_Id                equ $0F
00000000 =00000F00                  BPz_Act_1             equ $0F00
00000000 =00001000                  DPz_Act_1             equ $1000
00000000 =00001100                  CGz_Act_1             equ $1100
00000000 =00000012                  EMz_Id                equ $12
00000000 =00001200                  EMz_Act_1             equ $1200
00000000 =00000013                  GM_BS_Id              equ $13
00000000 =00001300                  GM_BS_Act_1           equ $1300
00000000 =00001400                  GS_BS_Act_1           equ $1400
00000000 =00001500                  SM_BS_Act_1           equ $1500
00000000                            
00000000 =00004000                  S3_Special_Stage      equ $4000
00000000 =00004001                  SK_Special_Stage      equ $4001
00000000 =00005555                  Disabled_Level        equ $5555
00000000 =0000FFFF                  Reset_Game            equ $FFFF
00000000                            
00000000                            
00000000                            ; M_sicas 
00000000 =00000001                  Angel_Island_1_Snd       equ $0001
00000000 =00000002                  Angel_Island_2_Snd       equ $0002
00000000 =00000003                  Hydrocity_1_Snd          equ $0003
00000000 =00000004                  Hydrocity_2_Snd          equ $0004
00000000 =00000005                  Marble_Garden_1_Snd      equ $0005
00000000 =00000006                  Marble_Garden_2_Snd      equ $0006
00000000 =00000007                  Carnival_Night_1_Snd     equ $0007
00000000 =00000008                  Carnival_Night_2_Snd     equ $0008
00000000 =00000009                  Flying_Battery_1_Snd     equ $0009
00000000 =0000000A                  Flying_Battery_2_Snd     equ $000A
00000000 =0000000B                  Icecap_1_Snd             equ $000B
00000000 =0000000C                  Icecap_2_Snd             equ $000C
00000000 =0000000D                  Launch_Base_1_Snd        equ $000D
00000000 =0000000E                  Launch_Base_2_Snd        equ $000E
00000000 =0000000F                  Mushroom_Valley_1_Snd    equ $000F
00000000 =00000010                  Mushroom_Valley_2_Snd    equ $0010
00000000 =00000011                  Sandopolis_1_Snd         equ $0011
00000000 =00000012                  Sandopolis_2_Snd         equ $0012
00000000 =00000013                  Lava_Reef_1_Snd          equ $0013
00000000 =00000014                  Lava_Reef_2_Snd          equ $0014
00000000 =00000015                  Sky_Sanctuary_Snd        equ $0015
00000000 =00000016                  Death_Egg_1_Snd          equ $0016
00000000 =00000017                  Death_Egg_2_Snd          equ $0017
00000000 =00000018                  Mini_Boss_Snd            equ $0018
00000000 =00000019                  Boss_Snd                 equ $0019
00000000 =0000001A                  The_Doomsday_Snd         equ $001A
00000000 =0000001C                  Special_Stage_Snd        equ $001C
00000000 =0000001D                  BS_Slot_Machine_Snd      equ $001D
00000000 =0000001E                  BS_Gumball_Machine_Snd   equ $001E
00000000 =0000001F                  Knuckles_Theme_Snd       equ $001F
00000000 =00000020                  Azure_Lake_Snd           equ $0020
00000000 =00000021                  Balloon_Park_Snd         equ $0021
00000000 =00000022                  Desert_Palace_Snd        equ $0022
00000000 =00000023                  Chrome_Gadget_Snd        equ $0023
00000000 =00000024                  Endless_Mine_Snd         equ $0024
00000000 =00000025                  Title_Screen_Snd         equ $0025
00000000 =00000027                  Game_Over_Time_Over_Snd  equ $0027 
00000000 =00000028                  Continue_Snd             equ $0028
00000000 =0000002A                  Extra_Life_Snd           equ $002A
00000000 =0000002B                  Got_Emerald_Snd          equ $002B
00000000 =0000002C                  Invincibility_Snd        equ $002C
00000000 =00000031                  Panic_Snd                equ $0031 
00000000                            
00000000 =0000000A                  Super_Sonic_Snd          equ $000A 
00000000                            
00000000                            
00000000                            ; Efeitos especiais     
00000000 =00000032                  Ring_Sfx                 equ $0032
00000000 =00000033                  Ring_Left_Speaker_Sfx    equ $0033
00000000 =00000034                  Ring_Lost_Sfx            equ $0034
00000000 =00000035                  Hurt_Sfx                 equ $0035
00000000 =00000036                  Skidding_Sfx             equ $0036 ; Stopping_Sfx
00000000 =00000038                  Collect_Oxygen_Sfx       equ $0038 
00000000 =00000039                  Water_Splash_Sfx         equ $0039
00000000 =0000003B                  Drowning_Sfx             equ $003B
00000000 =0000003C                  Rolling_Sfx              equ $003C ; Spin_Sfx     
00000000 =0000003D                  Object_Hit_Sfx           equ $003D
00000000 =0000003E                  Got_Fire_Shield_Sfx      equ $003E  
00000000 =0000003F                  Got_Water_Shield_Sfx     equ $003F
00000000 =00000041                  Got_Lightning_Shield_Sfx equ $0041
00000000 =00000043                  Fire_Shield_Sfx          equ $0043
00000000 =00000046                  Hyper_Form_Change_Sfx    equ $0046
00000000 =0000004A                  Grab_Sfx                 equ $004A
00000000 =0000004F                  Waterfall_Splash_Sfx     equ $004F
00000000 =00000051                  Projectile_Sfx           equ $0051
00000000 =00000052                  Missile_Explosion_Sfx    equ $0052
00000000 =00000053                  Flame_Sfx                equ $0053
00000000 =00000054                  Flying_Battery_Move_Sfx  equ $0054
00000000 =00000056                  Missile_Throw_Sfx        equ $0056 
00000000 =00000057                  Robotnik_Buzzer_Sfx      equ $0057
00000000 =00000058                  Spike_Move_Sfx           equ $0058
00000000 =0000005C                  Draw_Bridge_Move_Sfx     equ $005C
00000000 =0000005D                  Geyser_Sfx               equ $005D
00000000 =0000005E                  Fan_Big_Sfx              equ $005E 
00000000 =00000061                  Sfx_61                   equ $0061
00000000 =00000062                  Smash_Sfx                equ $0062 
00000000 =00000064                  Switch_Blip_Sfx          equ $0064
00000000 =00000068                  Floor_Thump_Sfx          equ $0068
00000000 =0000006C                  Crash_Sfx                equ $006C
00000000 =00000070                  Jump_Sfx                 equ $0070
00000000 =00000075                  Level_Projectile_Sfx     equ $0075
00000000 =00000079                  Underwater_Sfx           equ $0079
00000000 =0000007C                  Boss_Hit_Sfx             equ $007C
00000000 =FFFFFF80                  Hoverpad_Sfx             equ -$80   ; $0080
00000000 =FFFFFF81                  Transporter_Sfx          equ -$7F   ; $0081
00000000 =FFFFFF82                  Tunnel_Booster_Sfx       equ -$7E   ; $0082
00000000 =FFFFFF83                  Rising_Platform_Sfx      equ -$7D   ; $0083
00000000 =FFFFFF84                  Wave_Hover_Sfx           equ -$7C   ; $0084
00000000 =FFFFFF85                  Trapdoor_Sfx             equ -$7B   ; $0085
00000000 =FFFFFF86                  Balloon_Pop_Sfx          equ -$7A   ; $0086 
00000000 =FFFFFF87                  Cannon_Turn_Sfx          equ -$79   ; $0087
00000000 =FFFFFF8B                  Small_Bumper_Sfx         equ -$75   ; $008B
00000000 =FFFFFF91                  Frost_Puff_Sfx           equ -$6F   ; $0091
00000000 =FFFFFF92                  Ice_Spike_Sfx            equ -$6E   ; $0092
00000000 =FFFFFF95                  Tube_Launcher_Sfx        equ -$6B   ; $0095
00000000 =FFFFFF97                  Bridge_Collapse_Sfx      equ -$69   ; $0097  
00000000 =FFFFFF9B                  Buzzer_Sfx               equ -$65   ; $009B
00000000 =FFFFFFAA                  Door_Close_Sfx           equ -$56   ; $00AA
00000000 =FFFFFFB0                  Slide_Thunk_Sfx          equ -$50   ; $00B0
00000000 =FFFFFFBB                  Super_Form_Change_Sfx    equ -$45   ; $00BB  
00000000 =FFFFFFC9                  Energy_Zap_Sfx           equ -$37   ; $00C9
00000000 =FFFFFFCE                  Check_Point_Sfx          equ -$32   ; $00CE 
00000000 =FFFFFFD0                  Special_Stage_Entry_Sfx  equ -$30   ; $00D0 
00000000 =FFFFFFD2                  Spring_Sfx               equ -$2E   ; $00D2
00000000 =000000D3                  Error_Sfx                equ $00D3       
00000000                            
00000000 =00000032                  S2_Enter_Big_Ring_Sfx    equ $0032
00000000 =00000098                  S2_Extra_Life_Snd        equ $0098
00000000 =0000009F                  S2_Panic_Snd             equ $009F 
00000000 =000000B9                  S2_Smash_Sfx             equ $00B9 
00000000 =000000C5                  S2_Cha_Ching_Sfx         equ $00C5 
00000000 =000000CC                  S2_Spring_Sfx            equ $00CC
00000000 =000000CD                  S2_Add_Points_Blip_Sfx   equ $00CD
00000000 =000000CF                  S2_Panel_Spinning_Sfx    equ $00CF 
00000000 =000000D9                  S2_Baaaang_Bumper_Sfx    equ $00D9
00000000                            
00000000                            
00000000                            ; Comandos
00000000 =FFFFFFE0                  Volume_Down              equ -$20 ; $E0
00000000 =FFFFFFE1                  Stop_Sound               equ -$1F ; $E1
00000000 =FFFFFFE2                  PSG_Mute                 equ -$1E ; $E2
00000000 =FFFFFFE3                  Stop_SFx                 equ -$1D ; $E3
00000000 =000000FC                  Music_Normal_Speed       equ $00FC
00000000                            
00000000                            ; Outros
00000000 =FFFFFFFF                  Sega_PCM               equ -$01 ; $FF
00000000                            
00000000                            
00000000                            ; Z80  
00000000 =00A00000                  Z80_RAM_Start                  equ $00A00000 
00000000                            
00000000                            ; I/O
00000000                            
00000000 =00A10001                  IO_Hardware_Version            equ $00A10001 
00000000 =00A10003                  IO_Joypad_Port_0               equ $00A10003
00000000 =00A10008                  IO_Port_0_Control              equ $00A10008
00000000 =00A1000A                  IO_Port_1_Control              equ $00A1000A
00000000 =00A1000C                  IO_Expansion_Control           equ $00A1000C
00000000                            
00000000 =00A11100                  Z80_Bus_Request                equ $00A11100 
00000000 =00A11200                  Z80_Reset                      equ $00A11200 
00000000                            
00000000                            ; VDP
00000000                            
00000000 =00C00000                  VDP_Data_Port                  equ $00C00000
00000000 =00C00004                  VDP_Control_Port               equ $00C00004
00000000                            
00000000                            ; RAM
00000000 =00000000                  StackPointer                 equ $00000000  
00000000 =0000018E                  ROM_Checksum                 equ $18E
00000000 =FFFE0000                  M68K_Dev_RAM_Start           equ $FFFE0000  
00000000                            RAM_start                    equ M68K_RAM_Start
00000000 =FFFF0000                  M68K_RAM_Start               equ $FFFF0000  
00000000                            
00000000                            
00000000 =FFFF7880                  Sprite_Table_Buffer_2            equ M68K_RAM_Start+$7880
00000000 =FFFF7B00                  Sprite_Table_Buffer_P2           equ M68K_RAM_Start+$7B00
00000000 =FFFF7D80                  Sprite_Table_Buffer_P2_2         equ M68K_RAM_Start+$7D80
00000000 =FFFF8000                  Level_Layout_Buffer              equ M68K_RAM_Start+$8000
00000000 =FFFF8000                  Fg_Mem_Start_Address             equ Level_Layout_Buffer
00000000 =FFFF8008                  Fg_Mem_Index_Address             equ Level_Layout_Buffer+$08
00000000 =FFFF9000                  Blocks_Mem_Address               equ M68K_RAM_Start+$9000
00000000 =FFFFAA00                  NemesisDec_Data_Buffer           equ M68K_RAM_Start+$AA00
00000000 =FFFFA800                  Horizontal_Scroll_Table          equ M68K_RAM_Start+$A800
00000000 =FFFFAC00                  Sprite_Table_Input               equ M68K_RAM_Start+$AC00
00000000                            
00000000 =FFFFB000                  Obj_Memory_Address               equ M68K_RAM_Start+$B000
00000000 =FFFFB000                  Obj_Player_One                   equ Obj_Memory_Address
00000000 =FFFFB04A                  Obj_Player_Two                   equ Obj_Memory_Address+$004A   
00000000 =FFFFB094                  Obj_02_Mem_Address               equ Obj_Memory_Address+(Obj_Size*$02)
00000000 =FFFFB128                  Obj_04_Mem_Address               equ Obj_Memory_Address+(Obj_Size*$04)
00000000 =FFFFB172                  Obj_05_Mem_Address               equ Obj_Memory_Address+(Obj_Size*$05)
00000000 =FFFFB250                  Obj_08_Mem_Address               equ Obj_Memory_Address+(Obj_Size*$08)
00000000 =FFFFB0DE                  Obj_Dynamic_RAM                  equ Obj_Memory_Address+(Obj_Size*$03) 
00000000 =FFFFCAE2                  Obj_Dynamic_RAM_End              equ Obj_Memory_Address+(Obj_Size*$5D) 
00000000 =FFFFCB2C                  Obj_Fixed_RAM                    equ Obj_Memory_Address+(Obj_Size*$5E)
00000000 =FFFFCB2C                  Obj_P1_Underwater_Control        equ Obj_Fixed_RAM                ; $5E
00000000 =FFFFCB76                  Obj_P2_Underwater_Control        equ Obj_Fixed_RAM+(Obj_Size*$01) ; $5F
00000000 =FFFFCBC0                  Obj_Super_Sonic_Stars_RAM        equ Obj_Fixed_RAM+(Obj_Size*$02) ; $60
00000000 =FFFFCC0A                  Obj_Miles_Tails_RAM              equ Obj_Fixed_RAM+(Obj_Size*$03) ; $61
00000000 =FFFFCC54                  Obj_P1_Dust_Water_Splash         equ Obj_Fixed_RAM+(Obj_Size*$04) ; $62
00000000 =FFFFCC9E                  Obj_P2_Dust_Water_Splash         equ Obj_Fixed_RAM+(Obj_Size*$05) ; $63
00000000 =FFFFCCE8                  Obj_P1_Shield                    equ Obj_Fixed_RAM+(Obj_Size*$06) ; $64
00000000 =FFFFCD32                  Obj_P2_Shield                    equ Obj_Fixed_RAM+(Obj_Size*$07) ; $65
00000000 =FFFFCD7C                  Obj_P1_Invincibility             equ Obj_Fixed_RAM+(Obj_Size*$08) ; $66
00000000 =FFFFCEA4                  Obj_P2_Invincibility             equ Obj_Fixed_RAM+(Obj_Size*$0C) ; $6A
00000000 =FFFFCF82                  Obj_Fixed_RAM_End                equ Obj_Fixed_RAM+(Obj_Size*$0F) ; $6D
00000000                                               
00000000 =FFFFCFE0                  Conveyor_Belt_Data_Array         equ M68K_RAM_Start+$CFE0                 
00000000 =FFFFD000                  Kosinski_Decomp_Buffer           equ M68K_RAM_Start+$D000
00000000 =FFFFE000                  Horizontal_Scroll_Buffer         equ M68K_RAM_Start+$E000 
00000000                                                       
00000000 =FFFFE380                  Collision_Response_List          equ M68K_RAM_Start+$E380
00000000                            
00000000 =FFFFE400                  Status_Table_Data                equ M68K_RAM_Start+$E400
00000000 =FFFFE500                  Position_Table_Data              equ M68K_RAM_Start+$E500
00000000 =FFFFE600                  Position_Table_Data_P2           equ M68K_RAM_Start+$E600
00000000                                                       
00000000 =FFFFE700                  DMA_Buffer_List                  equ M68K_RAM_Start+$E700
00000000 =FFFFE8F8                  DMA_Buffer_List_End              equ M68K_RAM_Start+$E8F8
00000000                            
00000000 =FFFFE900                  Ring_Status_Table                equ M68K_RAM_Start+$E900
00000000                                                       
00000000 =FFFFED00                  Palette_Buffer                   equ M68K_RAM_Start+$ED00
00000000 =FFFFED00                  Palette_Row_0_Offset             equ Palette_Buffer
00000000 =FFFFED20                  Palette_Row_1_Offset             equ Palette_Buffer+$0020
00000000 =FFFFED40                  Palette_Row_2_Offset             equ Palette_Buffer+$0040
00000000 =FFFFED60                  Palette_Row_3_Offset             equ Palette_Buffer+$0060
00000000                                                        
00000000 =FFFFED80                  Palette_Data_Target              equ Palette_Buffer+$0080
00000000 =FFFFEDA0                  Palette_Row_1_Data_Target        equ Palette_Buffer+$00A0
00000000 =FFFFEDC0                  Palette_Row_2_Data_Target        equ Palette_Buffer+$00C0
00000000 =FFFFEDE0                  Palette_Row_3_Data_Target        equ Palette_Buffer+$00E0                            
00000000                            
00000000                                                        
00000000 =FFFFEE00                  Camera_RAM                       equ M68K_RAM_Start+$EE00
00000000 =FFFFEE00                  Horizontal_Scrolling             equ Camera_RAM
00000000 =FFFFEE02                  Vertical_Scrolling               equ Camera_RAM+$02
00000000 =FFFFEE04                  Horizontal_Scrolling_P2          equ Camera_RAM+$04
00000000 =FFFFEE06                  Vertical_Scrolling_P2            equ Camera_RAM+$06
00000000 =FFFFEE08                  Tmp_EE08                         equ Camera_RAM+$08
00000000 =FFFFEE0A                  Sonic_Scroll_Lock_Flag           equ Camera_RAM+$0A
00000000 =FFFFEE0B                  Miles_Scroll_Lock_Flag           equ Camera_RAM+$0B
00000000 =FFFFEE0C                  Level_Limits_Min_X               equ Camera_RAM+$0C 
00000000 =FFFFEE0E                  Level_Limits_Max_X               equ Camera_RAM+$0E 
00000000 =FFFFEE10                  Level_Limits_Min_Y               equ Camera_RAM+$10 
00000000 =FFFFEE12                  Level_Limits_Max_Y               equ Camera_RAM+$12             
00000000 =FFFFEE14                  Sonic_Level_Limits_Min_X         equ Camera_RAM+$14 
00000000 =FFFFEE16                  Sonic_Level_Limits_Max_X         equ Camera_RAM+$16
00000000 =FFFFEE18                  Sonic_Level_Limits_Min_Y         equ Camera_RAM+$18
00000000 =FFFFEE1A                  Sonic_Level_Limits_Max_Y         equ Camera_RAM+$1A 
00000000 =FFFFEE1C                  Miles_Level_Limits_Min_X         equ Camera_RAM+$1C
00000000 =FFFFEE1E                  Miles_Level_Limits_Max_X         equ Camera_RAM+$1E
00000000 =FFFFEE20                  Miles_Level_Limits_Min_Y         equ Camera_RAM+$20
00000000 =FFFFEE22                  Miles_Level_Limits_Max_Y         equ Camera_RAM+$22
00000000 =FFFFEE24                  Camera_X_Scroll_Delay            equ Camera_RAM+$24  
00000000 =FFFFEE26                  Position_Table_Index             equ Camera_RAM+$26
00000000 =FFFFEE28                  Camera_X_Scroll_Delay_2P         equ Camera_RAM+$28 
00000000 =FFFFEE2A                  Position_Table_Index_2P          equ Camera_RAM+$2A
00000000 =FFFFEE2C                  Distance_From_Top                equ Camera_RAM+$2C
00000000 =FFFFEE2E                  Distance_From_Top_P2             equ Camera_RAM+$2E     
00000000 =FFFFEE30                  Rasters_Flag                     equ Camera_RAM+$30
00000000 =FFFFEE32                  Level_Limits_Y_Changing          equ Camera_RAM+$32
00000000 =FFFFEE33                  Dynamic_Resize_Routine           equ M68K_RAM_Start+$EE33
00000000 =FFFFEE39                  Fast_Vertical_Scroll_Flag        equ M68K_RAM_Start+$EE39
00000000 =FFFFEE3A                  Vertical_Scroll_Value_P2_2       equ M68K_RAM_Start+$EE3A
00000000 =FFFFEE3E                  Camera_X_Difference              equ Camera_RAM+$3E
00000000 =FFFFEE40                  Camera_Y_Difference              equ Camera_RAM+$40
00000000 =FFFFEE44                  Ring_Start_Offset_Ptr            equ M68K_RAM_Start+$EE44
00000000 =FFFFEE48                  Ring_End_Offset_Ptr              equ M68K_RAM_Start+$EE48
00000000 =FFFFEE4C                  Ring_Offset_Ptr                  equ M68K_RAM_Start+$EE4C
00000000 =FFFFEE50                  Object_Respaw_Next               equ M68K_RAM_Start+$EE50
00000000 =FFFFEE52                  Object_Respaw_Previous           equ M68K_RAM_Start+$EE52
00000000 =FFFFEE54                  Level_Id_2                       equ M68K_RAM_Start+$EE54
00000000 =FFFFEE55                  Act_Id_2                         equ M68K_RAM_Start+$EE55
00000000 =FFFFEE56                  Palette_Fade_Timer               equ M68K_RAM_Start+$EE56 
00000000 =FFFFEE60                  Camera_X_P2                      equ Camera_RAM+$60 
00000000 =FFFFEE64                  Camera_Y_P2                      equ Camera_RAM+$64
00000000 =FFFFEE68                  Screen_Pos_Buffer_X_P2           equ Camera_RAM+$68
00000000 =FFFFEE6C                  Screen_Pos_Buffer_Y_P2           equ Camera_RAM+$6C
00000000 =FFFFEE70                  Screen_Pos_Buffer_X_P2_2         equ Camera_RAM+$70
00000000 =FFFFEE74                  Screen_Pos_Buffer_Y_P2_2         equ Camera_RAM+$74
00000000 =FFFFEE78                  Camera_X                         equ Camera_RAM+$78
00000000 =FFFFEE7C                  Camera_Y                         equ Camera_RAM+$7C
00000000 =FFFFEE80                  Screen_Pos_Buffer_X              equ M68K_RAM_Start+$EE80
00000000 =FFFFEE84                  Screen_Pos_Buffer_Y              equ M68K_RAM_Start+$EE84
00000000 =FFFFEE88                  Screen_Pos_Rounded_X             equ M68K_RAM_Start+$EE88
00000000 =FFFFEE8A                  Screen_Pos_Rounded_Y             equ M68K_RAM_Start+$EE8A
00000000 =FFFFEE8C                  Screen_Pos_Buffer_X_2            equ M68K_RAM_Start+$EE8C
00000000 =FFFFEE8E                  AIz_Wavy_Flame_Counter           equ M68K_RAM_Start+$EE8E
00000000 =FFFFEE90                  Screen_Pos_Buffer_Y_2            equ M68K_RAM_Start+$EE90
00000000 =FFFFEE94                  Screen_Pos_Rounded_X_2           equ M68K_RAM_Start+$EE94
00000000 =FFFFEE96                  Screen_Pos_Rounded_Y_2           equ M68K_RAM_Start+$EE96
00000000 =FFFFEE98                  AIz_Flying_Battery_X             equ M68K_RAM_Start+$EE98  
00000000 =FFFFEE9C                  AIz_Flying_Battery_Y             equ M68K_RAM_Start+$EE9C
00000000 =FFFFEEA2                  AIz_Flying_Battery_Rounded_Y     equ M68K_RAM_Start+$EEA2
00000000 =FFFFEEA4                  Plane_Double_Update_Flag         equ M68K_RAM_Start+$EEA4
00000000 =FFFFEEA6                  Special_Vint_Routine             equ M68K_RAM_Start+$EEA6
00000000 =FFFFEEA8                  Screen_Wrap_X                    equ M68K_RAM_Start+$EEA8
00000000 =FFFFEEAA                  Screen_Wrap_Y                    equ M68K_RAM_Start+$EEAA
00000000 =FFFFEEAC                  Level_Layout_Wrap_Y              equ M68K_RAM_Start+$EEAC 
00000000 =FFFFEEAE                  Level_Layout_Wrap_Row            equ M68K_RAM_Start+$EEAE 
00000000 =FFFFEEB0                  VRAM_Add                         equ M68K_RAM_Start+$EEB0
00000000 =FFFFEEB2                  Level_Repeat_Routine             equ M68K_RAM_Start+$EEB2
00000000 =FFFFEEB4                  Level_Events_Buffer_0            equ M68K_RAM_Start+$EEB4
00000000 =FFFFEEB6                  Level_Events_Buffer_1            equ M68K_RAM_Start+$EEB6
00000000 =FFFFEEB8                  Level_Events_Buffer_0_P2         equ M68K_RAM_Start+$EEB8
00000000 =FFFFEEBA                  Level_Events_Buffer_1_P2         equ M68K_RAM_Start+$EEBA
00000000 =FFFFEEBC                  Level_Repeat_Offset              equ M68K_RAM_Start+$EEBC
00000000 =FFFFEEC0                  Level_Events_Routine             equ M68K_RAM_Start+$EEC0
00000000 =FFFFEEC2                  Level_Events_Routine_2           equ M68K_RAM_Start+$EEC2
00000000 =FFFFEEC4                  Foreground_Events_Y_Counter      equ M68K_RAM_Start+$EEC4
00000000 =FFFFEEC6                  Level_Events_Buffer_5            equ M68K_RAM_Start+$EEC6
00000000 =FFFFEEC8                  Draw_Delayed_Position            equ M68K_RAM_Start+$EEC8
00000000 =FFFFEECA                  Draw_Delayed_Position_Rowcount   equ M68K_RAM_Start+$EECA
00000000 =FFFFEECC                  Earthquake_Flag                  equ M68K_RAM_Start+$EECC
00000000 =FFFFEECE                  Earthquake_Offset                equ M68K_RAM_Start+$EECE
00000000 =FFFFEED0                  Earthquake_Last_Offset           equ M68K_RAM_Start+$EED0
00000000 =FFFFEED2                  Background_Events                equ M68K_RAM_Start+$EED2  
00000000 =FFFFEEEA                  Vertical_Scroll_Buffer           equ M68K_RAM_Start+$EEEA
00000000 =FFFFEF3A                  Sprite_Mask_Flag                 equ M68K_RAM_Start+$EF3A
00000000 =FFFFEF3C                  Use_Normal_Sprite_Table          equ M68K_RAM_Start+$EF3C
00000000 =FFFFEF3E                  Normal_Sprite_Table_Flag         equ M68K_RAM_Start+$EF3E
00000000 =FFFFEF40                  Level_Result_BCD_Total_Bonus     equ M68K_RAM_Start+$EF40
00000000 =FFFFEF80                  Ring_Consumption_Table           equ M68K_RAM_Start+$EF80
00000000                                                         
00000000 =FFFFF000                  Palette_Underwater_Target        equ M68K_RAM_Start+$F000
00000000                                                         
00000000 =FFFFF080                  Palette_Underwater_Buffer        equ M68K_RAM_Start+$F080
00000000 =FFFFF080                  Palette_UW_Row_0_Offset          equ Palette_Underwater_Buffer
00000000 =FFFFF0A0                  Palette_UW_Row_1_Offset          equ Palette_Underwater_Buffer+$0020
00000000 =FFFFF0C0                  Palette_UW_Row_2_Offset          equ Palette_Underwater_Buffer+$0040
00000000 =FFFFF0E0                  Palette_UW_Row_3_Offset          equ Palette_Underwater_Buffer+$0060
00000000                                                         
00000000 =FFFFF100                  Plane_Buffer                     equ M68K_RAM_Start+$F100
00000000 =FFFFF600                  Game_Mode                        equ M68K_RAM_Start+$F600
00000000 =FFFFF602                  Control_Ports_Logical_Data       equ M68K_RAM_Start+$F602
00000000 =FFFFF604                  Control_Ports_Buffer_Data        equ M68K_RAM_Start+$F604
00000000 =FFFFF608                  HBlank_Ptr                       equ M68K_RAM_Start+$F608
00000000 =FFFFF60E                  VDP_Register_1_Command           equ M68K_RAM_Start+$F60E
00000000 =FFFFF614                  Demo_Timer                       equ M68K_RAM_Start+$F614
00000000 =FFFFF616                  Vertical_Scroll_Value            equ M68K_RAM_Start+$F616
00000000 =FFFFF618                  Vertical_Scroll_Value_2          equ M68K_RAM_Start+$F618
00000000 =FFFFF61A                  Vertical_Scroll_Value_3          equ M68K_RAM_Start+$F61A
00000000 =FFFFF61E                  Vertical_Scroll_Value_P2         equ M68K_RAM_Start+$F61E
00000000 =FFFFF620                  Vertical_Scroll_Value_P2_3       equ M68K_RAM_Start+$F620
00000000 =FFFFF622                  S2_Teleport_Timer                equ M68K_RAM_Start+$F622 
00000000 =FFFFF623                  S2_Teleport_Flag                 equ M68K_RAM_Start+$F623 
00000000 =FFFFF624                  Horizontal_Int_Count_Cmd         equ M68K_RAM_Start+$F624
00000000 =FFFFF625                  Scanline_Counter                 equ M68K_RAM_Start+$F625
00000000 =FFFFF626                  Palette_Fade_Info                equ M68K_RAM_Start+$F626
00000000 =FFFFF627                  Palette_Fade_Count               equ M68K_RAM_Start+$F627
00000000 =FFFFF628                  VBlank_0_Run_Count               equ M68K_RAM_Start+$F628
00000000 =FFFFF62A                  VBlank_Index                     equ M68K_RAM_Start+$F62A
00000000 =FFFFF62C                  Sprites_Drawn                    equ M68K_RAM_Start+$F62C
00000000 =FFFFF62E                  Palette_Underwater_Ptr           equ M68K_RAM_Start+$F62E
00000000 =FFFFF632                  Palette_Cycle_Count_0            equ M68K_RAM_Start+$F632
00000000 =FFFFF634                  Palette_Cycle_Count_1            equ M68K_RAM_Start+$F634
00000000 =FFFFF636                  Random_Seed                      equ M68K_RAM_Start+$F636
00000000 =FFFFF63A                  Pause_Status                     equ M68K_RAM_Start+$F63A
00000000 =FFFFF640                  DMA_Trigger                      equ M68K_RAM_Start+$F640
00000000 =FFFFF644                  Horizontal_Interrupt_Flag        equ M68K_RAM_Start+$F644
00000000 =FFFFF646                  Water_Level_Move                 equ M68K_RAM_Start+$F646
00000000 =FFFFF648                  Current_Water_Level              equ M68K_RAM_Start+$F648
00000000 =FFFFF64A                  Target_Water_Level               equ M68K_RAM_Start+$F64A
00000000 =FFFFF64C                  Water_Level_Change_Speed         equ M68K_RAM_Start+$F64C
00000000 =FFFFF64D                  Water_Entered_Counter            equ M68K_RAM_Start+$F64D
00000000 =FFFFF64E                  Underwater_Flag                  equ M68K_RAM_Start+$F64E
00000000 =FFFFF64F                  H_Int_Update_Flag                equ M68K_RAM_Start+$F64F 
00000000 =FFFFF650                  Palette_Cycle_Counters           equ M68K_RAM_Start+$F650
00000000 =FFFFF65C                  Super_Sonic_Palette_Frame        equ M68K_RAM_Start+$F65C
00000000 =FFFFF65E                  Super_Sonic_Palette_Timer        equ M68K_RAM_Start+$F65E
00000000 =FFFFF65F                  Super_Sonic_Palette_Status       equ M68K_RAM_Start+$F65F
00000000 =FFFFF660                  PalCycle_Done_Flag               equ M68K_RAM_Start+$F660
00000000 =FFFFF662                  VBlank_Subroutine                equ M68K_RAM_Start+$F662
00000000 =FFFFF664                  Background_Collision_Flag        equ M68K_RAM_Start+$F664
00000000 =FFFFF668                  Level_Boundaries_Flag            equ M68K_RAM_Start+$F668
00000000 =FFFFF66A                  Control_Ports_Logical_Data_2     equ M68K_RAM_Start+$F66A
00000000 =FFFFF670                  Super_Sonic_Frame_Count          equ M68K_RAM_Start+$F670
00000000 =FFFFF680                  PLC_Data_Buffer                  equ M68K_RAM_Start+$F680
00000000 =FFFFF684                  Nemesis_Decomp_Destination       equ M68K_RAM_Start+$F684
00000000 =FFFFF6E0                  Nemesis_Decomp_Vars              equ M68K_RAM_Start+$F6E0
00000000 =FFFFF6E4                  Nemesis_Repeat_Count             equ M68K_RAM_Start+$F6E4
00000000 =FFFFF6E8                  Nemesis_Palette_Index            equ M68K_RAM_Start+$F6E8
00000000 =FFFFF6EC                  Nemesis_Previous_Row             equ M68K_RAM_Start+$F6EC
00000000 =FFFFF6F0                  Nemesis_Data_Word                equ M68K_RAM_Start+$F6F0
00000000 =FFFFF6F4                  Nemesis_Shift_Value              equ M68K_RAM_Start+$F6F4
00000000 =FFFFF6F8                  PLC_Data_Count                   equ M68K_RAM_Start+$F6F8
00000000 =FFFFF6FA                  Nemesis_Frame_Pattern_Left       equ M68K_RAM_Start+$F6FA
00000000 =FFFFF700                  Miles_Control_Vars               equ M68K_RAM_Start+$F700    
00000000 =FFFFF702                  Miles_CPU_Ctrl_Auto_Timer        equ M68K_RAM_Start+$F702
00000000 =FFFFF704                  Miles_CPU_Respawn_Timer          equ M68K_RAM_Start+$F704
00000000 =FFFFF708                  Miles_CPU_Routine                equ M68K_RAM_Start+$F708 
00000000 =FFFFF70A                  Miles_CPU_Respawn_X              equ M68K_RAM_Start+$F70A
00000000 =FFFFF70C                  Miles_CPU_Respawn_Y              equ M68K_RAM_Start+$F70C 
00000000 =FFFFF70F                  Miles_CPU_Jumping                equ M68K_RAM_Start+$F70F
00000000 =FFFFF710                  Ring_Pos_Routine                 equ M68K_RAM_Start+$F710
00000000 =FFFFF711                  Title_Card_Flag                  equ M68K_RAM_Start+$F711
00000000 =FFFFF71A                  CNz_Triangle_Pos_Routine         equ M68K_RAM_Start+$F71A
00000000 =FFFFF71B                  CNz_Triangle_Pos_Flag            equ M68K_RAM_Start+$F71B
00000000 =FFFFF71C                  CNz_Triangle_Pos_Start           equ M68K_RAM_Start+$F71C
00000000 =FFFFF720                  CNz_Triangle_Pos_End             equ M68K_RAM_Start+$F720
00000000 =FFFFF724                  CNz_Triangle_Pos_Start_2P        equ M68K_RAM_Start+$F724
00000000 =FFFFF728                  CNz_Triangle_Pos_End_2P          equ M68K_RAM_Start+$F728
00000000 =FFFFF72E                  Palette_Cycle_Flag               equ M68K_RAM_Start+$F72E
00000000 =FFFFF730                  Water_Level_Flag                 equ M68K_RAM_Start+$F730
00000000 =FFFFF732                  Demo_Button_Index_2P             equ M68K_RAM_Start+$F732
00000000 =FFFFF734                  Demo_Button_Press_Counter_2P     equ M68K_RAM_Start+$F734
00000000 =FFFFF73E                  Carrying_Sonic_Data              equ M68K_RAM_Start+$F73E
00000000 =FFFFF740                  Art_Scaling_Data_Buffer          equ M68K_RAM_Start+$F740
00000000 =FFFFF744                  Art_Scaling_Index_0              equ M68K_RAM_Start+$F744
00000000 =FFFFF746                  Art_Scaling_Index_1              equ M68K_RAM_Start+$F746
00000000 =FFFFF748                  Art_Scaling_Index_2              equ M68K_RAM_Start+$F748
00000000 =FFFFF74A                  Art_Scaling_Result_0             equ M68K_RAM_Start+$F74A
00000000 =FFFFF74E                  Art_Scaling_Result_1             equ M68K_RAM_Start+$F74E
00000000 =FFFFF752                  Art_Scaling_Result_2             equ M68K_RAM_Start+$F752
00000000 =FFFFF75C                  Art_Scaling_Address              equ M68K_RAM_Start+$F75C
00000000 =FFFFF760                  Sonic_Max_Speed                  equ M68K_RAM_Start+$F760
00000000 =FFFFF762                  Sonic_Acceleration               equ M68K_RAM_Start+$F762
00000000 =FFFFF764                  Sonic_Deceleration               equ M68K_RAM_Start+$F764
00000000 =FFFFF766                  Sonic_Previous_Frame             equ M68K_RAM_Start+$F766
00000000 =FFFFF768                  Primary_Angle                    equ M68K_RAM_Start+$F768
00000000 =FFFFF76A                  Secondary_Angle                  equ M68K_RAM_Start+$F76A
00000000 =FFFFF76C                  Object_Pos_Routine               equ M68K_RAM_Start+$F76C
00000000 =FFFFF76E                  Camera_X_Current                 equ M68K_RAM_Start+$F76E
00000000 =FFFFF770                  Object_Pos_Next                  equ M68K_RAM_Start+$F770
00000000 =FFFFF774                  Object_Pos_Previous              equ M68K_RAM_Start+$F774
00000000 =FFFFF78C                  Camera_X_Current_P2              equ M68K_RAM_Start+$F78C
00000000 =FFFFF790                  Demo_Button_Index                equ M68K_RAM_Start+$F790
00000000 =FFFFF792                  Demo_Button_Press_Counter        equ M68K_RAM_Start+$F792
00000000 =FFFFF794                  Demo_Pal_FadeOut_Counter         equ M68K_RAM_Start+$F794
00000000 =FFFFF796                  Current_Collision_Ptr            equ M68K_RAM_Start+$F796
00000000 =FFFFF7AA                  Boss_Flag                        equ M68K_RAM_Start+$F7AA
00000000 =FFFFF7B2                  Sonic_LBz_Cylinder_Angle         equ M68K_RAM_Start+$F7B2
00000000 =FFFFF7B3                  Miles_LBz_Cylinder_Angle         equ M68K_RAM_Start+$F7B3 
00000000 =FFFFF7B4                  Primary_Collision_Ptr            equ M68K_RAM_Start+$F7B4
00000000 =FFFFF7B8                  Secondary_Collision_Ptr          equ M68K_RAM_Start+$F7B8
00000000 =FFFFF7BE                  S1_Load_Big_Ring_Art_Flag        equ M68K_RAM_Start+$F7BE  
00000000 =FFFFF7C7                  Wind_Tunnels_Flag                equ M68K_RAM_Start+$F7C7
00000000 =FFFFF7C8                  Sonic_Wind_Flag                  equ M68K_RAM_Start+$F7C8 
00000000 =FFFFF7C9                  Miles_Wind_Flag                  equ M68K_RAM_Start+$F7C9 
00000000 =FFFFF7CC                  Control_Locked_Flag_P1           equ M68K_RAM_Start+$F7CC 
00000000 =FFFFF7CD                  Special_Stage_Entry_Flag         equ M68K_RAM_Start+$F7CD
00000000 =FFFFF7CF                  Control_Locked_Flag_P2           equ M68K_RAM_Start+$F7CF 
00000000 =FFFFF7D0                  Enemy_Hit_Chain_Count            equ M68K_RAM_Start+$F7D0
00000000 =FFFFF7D2                  Level_Results_Time_Bonus         equ M68K_RAM_Start+$F7D2
00000000 =FFFFF7D4                  Level_Results_Ring_Bonus         equ M68K_RAM_Start+$F7D4
00000000 =FFFFF7D6                  HUD_Results_Refresh_Flag         equ M68K_RAM_Start+$F7D6
00000000 =FFFFF7DA                  Camera_X_Left                    equ M68K_RAM_Start+$F7DA 
00000000 =FFFFF7DC                  Camera_X_Left_P2                 equ M68K_RAM_Start+$F7DC
00000000 =FFFFF7DE                  Miles_Previous_Frame             equ M68K_RAM_Start+$F7DE
00000000 =FFFFF7DF                  Miles_Tails_Previous_Frame       equ M68K_RAM_Start+$F7DF
00000000                            ; Refresh_Level_Layout             equ M68K_RAM_Start+$F7E0
00000000 =FFFFF7E0                  Level_Trigger_Array              equ M68K_RAM_Start+$F7E0
00000000 =FFFFF7F0                  Animate_Counters                 equ M68K_RAM_Start+$F7F0
00000000 =FFFFF800                  Sprite_Table_Buffer              equ M68K_RAM_Start+$F800
00000000 =FFFFFA80                  Boss_Data_Buffer                 equ M68K_RAM_Start+$FA80
00000000                            ;Tmp_FA81                         equ M68K_RAM_Start+$FA81
00000000                            ;Tmp_FA82                         equ M68K_RAM_Start+$FA82
00000000                            ;Tmp_FA83                         equ M68K_RAM_Start+$FA83
00000000                            ;Tmp_FA8A                         equ M68K_RAM_Start+$FA8A
00000000                            ;Tmp_FA8B                         equ M68K_RAM_Start+$FA8B
00000000 =FFFFFA92                  Target_Camera_Max_X              equ M68K_RAM_Start+$FA92
00000000 =FFFFFA94                  Target_Camera_Min_X              equ M68K_RAM_Start+$FA94
00000000 =FFFFFA96                  Target_Camera_Min_Y              equ M68K_RAM_Start+$FA96
00000000 =FFFFFA98                  Target_Camera_Max_Y              equ M68K_RAM_Start+$FA98
00000000 =FFFFFA9A                  Slotted_Objects_Bits             equ M68K_RAM_Start+$FA9A
00000000 =FFFFFAA2                  Boss_Attack_Started              equ M68K_RAM_Start+$FAA2
00000000 =FFFFFAA3                  Boss_Defeated_Flag               equ M68K_RAM_Start+$FAA3
00000000 =FFFFFAA4                  Obj_Knuckles_Mem_Address         equ M68K_RAM_Start+$FAA4
00000000 =FFFFFAA6                  Obj_End_Panel_Mem_Address        equ M68K_RAM_Start+$FAA6
00000000 =FFFFFAA8                  Player_Control_Lock_Flag         equ M68K_RAM_Start+$FAA8
00000000 =FFFFFAA9                  Knuckles_Control_Lock_Flag       equ M68K_RAM_Start+$FAA9
00000000 =FFFFFAAA                  End_Level_Flag                   equ M68K_RAM_Start+$FAAA
00000000 =FFFFFADA                  Palette_Rotation_Custom          equ M68K_RAM_Start+$FADA
00000000 =FFFFFADE                  Palette_Rotation_Data            equ M68K_RAM_Start+$FADE
00000000 =FFFFFB00                  Object_Respawn_Table             equ M68K_RAM_Start+$FB00
00000000                            
00000000 =FFFFFB00                  S2_Palette_Buffer                equ M68K_RAM_Start+$FB00
00000000 =FFFFFB00                  S2_Palette_Row_0_Offset          equ S2_Palette_Buffer
00000000 =FFFFFB20                  S2_Palette_Row_1_Offset          equ S2_Palette_Buffer+$0020
00000000                            
00000000 =FFFFFD00                  Stack_Area                       equ M68K_RAM_Start+$FD00  
00000000 =FFFFFE00                  Stack_Area_End                   equ M68K_RAM_Start+$FE00 
00000000 =FFFFFE02                  Restart_Level_Flag               equ M68K_RAM_Start+$FE02
00000000 =FFFFFE04                  Level_Frame_Count                equ M68K_RAM_Start+$FE04
00000000 =FFFFFE06                  Debug_Mode_Object_Index          equ M68K_RAM_Start+$FE06 
00000000 =FFFFFE08                  Debug_Mode_Flag_Index            equ M68K_RAM_Start+$FE08 
00000000 =FFFFFE0A                  Debug_Mode_Camera_Delay          equ M68K_RAM_Start+$FE0A
00000000 =FFFFFE0B                  Debug_Mode_Camera_Speed          equ M68K_RAM_Start+$FE0B 
00000000 =FFFFFE0C                  Vertical_Interrupt_Count         equ M68K_RAM_Start+$FE0C
00000000 =FFFFFE10                  Level_Id                         equ M68K_RAM_Start+$FE10
00000000 =FFFFFE11                  Act_Id                           equ M68K_RAM_Start+$FE11
00000000 =FFFFFE12                  Life_Count                       equ M68K_RAM_Start+$FE12
00000000 =FFFFFE16                  Special_Stage_Id                 equ M68K_RAM_Start+$FE16 
00000000 =FFFFFE18                  Continue_Count                   equ M68K_RAM_Start+$FE18
00000000 =FFFFFE19                  Super_Sonic_Flag                 equ M68K_RAM_Start+$FE19 
00000000 =FFFFFE1A                  Time_Over_Flag                   equ M68K_RAM_Start+$FE1A
00000000 =FFFFFE1B                  Ring_Status_Flag                 equ M68K_RAM_Start+$FE1B ; Vida extra com 100 e 200 an_is e continue
00000000 =FFFFFE1C                  HUD_Life_Refresh_Flag            equ M68K_RAM_Start+$FE1C
00000000 =FFFFFE1D                  HUD_Rings_Refresh_Flag           equ M68K_RAM_Start+$FE1D
00000000 =FFFFFE1E                  HUD_Timer_Refresh_Flag           equ M68K_RAM_Start+$FE1E
00000000 =FFFFFE1F                  HUD_Score_Refresh_Flag           equ M68K_RAM_Start+$FE1F
00000000 =FFFFFE20                  Ring_Count_Address               equ M68K_RAM_Start+$FE20
00000000 =FFFFFE22                  Time_Count_Address               equ M68K_RAM_Start+$FE22
00000000 =FFFFFE23                  Timer_Minute_Count_Address       equ M68K_RAM_Start+$FE23
00000000 =FFFFFE24                  Timer_Second_Count_Address       equ M68K_RAM_Start+$FE24
00000000 =FFFFFE25                  Timer_Centiseconds_Count_Address equ M68K_RAM_Start+$FE25
00000000 =FFFFFE26                  Score_Count_Address              equ M68K_RAM_Start+$FE26
00000000 =FFFFFE30                  Saved_Level_Flag                 equ M68K_RAM_Start+$FE30
00000000 =FFFFFE31                  Saved_Last_Start_Post_Hit        equ M68K_RAM_Start+$FE31
00000000 =FFFFFE32                  Saved_Obj_X_P1                   equ M68K_RAM_Start+$FE32
00000000 =FFFFFE34                  Saved_Obj_Y_P1                   equ M68K_RAM_Start+$FE34
00000000 =FFFFFE36                  Saved_Ring_Count_Address         equ M68K_RAM_Start+$FE36
00000000 =FFFFFE38                  Saved_Time                       equ M68K_RAM_Start+$FE38
00000000 =FFFFFE3C                  Saved_Obj_Art_VRAM_P1            equ M68K_RAM_Start+$FE3C
00000000 =FFFFFE3E                  Saved_Top_Solid_P1               equ M68K_RAM_Start+$FE3E
00000000 =FFFFFE40                  Saved_Camera_X                   equ M68K_RAM_Start+$FE40
00000000 =FFFFFE42                  Saved_Camera_Y                   equ M68K_RAM_Start+$FE42
00000000 =FFFFFE50                  Saved_Current_Water_Level        equ M68K_RAM_Start+$FE50
00000000 =FFFFFE53                  Saved_Underwater_Flag            equ M68K_RAM_Start+$FE53
00000000 =FFFFFE54                  Saved_Ring_Status_Flag           equ M68K_RAM_Start+$FE54
00000000 =FFFFFE55                  Saved_Ring_Status_Flag_P2        equ M68K_RAM_Start+$FE55
00000000 =FFFFFE56                  Saved_Sonic_Level_Limits_Max_Y   equ M68K_RAM_Start+$FE56
00000000 =FFFFFE58                  Saved_Dynamic_Resize_Routine     equ M68K_RAM_Start+$FE58
00000000 =FFFFFE5A                  CopySonicMovesForMilesIndex      equ M68K_RAM_Start+$FE5A
00000000 =FFFFFE5E                  Oscillate_Data_Buffer            equ M68K_RAM_Start+$FE5E
00000000 =FFFFFEA2                  Object_Frame_Timer               equ M68K_RAM_Start+$FEA2
00000000 =FFFFFEA3                  Object_Frame_Buffer              equ M68K_RAM_Start+$FEA3
00000000 =FFFFFEA6                  Object_Frame_Anim_Counter        equ M68K_RAM_Start+$FEA6
00000000 =FFFFFEA7                  Object_Frame_Anim_Frame          equ M68K_RAM_Start+$FEA7
00000000 =FFFFFEA8                  Object_Frame_Anim_Accum          equ M68K_RAM_Start+$FEA8
00000000 =FFFFFEAA                  Object_Frame_Angle               equ M68K_RAM_Start+$FEAA
00000000 =FFFFFEB0                  LRz_Rocks_Routine                equ M68K_RAM_Start+$FEB0
00000000 =FFFFFEB2                  LRz_Rocks_Pos_Next               equ M68K_RAM_Start+$FEB2
00000000 =FFFFFEB6                  LRz_Rocks_Pos_Previous           equ M68K_RAM_Start+$FEB6  
00000000 =FFFFFEC0                  Miles_Max_Speed                  equ M68K_RAM_Start+$FEC0
00000000 =FFFFFEC2                  Miles_Acceleration               equ M68K_RAM_Start+$FEC2
00000000 =FFFFFEC4                  Miles_Deceleration               equ M68K_RAM_Start+$FEC4
00000000 =FFFFFEC6                  Life_Count_P2                    equ M68K_RAM_Start+$FEC6
00000000 =FFFFFEC7                  Ring_Status_Flag_P2              equ M68K_RAM_Start+$FEC7 ; Vida extra com 100 e 200 an_is e continue
00000000 =FFFFFEC8                  HUD_Life_Refresh_Flag_P2         equ M68K_RAM_Start+$FEC8
00000000 =FFFFFEC9                  HUD_Rings_Refresh_Flag_P2        equ M68K_RAM_Start+$FEC9
00000000 =FFFFFECA                  HUD_Timer_Refresh_Flag_P2        equ M68K_RAM_Start+$FECA
00000000 =FFFFFECB                  HUD_Score_Refresh_Flag_P2        equ M68K_RAM_Start+$FECB
00000000 =FFFFFECC                  Time_Over_Flag_P2                equ M68K_RAM_Start+$FECC
00000000 =FFFFFED0                  Ring_Count_Address_P2            equ M68K_RAM_Start+$FED0
00000000 =FFFFFED2                  Time_Count_Address_P2            equ M68K_RAM_Start+$FED2   
00000000 =FFFFFED3                  Timer_Minute_Count_Address_P2    equ M68K_RAM_Start+$FED3
00000000 =FFFFFED6                  Score_Count_Address_P2           equ M68K_RAM_Start+$FED6
00000000 =FFFFFEE0                  Saved_Level_Flag_P2              equ M68K_RAM_Start+$FEE0
00000000 =FFFFFEE1                  Saved_Last_Start_Post_Hit_P2     equ M68K_RAM_Start+$FEE1
00000000 =FFFFFEE2                  Saved_Obj_X_P2                   equ M68K_RAM_Start+$FEE2
00000000 =FFFFFEE4                  Saved_Obj_Y_P2                   equ M68K_RAM_Start+$FEE4
00000000 =FFFFFEE6                  Saved_Ring_Count_Address_P2      equ M68K_RAM_Start+$FEE6
00000000 =FFFFFEE8                  Saved_Time_Count_Address_P2      equ M68K_RAM_Start+$FEE8
00000000 =FFFFFEEC                  Saved_Obj_Art_VRAM_P2            equ M68K_RAM_Start+$FEEC
00000000 =FFFFFEEE                  Saved_Top_Solid_P2               equ M68K_RAM_Start+$FEEE
00000000 =FFFFFEF0                  Total_Ring_Count_Address         equ M68K_RAM_Start+$FEF0
00000000 =FFFFFEF2                  Total_Ring_Count_Address_P2      equ M68K_RAM_Start+$FEF2
00000000 =FFFFFEF4                  Monitors_Broken                  equ M68K_RAM_Start+$FEF4
00000000 =FFFFFEF6                  Monitors_Broken_P2               equ M68K_RAM_Start+$FEF6
00000000 =FFFFFEF8                  Loser_Timer_Left                 equ M68K_RAM_Start+$FEF8
00000000 =FFFFFEFA                  Competition_Laps_To_Win          equ M68K_RAM_Start+$FEFA
00000000 =FFFFFEFC                  Competition_Lap_Count_P1         equ M68K_RAM_Start+$FEFC
00000000 =FFFFFEFD                  Competition_Lap_Count_P2         equ M68K_RAM_Start+$FEFD
00000000 =FFFFFF02                  Results_Screen_2P                equ M68K_RAM_Start+$FF02
00000000 =FFFFFF04                  Remainning_Rings_Count           equ M68K_RAM_Start+$FF04
00000000 =FFFFFF06                  Perfect_Bonus_Rings_Flag         equ M68K_RAM_Start+$FF06 
00000000 =FFFFFF08                  Player_Selected_Flag             equ M68K_RAM_Start+$FF08 
00000000 =FFFFFF0A                  Player_Select_Flag               equ M68K_RAM_Start+$FF0A 
00000000 =FFFFFF0C                  Two_Player_Items_Mode            equ M68K_RAM_Start+$FF0C
00000000 =FFFFFF0E                  Kosinski_Mod_Queue_Count         equ M68K_RAM_Start+$FF0E
00000000 =FFFFFF10                  Kosinski_Saved_Registers         equ M68K_RAM_Start+$FF10 
00000000 =FFFFFF38                  Kosinski_Saved_SR                equ M68K_RAM_Start+$FF38
00000000 =FFFFFF3A                  Kosinski_Bookmark                equ M68K_RAM_Start+$FF3A
00000000 =FFFFFF3E                  Kosinski_Description_Field       equ M68K_RAM_Start+$FF3E
00000000 =FFFFFF40                  Kosinski_Decomp_Queue            equ M68K_RAM_Start+$FF40
00000000 =FFFFFF44                  Kosinski_Decomp_Destination      equ M68K_RAM_Start+$FF44
00000000 =FFFFFF60                  Kosinski_Modules_Left            equ M68K_RAM_Start+$FF60
00000000 =FFFFFF62                  Kosinski_Module_Size             equ M68K_RAM_Start+$FF62
00000000 =FFFFFF64                  Kosinski_Mod_Queue               equ M68K_RAM_Start+$FF64
00000000 =FFFFFF68                  Kosinski_Mod_Destination         equ M68K_RAM_Start+$FF68
00000000 =FFFFFF7C                  Tmp_FF7C                         equ M68K_RAM_Start+$FF7C
00000000 =FFFFFF7E                  Tmp_FF7E                         equ M68K_RAM_Start+$FF7E
00000000 =FFFFFF80                  Level_Select_Hold_Timer          equ M68K_RAM_Start+$FF80 
00000000 =FFFFFF82                  Level_Select_Menu_Cursor         equ M68K_RAM_Start+$FF82  
00000000 =FFFFFF84                  Sound_Test_Sound                 equ M68K_RAM_Start+$FF84
00000000 =FFFFFF86                  Title_Screen_Menu_Cursor         equ M68K_RAM_Start+$FF86
00000000 =FFFFFF88                  Level_Id_2P                      equ M68K_RAM_Start+$FF88
00000000 =FFFFFF89                  Act_Id_2P                        equ Level_Id_2P+$01
00000000 =FFFFFF8A                  Two_Player_Flag_2                equ M68K_RAM_Start+$FF8A
00000000 =FFFFFF8C                  Options_Menu_Cursor              equ M68K_RAM_Start+$FF8C
00000000 =FFFFFF8E                  Level_Results_Total_Bonus        equ M68K_RAM_Start+$FF8E
00000000 =FFFFFF90                  Level_Music_Buffer               equ M68K_RAM_Start+$FF90
00000000 =FFFFFF98                  Game_Over_2P_Flag                equ M68K_RAM_Start+$FF98
00000000 =FFFFFFB0                  SS_Completed_Flag                equ M68K_RAM_Start+$FFB0 
00000000 =FFFFFFB1                  Emeralds_Count                   equ M68K_RAM_Start+$FFB1
00000000 =FFFFFFB2                  Emerald_Collected_Flag_List      equ M68K_RAM_Start+$FFB2 
00000000                            
00000000 =FFFFFFBC                  Title_Screen_Animate_Buffer      equ M68K_RAM_Start+$FFBC
00000000 =FFFFFFBD                  Title_Screen_Animate_Delay       equ M68K_RAM_Start+$FFBD
00000000 =FFFFFFBE                  Title_Screen_Animate_Frame       equ M68K_RAM_Start+$FFBE
00000000                                                         
00000000 =FFFFFFC0                  Next_Extra_Life_Score            equ M68K_RAM_Start+$FFC0
00000000 =FFFFFFC4                  Next_Extra_Life_Score_P2         equ M68K_RAM_Start+$FFC4
00000000 =FFFFFFC8                  End_Level_Art_Load_Flag          equ M68K_RAM_Start+$FFC8
00000000 =FFFFFFCA                  Debug_Player_Obj_Map             equ M68K_RAM_Start+$FFCA
00000000 =FFFFFFCE                  Debug_Player_Obj_Art_VRAM        equ M68K_RAM_Start+$FFCE
00000000 =FFFFFFD0                  Level_Select_Flag                equ M68K_RAM_Start+$FFD0 
00000000 =FFFFFFD1                  Slow_Motion_Flag                 equ M68K_RAM_Start+$FFD1
00000000 =FFFFFFD2                  Debug_Mode_Flag                  equ M68K_RAM_Start+$FFD2
00000000 =FFFFFFD4                  Secret_Code_Input_Entries        equ M68K_RAM_Start+$FFD4
00000000 =FFFFFFD6                  Secret_Code_Input_Entries_2      equ Secret_Code_Input_Entries+$02
00000000 =FFFFFFD8                  Two_Player_Flag                  equ M68K_RAM_Start+$FFD8 
00000000 =FFFFFFDA                  Menu_Player_One_Cursor           equ M68K_RAM_Start+$FFDA
00000000 =FFFFFFDB                  Menu_Player_Two_Cursor           equ M68K_RAM_Start+$FFDB 
00000000 =FFFFFFDC                  CNz_Triangle_Angle_Buffer        equ M68K_RAM_Start+$FFDC 
00000000 =FFFFFFE4                  Sound_Buffer_Id                  equ M68K_RAM_Start+$FFE4
00000000 =FFFFFFF0                  Auto_Control_Player_Flag         equ M68K_RAM_Start+$FFF0
00000000 =FFFFFFF2                  Demo_Sequence_Idx                equ M68K_RAM_Start+$FFF2
00000000 =FFFFFFF4                  End_Demo_Sequence_Idx            equ M68K_RAM_Start+$FFF4
00000000 =FFFFFFF6                  Vertical_Frequency               equ M68K_RAM_Start+$FFF6
00000000 =FFFFFFF8                  Hardware_Id                      equ M68K_RAM_Start+$FFF8 
00000000 =FFFFFFFA                  Debug_Mode_Active                equ M68K_RAM_Start+$FFFA
00000000 =FFFFFFFC                  Init_Flag                        equ M68K_RAM_Start+$FFFC 
00000000                            
00000000                            ; CRAM
00000000 =C0000000                  Color_RAM_Address              equ $C0000000
00000000                            
00000000                            ; Variaveis para os menus exceto sele__o de fases que _ comprimido
00000000 =00000000                  __                      equ  $00
00000000 =00000010                  _0                      equ  $10
00000000 =00000011                  _1                      equ  $11
00000000 =00000012                  _2                      equ  $12  
00000000 =0000001A                  _st                     equ  $1A  ; estrela no sound test
00000000 =0000001E                  _A                      equ  $1E
00000000 =0000001F                  _B                      equ  $1F 
00000000 =00000020                  _C                      equ  $20
00000000 =00000021                  _D                      equ  $21
00000000 =00000022                  _E                      equ  $22
00000000 =00000023                  _F                      equ  $23
00000000 =00000024                  _G                      equ  $24
00000000 =00000025                  _H                      equ  $25 
00000000 =00000026                  _I                      equ  $26
00000000 =00000027                  _J                      equ  $27
00000000 =00000028                  _K                      equ  $28
00000000 =00000029                  _L                      equ  $29
00000000 =0000002A                  _M                      equ  $2A 
00000000 =0000002B                  _N                      equ  $2B 
00000000 =0000002C                  _O                      equ  $2C
00000000 =0000002D                  _P                      equ  $2D
00000000 =0000002E                  _Q                      equ  $2E
00000000 =0000002F                  _R                      equ  $2F
00000000 =00000030                  _S                      equ  $30
00000000 =00000031                  _T                      equ  $31
00000000 =00000032                  _U                      equ  $32
00000000 =00000033                  _V                      equ  $33
00000000 =00000034                  _W                      equ  $34
00000000 =00000035                  _X                      equ  $35
00000000 =00000036                  _Y                      equ  $36
00000000 =00000037                  _Z                      equ  $37  
00000000 =00000037                  _Z                      equ  $37  
00000000                                                                
00000000                            Prog_Start_Vector:
00000000 0000 0000 0000 0000 0000+  Vectors:	dc.l	Vectors,	EntryPoint,	ErrorTrap,	ErrorTrap	; 0
00000010 0000 0000 0000 0000 0000+  		dc.l	ErrorTrap,	ErrorTrap,	ErrorTrap,	ErrorTrap	; 4
00000020 0000 0000 0000 0000 0000+  		dc.l	ErrorTrap,	ErrorTrap,	ErrorTrap	
0000002C 0000 0000                  Interrupt_0C:     dc.l  ErrorTrap	; 8
00000030 0000 0000 0000 0000 0000+  Interrupt_0D:		dc.l	ErrorTrap,	ErrorTrap,	ErrorTrap,	ErrorTrap	; 12
00000040 0000 0000 0000 0000 0000+  		dc.l	ErrorTrap,	ErrorTrap,	ErrorTrap,	ErrorTrap	; 16
00000050 0000 0000 0000 0000 0000+  		dc.l	ErrorTrap,	ErrorTrap,	ErrorTrap,	ErrorTrap	; 20
00000060 0000 0000 0000 0000 0000+  		dc.l	ErrorTrap,	ErrorTrap,	ErrorTrap,	ErrorTrap	; 24
00000070 0000 0000 0000 0000 0000+  		dc.l	JmpTo_HInt,	ErrorTrap,	VInt,		ErrorTrap	; 28
00000080 0000 0000 0000 0000 0000+  		dc.l	ErrorTrap,	ErrorTrap,	ErrorTrap,	ErrorTrap	; 32
00000090 0000 0000 0000 0000 0000+  		dc.l	ErrorTrap,	ErrorTrap,	ErrorTrap,	ErrorTrap	; 36
000000A0 0000 0000 0000 0000 0000+  		dc.l	ErrorTrap,	ErrorTrap,	ErrorTrap,	ErrorTrap	; 40
000000B0 0000 0000 0000 0000 0000+  		dc.l	ErrorTrap,	ErrorTrap,	ErrorTrap,	ErrorTrap	; 44
000000C0 0000 0000 0000 0000 0000+  		dc.l	ErrorTrap,	ErrorTrap,	ErrorTrap,	ErrorTrap	; 48
000000D0 0000 0000 0000 0000 0000+  		dc.l	ErrorTrap,	ErrorTrap,	ErrorTrap,	ErrorTrap	; 52
000000E0 0000 0000 0000 0000 0000+  		dc.l	ErrorTrap,	ErrorTrap,	ErrorTrap,	ErrorTrap	; 56
000000F0 0000 0000 0000 0000 0000+  		dc.l	ErrorTrap,	ErrorTrap,	ErrorTrap,	ErrorTrap	; 60
00000100 5345 4741 2047 454E 4553+  Header:		dc.b "SEGA GENESIS    "
00000110 2843 2953 4547 4120 3139+  Copyright:	dc.b "(C)SEGA 1993.NOV"
00000120 534F 4E49 4320 5448 4520+  Domestic_Name:	dc.b "SONIC THE             HEDGEHOG 3                "
00000150 534F 4E49 4320 5448 4520+  Overseas_Name:	dc.b "SONIC THE             HEDGEHOG 3                "
00000180 474D 204D 4B2D 3130 3739+  Serial_Number:	dc.b "GM MK-1079 -00"
0000018E A8F2                       Checksum:	dc.w $A8F2
00000190 4A20 2020 2020 2020 2020+  Input:		dc.b "J               "
000001A0 0000 0000                  ROMStartLoc:	dc.l Vectors
000001A4 0000 0000                  ROMEndLoc:	dc.l EndOfROM-1
000001A8 0000 0000                  RAMStartLoc:	dc.l (RAM_start&$FFFFFF)
000001AC 0000 0000                  RAMEndLoc:	dc.l (RAM_start&$FFFFFF)+$FFFF
000001B0 5241                       CartRAM_Info:	dc.b "RA"
000001B2 F820                       CartRAM_Type:	dc.w %1111100000100000
000001B4 0020 0001                  CartRAMStartLoc:dc.l $00200001
000001B8 0020 03FF                  CartRAMEndLoc:	dc.l $002003FF
000001BC 2020                       Modem_Info:	dc.b "  "
000001BE 2020 2020 2020 2020 2020   		dc.b "          "
000001C8 0001                       Unknown_Header:	dc.w 1
000001CA 2020 2020 2020             		dc.b "      "
000001D0 0020 0000                  		dc.w $20, 0
000001D4 003F FFFF                  		dc.l $3FFFFF
000001D8 0020 0001                  		dc.l $200001
000001DC 0020 03FF                  		dc.l $2003FF
000001E0 2020 2020 2020 2020 2020+  		dc.b "                "
000001F0 5520 2020 2020 2020 2020+  Country_Code:	dc.b "U               "
00000200                            ;-------------------------------------------------------------------------------
00000200                            ROM_Data_Start:                                                ; Offset_0x000200
00000200                            ErrorTrap:                                                     
00000200                            Line1010Emu:
00000200                            Line1111Emu:
00000200                            ErrorException:
00000200 4E71                                       nop                                                             
00000202 4E71                                       nop                                                             
00000204 60FA                                       bra.s   ErrorTrap                              ; Offset_0x000200
00000206                            ;===============================================================================                
00000206                            EntryPoint:
00000206                            ROM_Prog_Start:                                                ; Offset_0x000206
00000206 4FF8 FE00                                  lea     (Stack_Area_End).w, A7                       ; $FFFFFE00
0000020A 4AB9 00A1 0008                             tst.l   (IO_Port_0_Control)                          ; $00A10008
00000210 6600                                       bne.s   PortA_OK                               ; Offset_0x000218
00000212 4A79 00A1 000C                             tst.w   (IO_Expansion_Control)                       ; $00A1000C
00000218                            PortA_OK:                                                      ; Offset_0x000218
00000218 6600                                       bne.s   PortC_OK                               ; Offset_0x000296
0000021A 4BFA 0000                                  lea     InitValues(PC), A5                     ; Offset_0x000298
0000021E 4C9D 00E0                                  movem.w (A5)+, D5-D7
00000222 4CDD 1F00                                  movem.l (A5)+, A0-A4
00000226 1029 EF01                                  move.b	-$10FF(a1),d0
0000022A 0200 000F                                  andi.b  #$0F, D0
0000022E 6700                                       beq.s   SkipSecurity                           ; Offset_0x000238
00000230 237C 5345 4741 2F00                        move.l  #'SEGA', $2F00(A1)
00000238                            SkipSecurity:                                                  ; Offset_0x000238
00000238 3014                                       move.w  (A4), D0
0000023A 7000                                       moveq   #$00, D0
0000023C 2C40                                       move.l  D0, A6
0000023E 4E66                                       move.l    A6, USP
00000240 7217                                       moveq   #$17, D1
00000242                            VDPInitLoop:                                                   ; Offset_0x000242
00000242 1A1D                                       move.b  (A5)+, D5
00000244 3885                                       move.w  D5, (A4)
00000246 DA47                                       add.w   D7, D5
00000248 51C9 FFF8                                  dbra    D1, VDPInitLoop                        ; Offset_0x000242                
0000024C 289D                                       move.l  (A5)+, (A4)
0000024E 3680                                       move.w  D0, (A3)
00000250 3287                                       move.w  D7, (A1)
00000252 3487                                       move.w  D7, (A2)
00000254                            WaitForZ80:                                                    ; Offset_0x000254
00000254 0111                                       btst    D0, (A1)
00000256 66FC                                       bne.s   WaitForZ80                             ; Offset_0x000254                
00000258 7425                                       moveq   #$25, D2
0000025A                            Z80InitLoop:                                                   ; Offset_0x00025A
0000025A 10DD                                       move.b  (A5)+, (A0)+
0000025C 51CA FFFC                                  dbra    D2, Z80InitLoop                        ; Offset_0x00025A
00000260 3480                                       move.w  D0, (A2)
00000262 3280                                       move.w  D0, (A1)
00000264 3487                                       move.w  D7, (A2)
00000266                            ClearRAMLoop:                                                  ; Offset_0x000266
00000266 2D00                                       move.l  D0, -(A6)
00000268 51CE FFFC                                  dbra    D6, ClearRAMLoop                       ; Offset_0x000266
0000026C 289D                                       move.l  (A5)+, (A4)
0000026E 289D                                       move.l  (A5)+, (A4)
00000270 761F                                       moveq   #$1F, D3
00000272                            ClearCRAMLoop:                                                 ; Offset_0x000272
00000272 2680                                       move.l  D0, (A3)
00000274 51CB FFFC                                  dbra    D3, ClearCRAMLoop                      ; Offset_0x000272
00000278 289D                                       move.l  (A5)+, (A4)
0000027A 7813                                       moveq   #$13, D4
0000027C                            ClearVSRAMLoop:                                                ; Offset_0x00027C
0000027C 2680                                       move.l  D0, (A3)
0000027E 51CC FFFC                                  dbra    D4, ClearVSRAMLoop                     ; Offset_0x00027C
00000282 7A03                                       moveq   #$03, D5
00000284                            PSGInitLoop:                                                   ; Offset_0x000284
00000284 175D 0011                                  move.b  (A5)+, $0011(A3)
00000288 51CD FFFA                                  dbra    D5, PSGInitLoop                        ; Offset_0x000284
0000028C 3480                                       move.w  D0, (A2)
0000028E 4CD6 7FFF                                  movem.l (A6), D0-D7/A0-A6
00000292 46FC 2700                                  move    #$2700, SR
00000296                            PortC_OK:                                                      ; Offset_0x000296
00000296 6000                                       bra.s   Game_Program                           ; Offset_0x000304                
00000298                            ;-------------------------------------------------------------------------------
00000298                            InitValues:                                                    ; Offset_0x000298                 
00000298 8000 3FFF 0100                             dc.w    $8000, $3FFF, $0100 
0000029E 00A0 0000                                  dc.l    Z80_RAM_Start               ; $00A00000
000002A2 00A1 1100                                  dc.l    Z80_Bus_Request             ; $00A11100
000002A6 00A1 1200                                  dc.l    Z80_Reset                   ; $00A11200
000002AA 00C0 0000                                  dc.l    VDP_Data_Port               ; $00C00000
000002AE 00C0 0004                                  dc.l    VDP_Control_Port            ; $00C00004                      
000002B2 0414 303C 076C 0000                        dc.b    $04, $14, $30, $3C, $07, $6C, $00, $00
000002BA 0000 FF00 8137 0001                        dc.b    $00, $00, $FF, $00, $81, $37, $00, $01
000002C2 0100 00FF FF00 0080                        dc.b    $01, $00, $00, $FF, $FF, $00, $00, $80
000002CA 4000 0080 AF01 D91F                        dc.b    $40, $00, $00, $80, $AF, $01, $D9, $1F 
000002D2 1127 0021 2600 F977                        dc.b    $11, $27, $00, $21, $26, $00, $F9, $77
000002DA EDB0 DDE1 FDE1 ED47                        dc.b    $ED, $B0, $DD, $E1, $FD, $E1, $ED, $47 
000002E2 ED4F D1E1 F108 D9C1                        dc.b    $ED, $4F, $D1, $E1, $F1, $08, $D9, $C1
000002EA D1E1 F1F9 F3ED 5636                        dc.b    $D1, $E1, $F1, $F9, $F3, $ED, $56, $36 
000002F2 E9E9 8104 8F02                             dc.b    $E9, $E9, $81, $04, $8F, $02
000002F8 C000 0000                                  dc.l    Color_RAM_Address           ; $C0000000
000002FC 4000 0010                                  dc.l    $40000010
00000300 9FBF DFFF                                  dc.b    $9F, $BF, $DF, $FF          ; PSG Data
00000304                            ;===============================================================================                
00000304                            Game_Program:                                                  ; Offset_0x000304
00000304 4A79 00C0 0004                             tst.w   (VDP_Control_Port)                           ; $00C00004
0000030A                            WaitForVDP:                                                    ; Offset_0x00030A
0000030A 3239 00C0 0004                             move.w  (VDP_Control_Port), D1                       ; $00C00004
00000310 0801 0001                                  btst    #$01, D1
00000314 66F4                                       bne.s   WaitForVDP                             ; Offset_0x00030A
00000316 0839 0006 00A1 000D                        btst    #$06, (IO_Expansion_Control+$0001)           ; $00A1000D
0000031E 6700                                       beq.s   ChecksumCheck                          ; Offset_0x00032C
00000320 0CB8 696E 6974 FFFC                        cmpi.l  #'init', (Init_Flag).w                       ; $FFFFFFFC
00000328 6700 0000                                  beq     AlreadyInit                            ; Offset_0x000376
0000032C                            ChecksumCheck:                                                 ; Offset_0x00032C
0000032C 207C 0000 0200                             move.l  #ROM_Data_Start, A0                    ; Offset_0x000200
00000332 227C 0000 01A4                             move.l  #ROMEndLoc, A1                           ; Offset_0x0001A4
00000338 2011                                       move.l  (A1), D0
0000033A 7200                                       moveq   #$00, D1
0000033C D258                                       add.w   (A0)+, D1
0000033E B088                                       cmp.l   A0, D0
00000340 4E71                                       nop
00000342 4E71                                       nop
00000344 227C 0000 018E                             move.l  #ROM_Checksum, A1                      ; Offset_0x00018E
0000034A B251                                       cmp.w   (A1), D1
0000034C 4E71                                       nop
0000034E 4E71                                       nop
00000350 4DF8 FE00                                  lea     (Stack_Area_End).w, A6                       ; $FFFFFE00
00000354 7E00                                       moveq   #$00, D7
00000356 3C3C 007F                                  move.w  #$007F, D6
0000035A                            ClearSomeRAMLoop:                                              ; Offset_0x00035A
0000035A 2CC7                                       move.l  D7, (A6)+
0000035C 51CE FFFC                                  dbra    D6, ClearSomeRAMLoop                   ; Offset_0x00035A
00000360 1039 00A1 0001                             move.b  (IO_Hardware_Version), D0                    ; $00A10001
00000366 0200 00C0                                  andi.b  #$C0, D0
0000036A 11C0 FFF8                                  move.b  D0, (Hardware_Id).w                          ; $FFFFFFF8
0000036E 21FC 696E 6974 FFFC                        move.l  #'init', (Init_Flag).w                       ; $FFFFFFFC
00000376                            AlreadyInit:                                                   ; Offset_0x000376
00000376 6100 0000                                  bsr     Check_VDP_Frequency                    ; Offset_0x00041E
0000037A 4DF9 00FF 0000                             lea     (M68K_RAM_Start&$00FFFFFF), A6               ; $00FF0000
00000380 7E00                                       moveq   #$00, D7
00000382 3C3C 3F7F                                  move.w  #$3F7F, D6                             
00000386                            ClearRemainingRAMLoop:                                         ; Offset_0x000386
00000386 2CC7                                       move.l  D7, (A6)+
00000388 51CE FFFC                                  dbra    D6, ClearRemainingRAMLoop              ; Offset_0x000386
0000038C 6100 0000                                  bsr     VDPRegSetup                            ; Offset_0x000F52
00000390 6100 0000                                  bsr     SoundDriverLoad                        ; Offset_0x001106
00000394 6100 0000                                  bsr     Control_Ports_Init                     ; Offset_0x000EE6
00000398 11FC 0000 F600                             move.b  #gm_SEGALogo, (Game_Mode).w             ; $00, $FFFFF600
0000039E                            ;-------------------------------------------------------------------------------                
0000039E                            MainGameLoop:                                                  ; Offset_0x00039E                             
0000039E 1038 F600                                  move.b  (Game_Mode).w, D0                            ; $FFFFF600
000003A2 0240 003C                                  andi.w  #$003C, D0
000003A6 4EBB 0000                                  jsr     GameModeArray(PC, D0)                  ; Offset_0x0003AC
000003AA 60F2                                       bra.s   MainGameLoop                           ; Offset_0x00039E                 
000003AC                            GameModeArray:                                                 ; Offset_0x0003AC
000003AC 6000 0000                                  bra     SEGA_Screen                            ; Offset_0x00300A
000003B0 6000 0000                                  bra     Title_Screen                           ; Offset_0x0031D4
000003B4 6000 0000                                  bra     Level                                  ; Offset_0x00399E
000003B8 6000 0000                                  bra     Level                                  ; Offset_0x00399E
000003BC 6000 0000                                  bra     S2_Special_Stage                       ; Offset_0x0003E0
000003C0 6000 0000                                  bra     S2_Continue                            ; Offset_0x0003E0
000003C4 6000 0000                                  bra     S2_Two_Player_Results                  ; Offset_0x0003E0
000003C8 6000 0000                                  bra     S2_Versus_Mode_Menu                    ; Offset_0x0052CC
000003CC 6000 0000                                  bra     S2_Ending_Sequence                     ; Offset_0x0003E0
000003D0 6000 0000                                  bra     S2_Options_Menu                        ; Offset_0x0052CC
000003D4 6000 0000                                  bra     S2_Level_Select_Menu                   ; Offset_0x0052CC
000003D8 6000 0000                                  bra     Special_Stage_Test_1                   ; Offset_0x00662A
000003DC 6000 0000                                  bra     Special_Stage_Test_2                   ; Offset_0x0070DC
000003E0                            ;=============================================================================== 
000003E0                            S2_Special_Stage:
000003E0                            S2_Continue:
000003E0                            S2_Two_Player_Results:
000003E0                            S2_Ending_Sequence:
000003E0                            Run_SEGA_Screen:                                               ; Offset_0x0003E0
000003E0 11FC 0000 F600                             move.b  #gm_SEGALogo, (Game_Mode).w             ; $00, $FFFFF600
000003E6 4E75                                       rts
000003E8                            ;=============================================================================== 
000003E8                            ChecksumError:                                                 ; Offset_0x0003E8
000003E8 2F01                                       move.l  D1, -(A7)
000003EA 6100 0000                                  bsr     VDPRegSetup                            ; Offset_0x000F52
000003EE 221F                                       move.l  (A7)+, D1
000003F0                            ChecksumError_Inf_Loop:                                        ; Offset_0x0003F0
000003F0 23FC C000 0000 00C0 0004                   move.l  #Color_RAM_Address, (VDP_Control_Port) ; $C0000000, $00C00004
000003FA 33C7 00C0 0000                             move.w  D7, (VDP_Data_Port)                          ; $00C00000
00000400 5247                                       addq.w  #$01, D7
00000402 60EC                                       bra.s   ChecksumError_Inf_Loop                 ; Offset_0x0003F0   
00000404                            ;=============================================================================== 
00000404                            Show_Red_Screen:                                               ; Offset_0x000404
00000404 23FC C000 0000 00C0 0004                   move.l  #Color_RAM_Address, (VDP_Control_Port) ; $C0000000, $00C00004
0000040E 7E3F                                       moveq   #$3F, D7
00000410                            Fill_Red_Loop:                                                 ; Offset_0x000410
00000410 33FC 000E 00C0 0000                        move.w  #$000E, (VDP_Data_Port)                      ; $00C00000
00000418 51CF FFF6                                  dbra    D7, Fill_Red_Loop                      ; Offset_0x000410
0000041C                            Show_Red_Screen_Inf_Loop:                                      ; Offset_0x00041C
0000041C 60FE                                       bra.s   Show_Red_Screen_Inf_Loop               ; Offset_0x00041C    
0000041E                            ;===============================================================================                
0000041E                            Check_VDP_Frequency:                                           ; Offset_0x00041E
0000041E 4BF9 00C0 0004                             lea     (VDP_Control_Port), A5                       ; $00C00004
00000424 3ABC 8174                                  move.w  #$8174, (A5)
00000428 7000                                       moveq   #$00, D0
0000042A                            Offset_0x00042A:
0000042A 3215                                       move.w  (A5), D1
0000042C 0241 0008                                  andi.w  #$0008, D1
00000430 67F8                                       beq.s   Offset_0x00042A
00000432                            Offset_0x000432:
00000432 3215                                       move.w  (A5), D1
00000434 0241 0008                                  andi.w  #$0008, D1
00000438 66F8                                       bne.s   Offset_0x000432
0000043A                            Offset_0x00043A:
0000043A 5240                                       addq.w  #$01, D0
0000043C 3215                                       move.w  (A5), D1
0000043E 0241 0008                                  andi.w  #$0008, D1
00000442 67F6                                       beq.s   Offset_0x00043A
00000444 31C0 FFF6                                  move.w  D0, (Vertical_Frequency).w                   ; $FFFFFFF6
00000448 4E75                                       rts                
0000044A                            ;===============================================================================  
0000044A                            
0000044A                            ;===============================================================================                  
0000044A                            ; Interrup__o Vertical
0000044A                            ; ->>>                           
0000044A                            ;===============================================================================   
0000044A                            VInt:
0000044A                            VBlank:                                                        ; Offset_0x00044A
0000044A 4E71                                       nop
0000044C 48E7 FFFE                                  movem.l D0-D7/A0-A6, -(A7)
00000450 4A38 F62A                                  tst.b   (VBlank_Index).w                             ; $FFFFF62A
00000454 6700 0000                                  beq     Default_VBlank                         ; Offset_0x0004CA
00000458                            Offset_0x000458:
00000458 3039 00C0 0004                             move.w  (VDP_Control_Port), D0                       ; $00C00004
0000045E 0240 0008                                  andi.w  #$0008, D0
00000462 67F4                                       beq.s   Offset_0x000458
00000464 23FC 4000 0010 00C0 0004                   move.l  #$40000010, (VDP_Control_Port)               ; $00C00004
0000046E 23F8 F616 00C0 0000                        move.l  (Vertical_Scroll_Value).w, (VDP_Data_Port)   ; $FFFFF616
00000476 0838 0006 FFF8                             btst    #$06, (Hardware_Id).w                        ; $FFFFFFF8
0000047C 6700                                       beq.s   Offset_0x000486
0000047E 303C 0700                                  move.w  #$0700, D0
00000482                            Offset_0x000482:
00000482 51C8 FFFE                                  dbra    D0, Offset_0x000482
00000486                            Offset_0x000486:
00000486 1038 F62A                                  move.b  (VBlank_Index).w, D0                         ; $FFFFF62A
0000048A 11FC 0000 F62A                             move.b  #$00, (VBlank_Index).w                       ; $FFFFF62A
00000490 31FC 0001 F644                             move.w  #$0001, (Horizontal_Interrupt_Flag).w        ; $FFFFF644
00000496 0240 003E                                  andi.w  #$003E, D0
0000049A 303B 0000                                  move.w  VBlank_List(PC, D0), D0                ; Offset_0x0004AC
0000049E 4EBB 0000                                  jsr     VBlank_List(PC, D0)                    ; Offset_0x0004AC
000004A2                            VBlank_Finalize:                                               ; Offset_0x0004A2               
000004A2 52B8 FE0C                                  addq.l  #$01, (Vertical_Interrupt_Count).w           ; $FFFFFE0C
000004A6 4CDF 7FFF                                  movem.l (A7)+, D0-D7/A0-A6
000004AA 4E73                                       rte    
000004AC                            ;-------------------------------------------------------------------------------
000004AC                            VBlank_List:                                                   ; Offset_0x0004AC
000004AC 0000                                       dc.w    VBlank_00-VBlank_List                  ; Offset_0x0004C8
000004AE 0000                                       dc.w    VBlank_02-VBlank_List                  ; Offset_0x000656
000004B0 0000                                       dc.w    VBlank_04-VBlank_List                  ; Offset_0x0006C8
000004B2 0000                                       dc.w    VBlank_06-VBlank_List                  ; Offset_0x0006E2
000004B4 0000                                       dc.w    VBlank_08-VBlank_List                  ; Offset_0x0006E8
000004B6 0000                                       dc.w    VBlank_0A-VBlank_List                  ; Offset_0x000898
000004B8 0000                                       dc.w    VBlank_0C-VBlank_List                  ; Offset_0x000898
000004BA 0000                                       dc.w    VBlank_0E-VBlank_List                  ; Offset_0x00096C
000004BC 0000                                       dc.w    VBlank_10-VBlank_List                  ; Offset_0x0006E8
000004BE 0000                                       dc.w    VBlank_12-VBlank_List                  ; Offset_0x000978
000004C0 0000                                       dc.w    VBlank_14-VBlank_List                  ; Offset_0x000692
000004C2 0000                                       dc.w    VBlank_16-VBlank_List                  ; Offset_0x000AD2
000004C4 0000                                       dc.w    VBlank_18-VBlank_List                  ; Offset_0x000984
000004C6 0000                                       dc.w    VBlank_1A-VBlank_List                  ; Offset_0x000B76
000004C8                            ;-------------------------------------------------------------------------------                                                                             
000004C8                            VBlank_00:                                                     ; Offset_0x0004C8
000004C8 584F                                       addq.w  #$04, A7
000004CA                            Default_VBlank:                                                ; Offset_0x0004CA
000004CA 5278 F628                                  addq.w  #$01, (VBlank_0_Run_Count).w                 ; $FFFFF628
000004CE 0C38 0088 F600                             cmpi.b  #$80|gm_DemoMode, (Game_Mode).w         ; $88, $FFFFF600
000004D4 6700                                       beq.s   Offset_0x00050E
000004D6 0C38 008C F600                             cmpi.b  #$80|gm_PlayMode, (Game_Mode).w         ; $8C, $FFFFF600
000004DC 6700                                       beq.s   Offset_0x00050E
000004DE 0C38 0008 F600                             cmpi.b  #gm_DemoMode, (Game_Mode).w             ; $08, $FFFFF600
000004E4 6700                                       beq.s   Offset_0x00050E
000004E6 0C38 000C F600                             cmpi.b  #gm_PlayMode, (Game_Mode).w             ; $0C, $FFFFF600
000004EC 6700                                       beq.s   Offset_0x00050E
000004EE 33FC 0100 00A1 1100                        move.w  #$0100, (Z80_Bus_Request)                    ; $00A11100
000004F6                            Offset_0x0004F6:
000004F6 0839 0000 00A1 1100                        btst    #$00, (Z80_Bus_Request)                      ; $00A11100
000004FE 66F6                                       bne.s   Offset_0x0004F6
00000500 6100 0000                                  bsr     Null_Sub_1                             ; Offset_0x000EBC
00000504 33FC 0000 00A1 1100                        move.w  #$0000, (Z80_Bus_Request)                    ; $00A11100
0000050C 6094                                       bra.s   VBlank_Finalize                        ; Offset_0x0004A2
0000050E                            Offset_0x00050E:
0000050E 4A38 F730                                  tst.b   (Water_Level_Flag).w                         ; $FFFFF730
00000512 6700 0000                                  beq     Offset_0x0005A8
00000516 3039 00C0 0004                             move.w  (VDP_Control_Port), D0                       ; $00C00004
0000051C 0838 0006 FFF8                             btst    #$06, (Hardware_Id).w                        ; $FFFFFFF8
00000522 6700                                       beq.s   Offset_0x00052C
00000524 303C 0700                                  move.w  #$0700, D0
00000528                            Offset_0x000528:
00000528 51C8 FFFE                                  dbra    D0, Offset_0x000528
0000052C                            Offset_0x00052C:
0000052C 31FC 0001 F644                             move.w  #$0001, (Horizontal_Interrupt_Flag).w        ; $FFFFF644
00000532 33FC 0100 00A1 1100                        move.w  #$0100, (Z80_Bus_Request)                    ; $00A11100
0000053A                            Offset_0x00053A:
0000053A 0839 0000 00A1 1100                        btst    #$00, (Z80_Bus_Request)                      ; $00A11100
00000542 66F6                                       bne.s   Offset_0x00053A
00000544 4A38 F64E                                  tst.b   (Underwater_Flag).w                          ; $FFFFF64E
00000548 6600                                       bne.s   Offset_0x000570
0000054A 4BF9 00C0 0004                             lea     (VDP_Control_Port), A5                       ; $00C00004
00000550 2ABC 9400 9340                             move.l  #$94009340, (A5)
00000556 2ABC 96F6 9580                             move.l  #$96F69580, (A5)
0000055C 3ABC 977F                                  move.w  #$977F, (A5)
00000560 3ABC C000                                  move.w  #$C000, (A5)
00000564 31FC 0080 F640                             move.w  #$0080, (DMA_Trigger).w                      ; $FFFFF640
0000056A 3AB8 F640                                  move.w  (DMA_Trigger).w, (A5)                        ; $FFFFF640
0000056E 6000                                       bra.s   Offset_0x000594
00000570                            Offset_0x000570:
00000570 4BF9 00C0 0004                             lea     (VDP_Control_Port), A5                       ; $00C00004
00000576 2ABC 9400 9340                             move.l  #$94009340, (A5)
0000057C 2ABC 96F8 9540                             move.l  #$96F89540, (A5)
00000582 3ABC 977F                                  move.w  #$977F, (A5)
00000586 3ABC C000                                  move.w  #$C000, (A5)
0000058A 31FC 0080 F640                             move.w  #$0080, (DMA_Trigger).w                      ; $FFFFF640
00000590 3AB8 F640                                  move.w  (DMA_Trigger).w, (A5)                        ; $FFFFF640
00000594                            Offset_0x000594:
00000594 3AB8 F624                                  move.w  (Horizontal_Int_Count_Cmd).w, (A5)           ; $FFFFF624
00000598 6100 0000                                  bsr     Null_Sub_1                             ; Offset_0x000EBC
0000059C 33FC 0000 00A1 1100                        move.w  #$0000, (Z80_Bus_Request)                    ; $00A11100
000005A4 6000 FEFC                                  bra     VBlank_Finalize                        ; Offset_0x0004A2
000005A8                            Offset_0x0005A8:
000005A8 3039 00C0 0004                             move.w  (VDP_Control_Port), D0                       ; $00C00004
000005AE 0838 0006 FFF8                             btst    #$06, (Hardware_Id).w                        ; $FFFFFFF8
000005B4 6700                                       beq.s   Offset_0x0005BE
000005B6 303C 0700                                  move.w  #$0700, D0
000005BA                            Offset_0x0005BA:
000005BA 51C8 FFFE                                  dbra    D0, Offset_0x0005BA
000005BE                            Offset_0x0005BE:
000005BE 31FC 0001 F644                             move.w  #$0001, (Horizontal_Interrupt_Flag).w        ; $FFFFF644
000005C4 33F8 F624 00C0 0004                        move.w  (Horizontal_Int_Count_Cmd).w, (VDP_Control_Port) ; $FFFFF624
000005CC 33FC 0100 00A1 1100                        move.w  #$0100, (Z80_Bus_Request)                    ; $00A11100
000005D4                            Offset_0x0005D4:
000005D4 0839 0000 00A1 1100                        btst    #$00, (Z80_Bus_Request)                      ; $00A11100
000005DC 66F6                                       bne.s   Offset_0x0005D4
000005DE 4A78 FFD8                                  tst.w   (Two_Player_Flag).w                          ; $FFFFFFD8
000005E2 6700                                       beq.s   Offset_0x000646
000005E4 23FC 4000 0010 00C0 0004                   move.l  #$40000010, (VDP_Control_Port)               ; $00C00004
000005EE 23F8 F616 00C0 0000                        move.l  (Vertical_Scroll_Value).w, (VDP_Data_Port)   ; $FFFFF616
000005F6 4A78 EF3C                                  tst.w   (Use_Normal_Sprite_Table).w                  ; $FFFFEF3C
000005FA 6700                                       beq.s   Offset_0x000622
000005FC 4BF9 00C0 0004                             lea     (VDP_Control_Port), A5                       ; $00C00004
00000602 2ABC 9401 9340                             move.l  #$94019340, (A5)
00000608 2ABC 96FC 9500                             move.l  #$96FC9500, (A5)
0000060E 3ABC 977F                                  move.w  #$977F, (A5)
00000612 3ABC 7800                                  move.w  #$7800, (A5)
00000616 31FC 0083 F640                             move.w  #$0083, (DMA_Trigger).w                      ; $FFFFF640
0000061C 3AB8 F640                                  move.w  (DMA_Trigger).w, (A5)                        ; $FFFFF640
00000620 6000                                       bra.s   Offset_0x000646
00000622                            Offset_0x000622:
00000622 4BF9 00C0 0004                             lea     (VDP_Control_Port), A5                       ; $00C00004
00000628 2ABC 9401 9340                             move.l  #$94019340, (A5)
0000062E 2ABC 96BC 9540                             move.l  #$96BC9540, (A5)
00000634 3ABC 977F                                  move.w  #$977F, (A5)
00000638 3ABC 7800                                  move.w  #$7800, (A5)
0000063C 31FC 0083 F640                             move.w  #$0083, (DMA_Trigger).w                      ; $FFFFF640
00000642 3AB8 F640                                  move.w  (DMA_Trigger).w, (A5)                        ; $FFFFF640
00000646                            Offset_0x000646:
00000646 6100 0000                                  bsr     Null_Sub_1                             ; Offset_0x000EBC
0000064A 33FC 0000 00A1 1100                        move.w  #$0000, (Z80_Bus_Request)                    ; $00A11100
00000652 6000 FE4E                                  bra     VBlank_Finalize                        ; Offset_0x0004A2
00000656                            ;-------------------------------------------------------------------------------
00000656                            VBlank_02:                                                     ; Offset_0x000656
00000656 6100 0000                                  bsr     Offset_0x000B80
0000065A 4BF9 00C0 0004                             lea     (VDP_Control_Port), A5                       ; $00C00004
00000660 2ABC 9401 93C0                             move.l  #$940193C0, (A5)
00000666 2ABC 96F0 9500                             move.l  #$96F09500, (A5)
0000066C 3ABC 977F                                  move.w  #$977F, (A5)
00000670 3ABC 7000                                  move.w  #$7000, (A5)
00000674 31FC 0083 F640                             move.w  #$0083, (DMA_Trigger).w                      ; $FFFFF640
0000067A 3AB8 F640                                  move.w  (DMA_Trigger).w, (A5)                        ; $FFFFF640
0000067E 4EB9 0000 0000                             jsr     (VInt_SEGA_Screen)                     ; Offset_0x034926
00000684 4A78 F614                                  tst.w   (Demo_Timer).w                               ; $FFFFF614
00000688 6700 0000                                  beq     Offset_0x000690
0000068C 5378 F614                                  subq.w  #$01, (Demo_Timer).w                         ; $FFFFF614
00000690                            Offset_0x000690:
00000690 4E75                                       rts     
00000692                            ;-------------------------------------------------------------------------------
00000692                            VBlank_14:                                                     ; Offset_0x000692
00000692 1038 FE0F                                  move.b  (Vertical_Interrupt_Count+$03).w, D0         ; $FFFFFE0F
00000696 0240 000F                                  andi.w  #$000F, D0
0000069A 6600                                       bne.s   Offset_0x0006BA
0000069C 33FC 0100 00A1 1100                        move.w  #$0100, (Z80_Bus_Request)                    ; $00A11100
000006A4                            Offset_0x0006A4:
000006A4 0839 0000 00A1 1100                        btst    #$00, (Z80_Bus_Request)                      ; $00A11100
000006AC 66F6                                       bne.s   Offset_0x0006A4
000006AE 6100 0000                                  bsr     Control_Ports_Read                     ; Offset_0x000F16
000006B2 33FC 0000 00A1 1100                        move.w  #$0000, (Z80_Bus_Request)                    ; $00A11100
000006BA                            Offset_0x0006BA:
000006BA 4A78 F614                                  tst.w   (Demo_Timer).w                               ; $FFFFF614
000006BE 6700 0000                                  beq     Offset_0x0006C6
000006C2 5378 F614                                  subq.w  #$01, (Demo_Timer).w                         ; $FFFFF614
000006C6                            Offset_0x0006C6:
000006C6 4E75                                       rts
000006C8                            ;-------------------------------------------------------------------------------
000006C8                            VBlank_04:                                                     ; Offset_0x0006C8
000006C8 6100 0000                                  bsr     VInt_Title_Screen                      ; Offset_0x00359A
000006CC 6100 0000                                  bsr     Offset_0x000B80
000006D0 6100 0000                                  bsr     Process_Nemesis_Queue                  ; Offset_0x0015AE
000006D4 4A78 F614                                  tst.w   (Demo_Timer).w                               ; $FFFFF614
000006D8 6700 0000                                  beq     Offset_0x0006E0
000006DC 5378 F614                                  subq.w  #$01, (Demo_Timer).w                         ; $FFFFF614
000006E0                            Offset_0x0006E0:
000006E0 4E75                                       rts
000006E2                            ;-------------------------------------------------------------------------------                
000006E2                            VBlank_06:                                                     ; Offset_0x0006E2
000006E2 6100 0000                                  bsr     Offset_0x000B80
000006E6 4E75                                       rts             
000006E8                            ;------------------------------------------------------------------------------- 
000006E8                            VBlank_08:                                                     ; Offset_0x0006E8
000006E8                            VBlank_10:                                                           
000006E8 33FC 0100 00A1 1100                        move.w  #$0100, (Z80_Bus_Request)                    ; $00A11100
000006F0                            Offset_0x0006F0:
000006F0 0839 0000 00A1 1100                        btst    #$00, (Z80_Bus_Request)                      ; $00A11100
000006F8 66F6                                       bne.s   Offset_0x0006F0
000006FA 6100 0000                                  bsr     Control_Ports_Read                     ; Offset_0x000F16
000006FE 4A38 F622                                  tst.b   (S2_Teleport_Timer).w                        ; $FFFFF622
00000702 6700                                       beq.s   Offset_0x00075A
00000704 4BF9 00C0 0004                             lea     (VDP_Control_Port), A5                       ; $00C00004
0000070A 4A78 F63A                                  tst.w   (Pause_Status).w                             ; $FFFFF63A
0000070E 6600 0000                                  bne     Offset_0x0007AA
00000712 5338 F622                                  subq.b  #$01, (S2_Teleport_Timer).w                  ; $FFFFF622
00000716 6600                                       bne.s   Offset_0x00071E
00000718 11FC 0000 F623                             move.b  #$00, (S2_Teleport_Flag).w                   ; $FFFFF623
0000071E                            Offset_0x00071E:
0000071E 0C38 0010 F622                             cmpi.b  #$10, (S2_Teleport_Timer).w                  ; $FFFFF622
00000724 6500                                       bcs.s   Offset_0x00075A
00000726 4DF9 00C0 0000                             lea     (VDP_Data_Port), A6                          ; $00C00000
0000072C 23FC C000 0000 00C0 0004                   move.l  #$C0000000, (VDP_Control_Port)               ; $00C00004
00000736 303C 0EEE                                  move.w  #$0EEE, D0
0000073A 323C 001F                                  move.w  #$001F, D1
0000073E                            Offset_0x00073E:
0000073E 3C80                                       move.w  D0, (A6)
00000740 51C9 FFFC                                  dbra    D1, Offset_0x00073E
00000744 23FC C042 0000 00C0 0004                   move.l  #$C0420000, (VDP_Control_Port)               ; $00C00004
0000074E 323C 001F                                  move.w  #$001F, D1
00000752                            Offset_0x000752:
00000752 3C80                                       move.w  D0, (A6)
00000754 51C9 FFFC                                  dbra    D1, Offset_0x000752
00000758 6000                                       bra.s   Offset_0x0007AA
0000075A                            Offset_0x00075A:
0000075A 4A38 F64E                                  tst.b   (Underwater_Flag).w                          ; $FFFFF64E
0000075E 6600                                       bne.s   Offset_0x000786
00000760 4BF9 00C0 0004                             lea     (VDP_Control_Port), A5                       ; $00C00004
00000766 2ABC 9400 9340                             move.l  #$94009340, (A5)
0000076C 2ABC 96F6 9580                             move.l  #$96F69580, (A5)
00000772 3ABC 977F                                  move.w  #$977F, (A5)
00000776 3ABC C000                                  move.w  #$C000, (A5)
0000077A 31FC 0080 F640                             move.w  #$0080, (DMA_Trigger).w                      ; $FFFFF640
00000780 3AB8 F640                                  move.w  (DMA_Trigger).w, (A5)                        ; $FFFFF640
00000784 6000                                       bra.s   Offset_0x0007AA
00000786                            Offset_0x000786:
00000786 4BF9 00C0 0004                             lea     (VDP_Control_Port), A5                       ; $00C00004
0000078C 2ABC 9400 9340                             move.l  #$94009340, (A5)
00000792 2ABC 96F8 9540                             move.l  #$96F89540, (A5)
00000798 3ABC 977F                                  move.w  #$977F, (A5)
0000079C 3ABC C000                                  move.w  #$C000, (A5)
000007A0 31FC 0080 F640                             move.w  #$0080, (DMA_Trigger).w                      ; $FFFFF640
000007A6 3AB8 F640                                  move.w  (DMA_Trigger).w, (A5)                        ; $FFFFF640
000007AA                            Offset_0x0007AA:
000007AA 3AB8 F624                                  move.w  (Horizontal_Int_Count_Cmd).w, (A5)           ; $FFFFF624
000007AE 4BF9 00C0 0004                             lea     (VDP_Control_Port), A5                       ; $00C00004
000007B4 2ABC 9401 93C0                             move.l  #$940193C0, (A5)
000007BA 2ABC 96F0 9500                             move.l  #$96F09500, (A5)
000007C0 3ABC 977F                                  move.w  #$977F, (A5)
000007C4 3ABC 7000                                  move.w  #$7000, (A5)
000007C8 31FC 0083 F640                             move.w  #$0083, (DMA_Trigger).w                      ; $FFFFF640
000007CE 3AB8 F640                                  move.w  (DMA_Trigger).w, (A5)                        ; $FFFFF640
000007D2 4A78 FFD8                                  tst.w   (Two_Player_Flag).w                          ; $FFFFFFD8
000007D6 6700                                       beq.s   Offset_0x000814
000007D8 4A78 EF3E                                  tst.w   (Normal_Sprite_Table_Flag).w                 ; $FFFFEF3E
000007DC 6700                                       beq.s   Offset_0x0007E8
000007DE 4278 EF3E                                  clr.w   (Normal_Sprite_Table_Flag).w                 ; $FFFFEF3E
000007E2 0A78 FFFF EF3C                             eori.w  #$FFFF, (Use_Normal_Sprite_Table).w          ; $FFFFEF3C
000007E8                            Offset_0x0007E8:
000007E8 4A78 EF3C                                  tst.w   (Use_Normal_Sprite_Table).w                  ; $FFFFEF3C
000007EC 6600                                       bne.s   Offset_0x000814
000007EE 4BF9 00C0 0004                             lea     (VDP_Control_Port), A5                       ; $00C00004
000007F4 2ABC 9401 9340                             move.l  #$94019340, (A5)
000007FA 2ABC 96BC 9540                             move.l  #$96BC9540, (A5)
00000800 3ABC 977F                                  move.w  #$977F, (A5)
00000804 3ABC 7800                                  move.w  #$7800, (A5)
00000808 31FC 0083 F640                             move.w  #$0083, (DMA_Trigger).w                      ; $FFFFF640
0000080E 3AB8 F640                                  move.w  (DMA_Trigger).w, (A5)                        ; $FFFFF640
00000812 6000                                       bra.s   Offset_0x000838
00000814                            Offset_0x000814:
00000814 4BF9 00C0 0004                             lea     (VDP_Control_Port), A5                       ; $00C00004
0000081A 2ABC 9401 9340                             move.l  #$94019340, (A5)
00000820 2ABC 96FC 9500                             move.l  #$96FC9500, (A5)
00000826 3ABC 977F                                  move.w  #$977F, (A5)
0000082A 3ABC 7800                                  move.w  #$7800, (A5)
0000082E 31FC 0083 F640                             move.w  #$0083, (DMA_Trigger).w                      ; $FFFFF640
00000834 3AB8 F640                                  move.w  (DMA_Trigger).w, (A5)                        ; $FFFFF640
00000838                            Offset_0x000838:
00000838 6100 0000                                  bsr     Process_DMA                            ; Offset_0x00135E
0000083C 21F8 F61E EE3A                             move.l  (Vertical_Scroll_Value_P2).w, (Vertical_Scroll_Value_P2_2).w ; $FFFFF61E, $FFFFEE3A
00000842 4EB9 0000 0000                             jsr     (Special_Vint)                         ; Offset_0x02F6BC
00000848 4EB9 0000 0000                             jsr     (Vint_Draw_Level)                      ; Offset_0x02F636
0000084E 6100 0000                                  bsr     Null_Sub_1                             ; Offset_0x000EBC
00000852 33FC 0000 00A1 1100                        move.w  #$0000, (Z80_Bus_Request)                    ; $00A11100
0000085A 46FC 2300                                  move    #$2300, SR
0000085E 0C38 005C F625                             cmpi.b  #$5C, (Scanline_Counter).w                   ; $FFFFF625
00000864 6400                                       bcc.s   Offset_0x000872
00000866 11FC 0001 F64F                             move.b  #$01, (H_Int_Update_Flag).w                  ; $FFFFF64F
0000086C 4EF9 0000 0000                             jmp     (Set_Kosinski_Bookmark)                ; Offset_0x0019C6
00000872                            Offset_0x000872:
00000872 6100                                       bsr.s   Offset_0x00087A
00000874 4EF9 0000 0000                             jmp     (Set_Kosinski_Bookmark)                ; Offset_0x0019C6
0000087A                            Offset_0x00087A:
0000087A 4EB9 0000 0000                             jsr     (HUD_Update)                           ; Offset_0x007B34
00000880 31FC 0000 F628                             move.w  #$0000, (VBlank_0_Run_Count).w               ; $FFFFF628
00000886 6100 0000                                  bsr     Process_Nemesis_Queue_2                ; Offset_0x0015CA
0000088A 4A78 F614                                  tst.w   (Demo_Timer).w                               ; $FFFFF614
0000088E 6700 0000                                  beq     Offset_0x000896
00000892 5378 F614                                  subq.w  #$01, (Demo_Timer).w                         ; $FFFFF614
00000896                            Offset_0x000896:
00000896 4E75                                       rts 
00000898                            ;-------------------------------------------------------------------------------
00000898                            VBlank_0A:                                                     ; Offset_0x000898
00000898                            VBlank_0C:
00000898 33FC 0100 00A1 1100                        move.w  #$0100, (Z80_Bus_Request)                    ; $00A11100
000008A0                            Offset_0x0008A0:
000008A0 0839 0000 00A1 1100                        btst    #$00, (Z80_Bus_Request)                      ; $00A11100
000008A8 66F6                                       bne.s   Offset_0x0008A0
000008AA 6100 0000                                  bsr     Control_Ports_Read                     ; Offset_0x000F16
000008AE 4A38 F64E                                  tst.b   (Underwater_Flag).w                          ; $FFFFF64E
000008B2 6600                                       bne.s   Offset_0x0008DA
000008B4 4BF9 00C0 0004                             lea     (VDP_Control_Port), A5                       ; $00C00004
000008BA 2ABC 9400 9340                             move.l  #$94009340, (A5)
000008C0 2ABC 96F6 9580                             move.l  #$96F69580, (A5)
000008C6 3ABC 977F                                  move.w  #$977F, (A5)
000008CA 3ABC C000                                  move.w  #$C000, (A5)
000008CE 31FC 0080 F640                             move.w  #$0080, (DMA_Trigger).w                      ; $FFFFF640
000008D4 3AB8 F640                                  move.w  (DMA_Trigger).w, (A5)                        ; $FFFFF640
000008D8 6000                                       bra.s   Offset_0x0008FE
000008DA                            Offset_0x0008DA:
000008DA 4BF9 00C0 0004                             lea     (VDP_Control_Port), A5                       ; $00C00004
000008E0 2ABC 9400 9340                             move.l  #$94009340, (A5)
000008E6 2ABC 96F8 9540                             move.l  #$96F89540, (A5)
000008EC 3ABC 977F                                  move.w  #$977F, (A5)
000008F0 3ABC C000                                  move.w  #$C000, (A5)
000008F4 31FC 0080 F640                             move.w  #$0080, (DMA_Trigger).w                      ; $FFFFF640
000008FA 3AB8 F640                                  move.w  (DMA_Trigger).w, (A5)                        ; $FFFFF640
000008FE                            Offset_0x0008FE:
000008FE 3AB8 F624                                  move.w  (Horizontal_Int_Count_Cmd).w, (A5)           ; $FFFFF624
00000902 4BF9 00C0 0004                             lea     (VDP_Control_Port), A5                       ; $00C00004
00000908 2ABC 9401 93C0                             move.l  #$940193C0, (A5)
0000090E 2ABC 96F0 9500                             move.l  #$96F09500, (A5)
00000914 3ABC 977F                                  move.w  #$977F, (A5)
00000918 3ABC 7000                                  move.w  #$7000, (A5)
0000091C 31FC 0083 F640                             move.w  #$0083, (DMA_Trigger).w                      ; $FFFFF640
00000922 3AB8 F640                                  move.w  (DMA_Trigger).w, (A5)                        ; $FFFFF640
00000926 4BF9 00C0 0004                             lea     (VDP_Control_Port), A5                       ; $00C00004
0000092C 2ABC 9401 9340                             move.l  #$94019340, (A5)
00000932 2ABC 96FC 9500                             move.l  #$96FC9500, (A5)
00000938 3ABC 977F                                  move.w  #$977F, (A5)
0000093C 3ABC 7800                                  move.w  #$7800, (A5)
00000940 31FC 0083 F640                             move.w  #$0083, (DMA_Trigger).w                      ; $FFFFF640
00000946 3AB8 F640                                  move.w  (DMA_Trigger).w, (A5)                        ; $FFFFF640
0000094A 6100 0000                                  bsr     Process_DMA                            ; Offset_0x00135E
0000094E 21F8 F61E EE3A                             move.l  (Vertical_Scroll_Value_P2).w, (Vertical_Scroll_Value_P2_2).w ; $FFFFF61E, $FFFFEE3A
00000954 4EB9 0000 0000                             jsr     (Null_Sub_1)                           ; Offset_0x000EBC
0000095A 33FC 0000 00A1 1100                        move.w  #$0000, (Z80_Bus_Request)                    ; $00A11100
00000962 6100 0000                                  bsr     Process_Nemesis_Queue                  ; Offset_0x0015AE
00000966 4EF9 0000 0000                             jmp     (Set_Kosinski_Bookmark)                ; Offset_0x0019C6
0000096C                            ;-------------------------------------------------------------------------------
0000096C                            VBlank_0E:                                                     ; Offset_0x00096C
0000096C 6100 0000                                  bsr     Offset_0x000B80
00000970 11FC 000E F62A                             move.b  #$0E, (VBlank_Index).w                       ; $FFFFF62A
00000976 4E75                                       rts          
00000978                            ;-------------------------------------------------------------------------------
00000978                            VBlank_12:                                                     ; Offset_0x000978
00000978 6100 0000                                  bsr     Offset_0x000B80
0000097C 3AB8 F624                                  move.w  (Horizontal_Int_Count_Cmd).w, (A5)           ; $FFFFF624
00000980 6000 0000                                  bra     Process_Nemesis_Queue                  ; Offset_0x0015AE 
00000984                            ;-------------------------------------------------------------------------------
00000984                            VBlank_18:                                                     ; Offset_0x000984
00000984 33FC 0100 00A1 1100                        move.w  #$0100, (Z80_Bus_Request)                    ; $00A11100
0000098C                            Offset_0x00098C:
0000098C 0839 0000 00A1 1100                        btst    #$00, (Z80_Bus_Request)                      ; $00A11100
00000994 66F6                                       bne.s   Offset_0x00098C
00000996 6100 0000                                  bsr     Control_Ports_Read                     ; Offset_0x000F16
0000099A 4BF9 00C0 0004                             lea     (VDP_Control_Port), A5                       ; $00C00004
000009A0 2ABC 9400 9340                             move.l  #$94009340, (A5)
000009A6 2ABC 96F6 9580                             move.l  #$96F69580, (A5)
000009AC 3ABC 977F                                  move.w  #$977F, (A5)
000009B0 3ABC C000                                  move.w  #$C000, (A5)
000009B4 31FC 0080 F640                             move.w  #$0080, (DMA_Trigger).w                      ; $FFFFF640
000009BA 3AB8 F640                                  move.w  (DMA_Trigger).w, (A5)                        ; $FFFFF640
000009BE 4BF9 00C0 0004                             lea     (VDP_Control_Port), A5                       ; $00C00004
000009C4 2ABC 9401 9340                             move.l  #$94019340, (A5)
000009CA 2ABC 96FC 9500                             move.l  #$96FC9500, (A5)
000009D0 3ABC 977F                                  move.w  #$977F, (A5)
000009D4 3ABC 7800                                  move.w  #$7800, (A5)
000009D8 31FC 0083 F640                             move.w  #$0083, (DMA_Trigger).w                      ; $FFFFF640
000009DE 3AB8 F640                                  move.w  (DMA_Trigger).w, (A5)                        ; $FFFFF640
000009E2 4BF9 00C0 0004                             lea     (VDP_Control_Port), A5                       ; $00C00004
000009E8 2ABC 9401 93C0                             move.l  #$940193C0, (A5)
000009EE 2ABC 96F0 9500                             move.l  #$96F09500, (A5)
000009F4 3ABC 977F                                  move.w  #$977F, (A5)
000009F8 3ABC 7000                                  move.w  #$7000, (A5)
000009FC 31FC 0083 F640                             move.w  #$0083, (DMA_Trigger).w                      ; $FFFFF640
00000A02 3AB8 F640                                  move.w  (DMA_Trigger).w, (A5)                        ; $FFFFF640
00000A06 6100 0000                                  bsr     Process_DMA                            ; Offset_0x00135E
00000A0A 6100 0000                                  bsr     Null_Sub_1                             ; Offset_0x000EBC
00000A0E 33FC 0000 00A1 1100                        move.w  #$0000, (Z80_Bus_Request)                    ; $00A11100
00000A16 4E75                                       rts     
00000A18                            ;-------------------------------------------------------------------------------
00000A18                            ; Offset_0x000A18:
00000A18 0004 0034                                  ori.b   #$34, D4
00000A1C 4BF9 00C0 0004                             lea     (VDP_Control_Port), A5                       ; $00C00004
00000A22 3ABC 8F01                                  move.w  #$8F01, (A5)
00000A26 2ABC 941F 93FF                             move.l  #$941F93FF, (A5)
00000A2C 3ABC 9780                                  move.w  #$9780, (A5)
00000A30 2ABC 4000 0083                             move.l  #$40000083, (A5)
00000A36 33FC 0000 00C0 0000                        move.w  #$0000, (VDP_Data_Port)                      ; $00C00000
00000A3E                            Offset_0x000A3E:
00000A3E 3215                                       move.w  (A5), D1
00000A40 0801 0001                                  btst    #$01, D1
00000A44 66F8                                       bne.s   Offset_0x000A3E
00000A46 3ABC 8F02                                  move.w  #$8F02, (A5)
00000A4A 4E75                                       rts        
00000A4C                            ;-------------------------------------------------------------------------------
00000A4C                            ; Offset_0x000A4C:
00000A4C 4BF9 00C0 0004                             lea     (VDP_Control_Port), A5                       ; $00C00004
00000A52 3ABC 8F01                                  move.w  #$8F01, (A5)
00000A56 2ABC 941F 93FF                             move.l  #$941F93FF, (A5)
00000A5C 3ABC 9780                                  move.w  #$9780, (A5)
00000A60 2ABC 4000 0081                             move.l  #$40000081, (A5)
00000A66 33FC 0000 00C0 0000                        move.w  #$0000, (VDP_Data_Port)                      ; $00C00000
00000A6E                            Offset_0x000A6E:
00000A6E 3215                                       move.w  (A5), D1
00000A70 0801 0001                                  btst    #$01, D1
00000A74 66F8                                       bne.s   Offset_0x000A6E
00000A76 3ABC 8F02                                  move.w  #$8F02, (A5)
00000A7A 4BF9 00C0 0004                             lea     (VDP_Control_Port), A5                       ; $00C00004
00000A80 3ABC 8F01                                  move.w  #$8F01, (A5)
00000A84 2ABC 941F 93FF                             move.l  #$941F93FF, (A5)
00000A8A 3ABC 9780                                  move.w  #$9780, (A5)
00000A8E 2ABC 4000 0083                             move.l  #$40000083, (A5)
00000A94 33FC 0000 00C0 0000                        move.w  #$0000, (VDP_Data_Port)                      ; $00C00000
00000A9C                            Offset_0x000A9C:
00000A9C 3215                                       move.w  (A5), D1
00000A9E 0801 0001                                  btst    #$01, D1
00000AA2 66F8                                       bne.s   Offset_0x000A9C
00000AA4 3ABC 8F02                                  move.w  #$8F02, (A5)
00000AA8 4DF9 00C0 0004                             lea     (VDP_Control_Port), A6                       ; $00C00004
00000AAE 3CBC 8B00                                  move.w  #$8B00, (A6)
00000AB2 3CBC 8402                                  move.w  #$8402, (A6)
00000AB6 3CBC 9011                                  move.w  #$9011, (A6)
00000ABA 43F9 FFFF 0000                             lea     (M68K_RAM_Start), A1                         ; $FFFF0000
00000AC0 203C 50AC 0003                             move.l  #$50AC0003, D0
00000AC6 7216                                       moveq   #$16, D1
00000AC8 740E                                       moveq   #$0E, D2
00000ACA 4EB9 0000 0000                             jsr     (ShowVDPGraphics)                      ; Offset_0x0012BC
00000AD0 4E75                                       rts   
00000AD2                            ;-------------------------------------------------------------------------------
00000AD2                            VBlank_16:                                                     ; Offset_0x000AD2
00000AD2 33FC 0100 00A1 1100                        move.w  #$0100, (Z80_Bus_Request)                    ; $00A11100
00000ADA                            Offset_0x000ADA:
00000ADA 0839 0000 00A1 1100                        btst    #$00, (Z80_Bus_Request)                      ; $00A11100
00000AE2 66F6                                       bne.s   Offset_0x000ADA
00000AE4 6100 0000                                  bsr     Control_Ports_Read                     ; Offset_0x000F16
00000AE8 4BF9 00C0 0004                             lea     (VDP_Control_Port), A5                       ; $00C00004
00000AEE 2ABC 9400 9340                             move.l  #$94009340, (A5)
00000AF4 2ABC 96F6 9580                             move.l  #$96F69580, (A5)
00000AFA 3ABC 977F                                  move.w  #$977F, (A5)
00000AFE 3ABC C000                                  move.w  #$C000, (A5)
00000B02 31FC 0080 F640                             move.w  #$0080, (DMA_Trigger).w                      ; $FFFFF640
00000B08 3AB8 F640                                  move.w  (DMA_Trigger).w, (A5)                        ; $FFFFF640
00000B0C 4BF9 00C0 0004                             lea     (VDP_Control_Port), A5                       ; $00C00004
00000B12 2ABC 9401 9340                             move.l  #$94019340, (A5)
00000B18 2ABC 96FC 9500                             move.l  #$96FC9500, (A5)
00000B1E 3ABC 977F                                  move.w  #$977F, (A5)
00000B22 3ABC 7800                                  move.w  #$7800, (A5)
00000B26 31FC 0083 F640                             move.w  #$0083, (DMA_Trigger).w                      ; $FFFFF640
00000B2C 3AB8 F640                                  move.w  (DMA_Trigger).w, (A5)                        ; $FFFFF640
00000B30 4BF9 00C0 0004                             lea     (VDP_Control_Port), A5                       ; $00C00004
00000B36 2ABC 9401 93C0                             move.l  #$940193C0, (A5)
00000B3C 2ABC 96F0 9500                             move.l  #$96F09500, (A5)
00000B42 3ABC 977F                                  move.w  #$977F, (A5)
00000B46 3ABC 7000                                  move.w  #$7000, (A5)
00000B4A 31FC 0083 F640                             move.w  #$0083, (DMA_Trigger).w                      ; $FFFFF640
00000B50 3AB8 F640                                  move.w  (DMA_Trigger).w, (A5)                        ; $FFFFF640
00000B54 6100 0000                                  bsr     Process_DMA                            ; Offset_0x00135E
00000B58 6100 0000                                  bsr     Null_Sub_1                             ; Offset_0x000EBC
00000B5C 33FC 0000 00A1 1100                        move.w  #$0000, (Z80_Bus_Request)                    ; $00A11100
00000B64 6100 0000                                  bsr     Process_Nemesis_Queue                  ; Offset_0x0015AE
00000B68 4A78 F614                                  tst.w   (Demo_Timer).w                               ; $FFFFF614
00000B6C 6700 0000                                  beq     Offset_0x000B74
00000B70 5378 F614                                  subq.w  #$01, (Demo_Timer).w                         ; $FFFFF614
00000B74                            Offset_0x000B74:
00000B74 4E75                                       rts  
00000B76                            ;-------------------------------------------------------------------------------
00000B76                            VBlank_1A:                                                     ; Offset_0x000B76
00000B76 6100 0000                                  bsr     Offset_0x000B80
00000B7A 6100 0000                                  bsr     Process_Nemesis_Queue                  ; Offset_0x0015AE
00000B7E 4E75                                       rts
00000B80                            ;-------------------------------------------------------------------------------                
00000B80                            Offset_0x000B80:
00000B80 33FC 0100 00A1 1100                        move.w  #$0100, (Z80_Bus_Request)                    ; $00A11100
00000B88                            Offset_0x000B88:
00000B88 0839 0000 00A1 1100                        btst    #$00, (Z80_Bus_Request)                      ; $00A11100
00000B90 66F6                                       bne.s   Offset_0x000B88
00000B92 6100 0000                                  bsr     Control_Ports_Read                     ; Offset_0x000F16
00000B96 4A38 F64E                                  tst.b   (Underwater_Flag).w                          ; $FFFFF64E
00000B9A 6600                                       bne.s   Offset_0x000BC2
00000B9C 4BF9 00C0 0004                             lea     (VDP_Control_Port), A5                       ; $00C00004
00000BA2 2ABC 9400 9340                             move.l  #$94009340, (A5)
00000BA8 2ABC 96F6 9580                             move.l  #$96F69580, (A5)
00000BAE 3ABC 977F                                  move.w  #$977F, (A5)
00000BB2 3ABC C000                                  move.w  #$C000, (A5)
00000BB6 31FC 0080 F640                             move.w  #$0080, (DMA_Trigger).w                      ; $FFFFF640
00000BBC 3AB8 F640                                  move.w  (DMA_Trigger).w, (A5)                        ; $FFFFF640
00000BC0 6000                                       bra.s   Offset_0x000BE6
00000BC2                            Offset_0x000BC2:
00000BC2 4BF9 00C0 0004                             lea     (VDP_Control_Port), A5                       ; $00C00004
00000BC8 2ABC 9400 9340                             move.l  #$94009340, (A5)
00000BCE 2ABC 96F8 9540                             move.l  #$96F89540, (A5)
00000BD4 3ABC 977F                                  move.w  #$977F, (A5)
00000BD8 3ABC C000                                  move.w  #$C000, (A5)
00000BDC 31FC 0080 F640                             move.w  #$0080, (DMA_Trigger).w                      ; $FFFFF640
00000BE2 3AB8 F640                                  move.w  (DMA_Trigger).w, (A5)                        ; $FFFFF640
00000BE6                            Offset_0x000BE6:
00000BE6 4BF9 00C0 0004                             lea     (VDP_Control_Port), A5                       ; $00C00004
00000BEC 2ABC 9401 9340                             move.l  #$94019340, (A5)
00000BF2 2ABC 96FC 9500                             move.l  #$96FC9500, (A5)
00000BF8 3ABC 977F                                  move.w  #$977F, (A5)
00000BFC 3ABC 7800                                  move.w  #$7800, (A5)
00000C00 31FC 0083 F640                             move.w  #$0083, (DMA_Trigger).w                      ; $FFFFF640
00000C06 3AB8 F640                                  move.w  (DMA_Trigger).w, (A5)                        ; $FFFFF640
00000C0A 4BF9 00C0 0004                             lea     (VDP_Control_Port), A5                       ; $00C00004
00000C10 2ABC 9401 93C0                             move.l  #$940193C0, (A5)
00000C16 2ABC 96F0 9500                             move.l  #$96F09500, (A5)
00000C1C 3ABC 977F                                  move.w  #$977F, (A5)
00000C20 3ABC 7000                                  move.w  #$7000, (A5)
00000C24 31FC 0083 F640                             move.w  #$0083, (DMA_Trigger).w                      ; $FFFFF640
00000C2A 3AB8 F640                                  move.w  (DMA_Trigger).w, (A5)                        ; $FFFFF640
00000C2E 6100 0000                                  bsr     Process_DMA                            ; Offset_0x00135E
00000C32 6100 0000                                  bsr     Null_Sub_1                             ; Offset_0x000EBC
00000C36 33FC 0000 00A1 1100                        move.w  #$0000, (Z80_Bus_Request)                    ; $00A11100
00000C3E 4E75                                       rts      
00000C40                            ;===============================================================================                  
00000C40                            ; Interrup__o Vertical
00000C40                            ; <<<-                           
00000C40                            ;===============================================================================                   
00000C40                            
00000C40                            ;===============================================================================                  
00000C40                            ; Interrup__o Horizontal
00000C40                            ; ->>>                           
00000C40                            ;=============================================================================== 
00000C40                            JmpTo_HInt:
00000C40                            HBlank:                                                        ; Offset_0x000C40
00000C40 4EF8 F608                                  jmp     (HBlank_Ptr).w                               ; $FFFFF608
00000C44                            ;-------------------------------------------------------------------------------                
00000C44                            HBlank_00:                                                     ; Offset_0x000C44
00000C44 4A78 F644                                  tst.w   (Horizontal_Interrupt_Flag).w                ; $FFFFF644
00000C48 6700 0000                                  beq     Offset_0x000D0A
00000C4C 31FC 0000 F644                             move.w  #$0000, (Horizontal_Interrupt_Flag).w        ; $FFFFF644
00000C52 2F0D                                       move.l  A5, -(A7)
00000C54 2F00                                       move.l  D0, -(A7)
00000C56                            Offset_0x000C56:
00000C56 3039 00C0 0004                             move.w  (VDP_Control_Port), D0                       ; $00C00004
00000C5C 0240 0004                                  andi.w  #$0004, D0
00000C60 67F4                                       beq.s   Offset_0x000C56
00000C62 3038 F60E                                  move.w  (VDP_Register_1_Command).w, D0               ; $FFFFF60E
00000C66 0200 00BF                                  andi.b  #$BF, D0
00000C6A 33C0 00C0 0004                             move.w  D0, (VDP_Control_Port)                       ; $00C00004
00000C70 23FC 4000 0010 00C0 0004                   move.l  #$40000010, (VDP_Control_Port)               ; $00C00004
00000C7A 23F8 EE3A 00C0 0000                        move.l  (Vertical_Scroll_Value_P2_2).w, (VDP_Data_Port) ; $FFFFEE3A
00000C82 33FC 0100 00A1 1100                        move.w  #$0100, (Z80_Bus_Request)                    ; $00A11100
00000C8A                            Offset_0x000C8A:
00000C8A 0839 0000 00A1 1100                        btst    #$00, (Z80_Bus_Request)                      ; $00A11100
00000C92 66F6                                       bne.s   Offset_0x000C8A
00000C94 4A78 EF3C                                  tst.w   (Use_Normal_Sprite_Table).w                  ; $FFFFEF3C
00000C98 6700                                       beq.s   Offset_0x000CC0
00000C9A 4BF9 00C0 0004                             lea     (VDP_Control_Port), A5                       ; $00C00004
00000CA0 2ABC 9401 9340                             move.l  #$94019340, (A5)
00000CA6 2ABC 96BD 9580                             move.l  #$96BD9580, (A5)
00000CAC 3ABC 977F                                  move.w  #$977F, (A5)
00000CB0 3ABC 7800                                  move.w  #$7800, (A5)
00000CB4 31FC 0083 F640                             move.w  #$0083, (DMA_Trigger).w                      ; $FFFFF640
00000CBA 3AB8 F640                                  move.w  (DMA_Trigger).w, (A5)                        ; $FFFFF640
00000CBE 6000                                       bra.s   Offset_0x000CE4
00000CC0                            Offset_0x000CC0:
00000CC0 4BF9 00C0 0004                             lea     (VDP_Control_Port), A5                       ; $00C00004
00000CC6 2ABC 9401 9340                             move.l  #$94019340, (A5)
00000CCC 2ABC 96BE 95C0                             move.l  #$96BE95C0, (A5)
00000CD2 3ABC 977F                                  move.w  #$977F, (A5)
00000CD6 3ABC 7800                                  move.w  #$7800, (A5)
00000CDA 31FC 0083 F640                             move.w  #$0083, (DMA_Trigger).w                      ; $FFFFF640
00000CE0 3AB8 F640                                  move.w  (DMA_Trigger).w, (A5)                        ; $FFFFF640
00000CE4                            Offset_0x000CE4:
00000CE4 33FC 0000 00A1 1100                        move.w  #$0000, (Z80_Bus_Request)                    ; $00A11100
00000CEC                            Offset_0x000CEC:
00000CEC 3039 00C0 0004                             move.w  (VDP_Control_Port), D0                       ; $00C00004
00000CF2 0240 0004                                  andi.w  #$0004, D0
00000CF6 67F4                                       beq.s   Offset_0x000CEC
00000CF8 3038 F60E                                  move.w  (VDP_Register_1_Command).w, D0               ; $FFFFF60E
00000CFC 0000 0040                                  ori.b   #$40, D0
00000D00 33C0 00C0 0004                             move.w  D0, (VDP_Control_Port)                       ; $00C00004
00000D06 201F                                       move.l  (A7)+, D0
00000D08 2A5F                                       move.l  (A7)+, A5
00000D0A                            Offset_0x000D0A:
00000D0A 4E73                                       rte     
00000D0C                            ;-------------------------------------------------------------------------------
00000D0C                            HBlank_01:                                                     ; Offset_0x000D0C
00000D0C 4A78 F644                                  tst.w   (Horizontal_Interrupt_Flag).w                ; $FFFFF644
00000D10 6700                                       beq.s   Offset_0x000D8A
00000D12 31FC 0000 F644                             move.w  #$0000, (Horizontal_Interrupt_Flag).w        ; $FFFFF644
00000D18 48E7 C0E0                                  movem.l D0/D1/A0-A2, -(A7)
00000D1C 43F9 00C0 0000                             lea     (VDP_Data_Port), A1                          ; $00C00000
00000D22 337C 8AFF 0004                             move.w  #$8AFF, $0004(A1)
00000D28 33FC 0100 00A1 1100                        move.w  #$0100, (Z80_Bus_Request)                    ; $00A11100
00000D30                            Offset_0x000D30:
00000D30 0839 0000 00A1 1100                        btst    #$00, (Z80_Bus_Request)                      ; $00A11100
00000D38 66F6                                       bne.s   Offset_0x000D30
00000D3A 2478 F62E                                  move.l  (Palette_Underwater_Ptr).w, A2               ; $FFFFF62E
00000D3E 700C                                       moveq   #$0C, D0
00000D40                            Offset_0x000D40:
00000D40 51C8 FFFE                                  dbra    D0, Offset_0x000D40
00000D44 321A                                       move.w  (A2)+, D1
00000D46 1038 F625                                  move.b  (Scanline_Counter).w, D0                     ; $FFFFF625
00000D4A 0400 00C8                                  subi.b  #$C8, D0
00000D4E 6500                                       bcs.s   Offset_0x000D54
00000D50 9200                                       sub.b   D0, D1
00000D52 6500                                       bcs.s   Offset_0x000D78
00000D54                            Offset_0x000D54:
00000D54 301A                                       move.w  (A2)+, D0
00000D56 41F8 F080                                  lea     (Palette_Underwater_Buffer).w, A0            ; $FFFFF080
00000D5A D0C0                                       adda.w  D0, A0
00000D5C 0640 C000                                  addi.w  #$C000, D0
00000D60 4840                                       swap.w  D0
00000D62 2340 0004                                  move.l  D0, $0004(A1)
00000D66 2298                                       move.l  (A0)+, (A1)
00000D68 3298                                       move.w  (A0)+, (A1)
00000D6A 4E71                                       nop
00000D6C 4E71                                       nop
00000D6E 7024                                       moveq   #$24, D0
00000D70                            Offset_0x000D70:
00000D70 51C8 FFFE                                  dbra    D0, Offset_0x000D70
00000D74 51C9 FFDE                                  dbra    D1, Offset_0x000D54
00000D78                            Offset_0x000D78:
00000D78 33FC 0000 00A1 1100                        move.w  #$0000, (Z80_Bus_Request)                    ; $00A11100
00000D80 4CDF 0703                                  movem.l (A7)+, D0/D1/A0-A2
00000D84 4A38 F64F                                  tst.b   (H_Int_Update_Flag).w                        ; $FFFFF64F
00000D88 6600                                       bne.s   Offset_0x000D8C
00000D8A                            Offset_0x000D8A:
00000D8A 4E73                                       rte
00000D8C                            Offset_0x000D8C:
00000D8C 4238 F64F                                  clr.b   (H_Int_Update_Flag).w                        ; $FFFFF64F
00000D90 48E7 FFFE                                  movem.l D0-D7/A0-A6, -(A7)
00000D94 4EB9 0000 087A                             jsr     (Offset_0x00087A)
00000D9A 4CDF 7FFF                                  movem.l (A7)+, D0-D7/A0-A6
00000D9E 4E73                                       rte      
00000DA0                            ;-------------------------------------------------------------------------------
00000DA0                            HBlank_02:                                                     ; Offset_0x000DA0
00000DA0 4A78 F644                                  tst.w   (Horizontal_Interrupt_Flag).w                ; $FFFFF644
00000DA4 67E4                                       beq.s   Offset_0x000D8A
00000DA6 31FC 0000 F644                             move.w  #$0000, (Horizontal_Interrupt_Flag).w        ; $FFFFF644
00000DAC 48E7 C0E0                                  movem.l D0/D1/A0-A2, -(A7)
00000DB0 43F9 00C0 0000                             lea     (VDP_Data_Port), A1                          ; $00C00000
00000DB6 337C 8AFF 0004                             move.w  #$8AFF, $0004(A1)
00000DBC 33FC 0100 00A1 1100                        move.w  #$0100, (Z80_Bus_Request)                    ; $00A11100
00000DC4                            Offset_0x000DC4:
00000DC4 0839 0000 00A1 1100                        btst    #$00, (Z80_Bus_Request)                      ; $00A11100
00000DCC 66F6                                       bne.s   Offset_0x000DC4
00000DCE 2478 F62E                                  move.l  (Palette_Underwater_Ptr).w, A2               ; $FFFFF62E
00000DD2 701B                                       moveq   #$1B, D0
00000DD4                            Offset_0x000DD4:
00000DD4 51C8 FFFE                                  dbra    D0, Offset_0x000DD4
00000DD8 321A                                       move.w  (A2)+, D1
00000DDA 1038 F625                                  move.b  (Scanline_Counter).w, D0                     ; $FFFFF625
00000DDE 0400 00C8                                  subi.b  #$C8, D0
00000DE2 6500                                       bcs.s   Offset_0x000DE8
00000DE4 9200                                       sub.b   D0, D1
00000DE6 6500                                       bcs.s   Offset_0x000E0A
00000DE8                            Offset_0x000DE8:
00000DE8 301A                                       move.w  (A2)+, D0
00000DEA 41F8 F080                                  lea     (Palette_Underwater_Buffer).w, A0            ; $FFFFF080
00000DEE D0C0                                       adda.w  D0, A0
00000DF0 0640 C000                                  addi.w  #$C000, D0
00000DF4 4840                                       swap.w  D0
00000DF6 2340 0004                                  move.l  D0, $0004(A1)
00000DFA 2298                                       move.l  (A0)+, (A1)
00000DFC 3298                                       move.w  (A0)+, (A1)
00000DFE 4E71                                       nop
00000E00 7033                                       moveq   #$33, D0
00000E02                            Offset_0x000E02:
00000E02 51C8 FFFE                                  dbra    D0, Offset_0x000E02
00000E06 51C9 FFE0                                  dbra    D1, Offset_0x000DE8
00000E0A                            Offset_0x000E0A:
00000E0A 33FC 0000 00A1 1100                        move.w  #$0000, (Z80_Bus_Request)                    ; $00A11100
00000E12 4CDF 0703                                  movem.l (A7)+, D0/D1/A0-A2
00000E16 4A38 F64F                                  tst.b   (H_Int_Update_Flag).w                        ; $FFFFF64F
00000E1A 6600                                       bne.s   Offset_0x000E1E
00000E1C 4E73                                       rte
00000E1E                            Offset_0x000E1E:
00000E1E 4238 F64F                                  clr.b   (H_Int_Update_Flag).w                        ; $FFFFF64F
00000E22 48E7 FFFE                                  movem.l D0-D7/A0-A6, -(A7)
00000E26 4EB9 0000 087A                             jsr     (Offset_0x00087A)
00000E2C 4CDF 7FFF                                  movem.l (A7)+, D0-D7/A0-A6
00000E30 4E73                                       rte     
00000E32                            ;-------------------------------------------------------------------------------
00000E32                            Pal_To_ColorRAM:                                               ; Offset_0x000E32
00000E32 46FC 2700                                  move    #$2700, SR
00000E36 4A78 F644                                  tst.w   (Horizontal_Interrupt_Flag).w                ; $FFFFF644
00000E3A 6700                                       beq.s   Offset_0x000EA8
00000E3C 31FC 0000 F644                             move.w  #$0000, (Horizontal_Interrupt_Flag).w        ; $FFFFF644
00000E42 48E7 00C0                                  movem.l A0/A1, -(A7)
00000E46 43F9 00C0 0000                             lea     (VDP_Data_Port), A1                          ; $00C00000
00000E4C 337C 8ADF 0004                             move.w  #$8ADF, $0004(A1)
00000E52 41F8 F080                                  lea     (Palette_Underwater_Buffer).w, A0            ; $FFFFF080
00000E56 237C C000 0000 0004                        move.l  #$C0000000, $0004(A1)
00000E5E 2298                                       move.l  (A0)+, (A1)
00000E60 2298                                       move.l  (A0)+, (A1)
00000E62 2298                                       move.l  (A0)+, (A1)
00000E64 2298                                       move.l  (A0)+, (A1)
00000E66 2298                                       move.l  (A0)+, (A1)
00000E68 2298                                       move.l  (A0)+, (A1)
00000E6A 2298                                       move.l  (A0)+, (A1)
00000E6C 2298                                       move.l  (A0)+, (A1)
00000E6E 2298                                       move.l  (A0)+, (A1)
00000E70 2298                                       move.l  (A0)+, (A1)
00000E72 2298                                       move.l  (A0)+, (A1)
00000E74 2298                                       move.l  (A0)+, (A1)
00000E76 2298                                       move.l  (A0)+, (A1)
00000E78 2298                                       move.l  (A0)+, (A1)
00000E7A 2298                                       move.l  (A0)+, (A1)
00000E7C 2298                                       move.l  (A0)+, (A1)
00000E7E 2298                                       move.l  (A0)+, (A1)
00000E80 2298                                       move.l  (A0)+, (A1)
00000E82 2298                                       move.l  (A0)+, (A1)
00000E84 2298                                       move.l  (A0)+, (A1)
00000E86 2298                                       move.l  (A0)+, (A1)
00000E88 2298                                       move.l  (A0)+, (A1)
00000E8A 2298                                       move.l  (A0)+, (A1)
00000E8C 2298                                       move.l  (A0)+, (A1)
00000E8E 2298                                       move.l  (A0)+, (A1)
00000E90 2298                                       move.l  (A0)+, (A1)
00000E92 2298                                       move.l  (A0)+, (A1)
00000E94 2298                                       move.l  (A0)+, (A1)
00000E96 2298                                       move.l  (A0)+, (A1)
00000E98 2298                                       move.l  (A0)+, (A1)
00000E9A 2298                                       move.l  (A0)+, (A1)
00000E9C 2298                                       move.l  (A0)+, (A1)
00000E9E 4CDF 0300                                  movem.l (A7)+, A0/A1
00000EA2 4A38 F64F                                  tst.b   (H_Int_Update_Flag).w                        ; $FFFFF64F
00000EA6 6600                                       bne.s   Offset_0x000EAA
00000EA8                            Offset_0x000EA8:
00000EA8 4E73                                       rte
00000EAA                            Offset_0x000EAA:
00000EAA 4238 F64F                                  clr.b   (H_Int_Update_Flag).w                        ; $FFFFF64F
00000EAE 48E7 FFFE                                  movem.l D0-D7/A0-A6, -(A7)
00000EB2 6100 F9C6                                  bsr     Offset_0x00087A
00000EB6 4CDF 7FFF                                  movem.l (A7)+, D0-D7/A0-A6
00000EBA 4E73                                       rte   
00000EBC                            ;===============================================================================                  
00000EBC                            ; Interrup__o Horizontal
00000EBC                            ; <<<-                           
00000EBC                            ;===============================================================================     
00000EBC                                                                                                                        
00000EBC                            ;===============================================================================                
00000EBC                            Null_Sub_1:                                                    ; Offset_0x000EBC
00000EBC 4E75                                       rts
00000EBE                            ;===============================================================================
00000EBE                             
00000EBE                            ;-------------------------------------------------------------------------------
00000EBE                            Sound_Driver_Input:                                            ; Offset_0x000EBE
00000EBE 13F8 FFE4 00A0 1C0A                        move.b  (Sound_Buffer_Id).w, ($00A01C0A)             ; $FFFFFFE4
00000EC6 13F8 FFE5 00A0 1C0B                        move.b  (Sound_Buffer_Id+$01).w, ($00A01C0B)         ; $FFFFFFE5
00000ECE 13F8 FFE6 00A0 1C0C                        move.b  (Sound_Buffer_Id+$02).w, ($00A01C0C)         ; $FFFFFFE6
00000ED6 13F8 FFE8 00A0 1C10                        move.b  (Sound_Buffer_Id+$04).w, ($00A01C10)         ; $FFFFFFE8
00000EDE 7000                                       moveq   #$00, D0
00000EE0 21C0 FFE4                                  move.l  D0, (Sound_Buffer_Id).w                      ; $FFFFFFE4
00000EE4 4E75                                       rts   
00000EE6                            ;-------------------------------------------------------------------------------
00000EE6                            
00000EE6                            ;===============================================================================                  
00000EE6                            ; Inicializa__o das portas 0, 1 e expans_o
00000EE6                            ; ->>>                           
00000EE6                            ;===============================================================================
00000EE6                            Control_Ports_Init:                                            ; Offset_0x000EE6
00000EE6 33FC 0100 00A1 1100                        move.w  #$0100, (Z80_Bus_Request)                    ; $00A11100
00000EEE                            Offset_0x000EEE:
00000EEE 0839 0000 00A1 1100                        btst    #$00, (Z80_Bus_Request)                      ; $00A11100
00000EF6 66F6                                       bne.s   Offset_0x000EEE
00000EF8 7040                                       moveq   #$40, D0
00000EFA 13C0 00A1 0009                             move.b  D0, (IO_Port_0_Control+$0001)                ; $00A10009
00000F00 13C0 00A1 000B                             move.b  D0, (IO_Port_1_Control+$0001)                ; $00A1000B
00000F06 13C0 00A1 000D                             move.b  D0, (IO_Expansion_Control+$0001)             ; $00A1000D
00000F0C 33FC 0000 00A1 1100                        move.w  #$0000, (Z80_Bus_Request)                    ; $00A11100
00000F14 4E75                                       rts  
00000F16                            ;===============================================================================                  
00000F16                            ; Inicializa__o das portas 0, 1 e expans_o
00000F16                            ; <<<-                           
00000F16                            ;=============================================================================== 
00000F16                            
00000F16                            ;===============================================================================                  
00000F16                            ; Leitura das portas 0, 1 e expans_o
00000F16                            ; ->>>                           
00000F16                            ;=============================================================================== 
00000F16                            Control_Ports_Read:                                            ; Offset_0x000F16
00000F16 41F8 F604                                  lea     (Control_Ports_Buffer_Data).w, A0            ; $FFFFF604
00000F1A 43F9 00A1 0003                             lea     (IO_Joypad_Port_0), A1                       ; $00A10003
00000F20 6100                                       bsr.s   Offset_0x000F24
00000F22 5449                                       addq.w  #$02, A1
00000F24                            Offset_0x000F24:
00000F24 12BC 0000                                  move.b  #$00, (A1)
00000F28 4E71                                       nop
00000F2A 4E71                                       nop
00000F2C 1011                                       move.b  (A1), D0
00000F2E E508                                       lsl.b   #$02, D0
00000F30 0200 00C0                                  andi.b  #$C0, D0
00000F34 12BC 0040                                  move.b  #$40, (A1)
00000F38 4E71                                       nop
00000F3A 4E71                                       nop
00000F3C 1211                                       move.b  (A1), D1
00000F3E 0201 003F                                  andi.b  #$3F, D1
00000F42 8001                                       or.b    D1, D0
00000F44 4600                                       not.b   D0
00000F46 1210                                       move.b  (A0), D1
00000F48 B101                                       eor.b   D0, D1
00000F4A 10C0                                       move.b  D0, (A0)+
00000F4C C200                                       and.b   D0, D1
00000F4E 10C1                                       move.b  D1, (A0)+
00000F50 4E75                                       rts     
00000F52                            ;===============================================================================                  
00000F52                            ; Leitura das portas 0, 1 e expans_o
00000F52                            ; <<<-                           
00000F52                            ;===============================================================================   
00000F52                            
00000F52                            ;===============================================================================                  
00000F52                            ; VDPRegSetup
00000F52                            ; ->>>                           
00000F52                            ;===============================================================================  
00000F52                            VDPRegSetup:                                                   ; Offset_0x000F52
00000F52 41F9 00C0 0004                             lea     (VDP_Control_Port), A0                       ; $00C00004
00000F58 43F9 00C0 0000                             lea     (VDP_Data_Port), A1                          ; $00C00000
00000F5E 45F9 0000 0000                             lea     (VDPRegSetup_Array), A2                ; Offset_0x000FDC
00000F64 7E12                                       moveq   #$12, D7
00000F66                            Offset_0x000F66:
00000F66 309A                                       move.w  (A2)+, (A0)
00000F68 51CF FFFC                                  dbra    D7, Offset_0x000F66
00000F6C 3039 0000 0000                             move.w  (VDPRegSetup_Array+$02), D0            ; Offset_0x000FDE
00000F72 31C0 F60E                                  move.w  D0, (VDP_Register_1_Command).w               ; $FFFFF60E
00000F76 31FC 8ADF F624                             move.w  #$8ADF, (Horizontal_Int_Count_Cmd).w         ; $FFFFF624
00000F7C 7000                                       moveq   #$00, D0
00000F7E 23FC 4000 0010 00C0 0004                   move.l  #$40000010, (VDP_Control_Port)               ; $00C00004
00000F88 3280                                       move.w  D0, (A1)
00000F8A 3280                                       move.w  D0, (A1)
00000F8C 23FC C000 0000 00C0 0004                   move.l  #$C0000000, (VDP_Control_Port)               ; $00C00004
00000F96 3E3C 003F                                  move.w  #$003F, D7
00000F9A                            Offset_0x000F9A:
00000F9A 3280                                       move.w  D0, (A1)
00000F9C 51CF FFFC                                  dbra    D7, Offset_0x000F9A
00000FA0 42B8 F616                                  clr.l   (Vertical_Scroll_Value).w                    ; $FFFFF616
00000FA4 42B8 F61A                                  clr.l   (Vertical_Scroll_Value_3).w                  ; $FFFFF61A
00000FA8 2F01                                       move.l  D1, -(A7)
00000FAA 4BF9 00C0 0004                             lea     (VDP_Control_Port), A5                       ; $00C00004
00000FB0 3ABC 8F01                                  move.w  #$8F01, (A5)
00000FB4 2ABC 94FF 93FF                             move.l  #$94FF93FF, (A5)
00000FBA 3ABC 9780                                  move.w  #$9780, (A5)
00000FBE 2ABC 4000 0080                             move.l  #$40000080, (A5)
00000FC4 33FC 0000 00C0 0000                        move.w  #$0000, (VDP_Data_Port)                      ; $00C00000
00000FCC                            Offset_0x000FCC:
00000FCC 3215                                       move.w  (A5), D1
00000FCE 0801 0001                                  btst    #$01, D1
00000FD2 66F8                                       bne.s   Offset_0x000FCC
00000FD4 3ABC 8F02                                  move.w  #$8F02, (A5)
00000FD8 221F                                       move.l  (A7)+, D1
00000FDA 4E75                                       rts   
00000FDC                            ;-------------------------------------------------------------------------------
00000FDC                            VDPRegSetup_Array:                                             ; Offset_0x000FDC
00000FDC 8004                                       dc.w    $8004  ; H Int
00000FDE 8134                                       dc.w    $8134  ; V Int
00000FE0 8230                                       dc.w    $8230  ; Scroll A
00000FE2 8328                                       dc.w    $8328  ; Window 
00000FE4 8407                                       dc.w    $8407  ; Scroll B
00000FE6 857C                                       dc.w    $857C  ; Sprite Table
00000FE8 8600                                       dc.w    $8600
00000FEA 8700                                       dc.w    $8700  ; Background colour index
00000FEC 8800                                       dc.w    $8800
00000FEE 8900                                       dc.w    $8900
00000FF0 8A00                                       dc.w    $8A00
00000FF2 8B00                                       dc.w    $8B00  ; Scroll settings
00000FF4 8C81                                       dc.w    $8C81  ; Display mode
00000FF6 8D3C                                       dc.w    $8D3C  ; Horizontal scroll table
00000FF8 8E00                                       dc.w    $8E00
00000FFA 8F02                                       dc.w    $8F02  ; Auto increment
00000FFC 9001                                       dc.w    $9001  ; Scroll planes
00000FFE 9100                                       dc.w    $9100
00001000 9200                                       dc.w    $9200  ; Window Mode
00001002                            ;===============================================================================                  
00001002                            ; VDPRegSetup
00001002                            ; <<<-                           
00001002                            ;===============================================================================  
00001002                            
00001002                            ;===============================================================================                  
00001002                            ; ClearScreen
00001002                            ; ->>>                           
00001002                            ;===============================================================================  
00001002                            ClearScreen:                                                   ; Offset_0x001002
00001002 33FC 0100 00A1 1100                        move.w  #$0100, (Z80_Bus_Request)                    ; $00A11100
0000100A                            ClearScreen_Z80Wait:                                           ; Offset_0x00100A
0000100A 0839 0000 00A1 1100                        btst    #$00, (Z80_Bus_Request)                      ; $00A11100
00001012 66F6                                       bne.s   ClearScreen_Z80Wait                    ; Offset_0x00100A
00001014 4BF9 00C0 0004                             lea     (VDP_Control_Port), A5                       ; $00C00004
0000101A 3ABC 8F01                                  move.w  #$8F01, (A5)
0000101E 2ABC 9400 933F                             move.l  #$9400933F, (A5)
00001024 3ABC 9780                                  move.w  #$9780, (A5)
00001028 2ABC 4000 0080                             move.l  #$40000080, (A5)
0000102E 33FC 0000 00C0 0000                        move.w  #$0000, (VDP_Data_Port)                      ; $00C00000
00001036                            ClearScreen_DMAWait:                                           ; Offset_0x001036
00001036 3215                                       move.w  (A5), D1
00001038 0801 0001                                  btst    #$01, D1
0000103C 66F8                                       bne.s   ClearScreen_DMAWait                    ; Offset_0x001036
0000103E 3ABC 8F02                                  move.w  #$8F02, (A5)
00001042 4A78 FFD8                                  tst.w   (Two_Player_Flag).w                          ; $FFFFFFD8
00001046 6700                                       beq.s   Offset_0x001078
00001048 4BF9 00C0 0004                             lea     (VDP_Control_Port), A5                       ; $00C00004
0000104E 3ABC 8F01                                  move.w  #$8F01, (A5)
00001052 2ABC 943F 93FF                             move.l  #$943F93FF, (A5)
00001058 3ABC 9780                                  move.w  #$9780, (A5)
0000105C 2ABC 4000 0082                             move.l  #$40000082, (A5)
00001062 33FC 0000 00C0 0000                        move.w  #$0000, (VDP_Data_Port)                      ; $00C00000
0000106A                            ClearScreen_DMAWait_2:                                         ; Offset_0x00106A
0000106A 3215                                       move.w  (A5), D1
0000106C 0801 0001                                  btst    #$01, D1
00001070 66F8                                       bne.s   ClearScreen_DMAWait_2                  ; Offset_0x00106A
00001072 3ABC 8F02                                  move.w  #$8F02, (A5)
00001076 6000                                       bra.s   Offset_0x0010D4
00001078                            Offset_0x001078:
00001078 4BF9 00C0 0004                             lea     (VDP_Control_Port), A5                       ; $00C00004
0000107E 3ABC 8F01                                  move.w  #$8F01, (A5)
00001082 2ABC 940F 93FF                             move.l  #$940F93FF, (A5)
00001088 3ABC 9780                                  move.w  #$9780, (A5)
0000108C 2ABC 4000 0083                             move.l  #$40000083, (A5)
00001092 33FC 0000 00C0 0000                        move.w  #$0000, (VDP_Data_Port)                      ; $00C00000
0000109A                            ClearScreen_DMAWait_3:                                         ; Offset_0x00109A
0000109A 3215                                       move.w  (A5), D1
0000109C 0801 0001                                  btst    #$01, D1
000010A0 66F8                                       bne.s   ClearScreen_DMAWait_3                  ; Offset_0x00109A
000010A2 3ABC 8F02                                  move.w  #$8F02, (A5)
000010A6 4BF9 00C0 0004                             lea     (VDP_Control_Port), A5                       ; $00C00004
000010AC 3ABC 8F01                                  move.w  #$8F01, (A5)
000010B0 2ABC 940F 93FF                             move.l  #$940F93FF, (A5)
000010B6 3ABC 9780                                  move.w  #$9780, (A5)
000010BA 2ABC 6000 0083                             move.l  #$60000083, (A5)
000010C0 33FC 0000 00C0 0000                        move.w  #$0000, (VDP_Data_Port)                      ; $00C00000
000010C8                            ClearScreen_DMAWait_4:                                         ; Offset_0x0010C8
000010C8 3215                                       move.w  (A5), D1
000010CA 0801 0001                                  btst    #$01, D1
000010CE 66F8                                       bne.s   ClearScreen_DMAWait_4                  ; Offset_0x0010C8
000010D0 3ABC 8F02                                  move.w  #$8F02, (A5)
000010D4                            Offset_0x0010D4:
000010D4 42B8 F616                                  clr.l   (Vertical_Scroll_Value).w                    ; $FFFFF616
000010D8 42B8 F61A                                  clr.l   (Vertical_Scroll_Value_3).w                  ; $FFFFF61A
000010DC 43F8 F800                                  lea     (Sprite_Table_Buffer).w, A1                  ; $FFFFF800
000010E0 7000                                       moveq   #$00, D0
000010E2 323C 00A0                                  move.w  #$00A0, D1
000010E6                            ClearScreen_ClearBuffer1:                                      ; Offset_0x0010E6
000010E6 22C0                                       move.l  D0, (A1)+
000010E8 51C9 FFFC                                  dbra    D1, ClearScreen_ClearBuffer1           ; Offset_0x0010E6
000010EC 43F8 E000                                  lea     (Horizontal_Scroll_Buffer).w, A1             ; $FFFFE000
000010F0 7000                                       moveq   #$00, D0
000010F2 323C 0100                                  move.w  #$0100, D1
000010F6                            ClearScreen_ClearBuffer2:                                      ; Offset_0x0010F6
000010F6 22C0                                       move.l  D0, (A1)+
000010F8 51C9 FFFC                                  dbra    D1, ClearScreen_ClearBuffer2           ; Offset_0x0010F6
000010FC 33FC 0000 00A1 1100                        move.w  #$0000, (Z80_Bus_Request)                    ; $00A11100
00001104 4E75                                       rts
00001106                            ;===============================================================================                  
00001106                            ; ClearScreen
00001106                            ; <<<-                           
00001106                            ;===============================================================================
00001106                             
00001106                            ;===============================================================================                  
00001106                            ; SoundDriverLoad
00001106                            ; ->>>                           
00001106                            ;===============================================================================
00001106                            SoundDriverLoad:                                               ; Offset_0x001106
00001106 4E71                                       nop
00001108 33FC 0100 00A1 1100                        move.w  #$0100, (Z80_Bus_Request)                    ; $00A11100
00001110 33FC 0100 00A1 1200                        move.w  #$0100, (Z80_Reset)                          ; $00A11200
00001118 41F9 0000 0000                             lea     (Z80_Driver), A0                       ; Offset_0x0E0000
0000111E 43F9 00A0 0000                             lea     (Z80_RAM_Start), A1                          ; $00A00000
00001124 303C 1851                                  move.w  #$1851, D0
00001128                            Offset_0x001128:
00001128 12D8                                       move.b  (A0)+, (A1)+
0000112A 51C8 FFFC                                  dbra    D0, Offset_0x001128
0000112E 41F9 0000 0000                             lea     (Sound_Driver_Init_Data), A0           ; Offset_0x001166
00001134 43F9 00A0 1C00                             lea     ($00A01C00), A1
0000113A 303C 000F                                  move.w  #$000F, D0
0000113E                            Offset_0x00113E:
0000113E 12D8                                       move.b  (A0)+, (A1)+
00001140 51C8 FFFC                                  dbra    D0, Offset_0x00113E
00001144 33FC 0000 00A1 1200                        move.w  #$0000, (Z80_Reset)                          ; $00A11200
0000114C 4E71                                       nop
0000114E 4E71                                       nop
00001150 4E71                                       nop
00001152 4E71                                       nop
00001154 33FC 0100 00A1 1200                        move.w  #$0100, (Z80_Reset)                          ; $00A11200
0000115C 33FC 0000 00A1 1100                        move.w  #$0000, (Z80_Bus_Request)                    ; $00A11100
00001164 4E75                                       rts 
00001166                            ;-------------------------------------------------------------------------------
00001166                            Sound_Driver_Init_Data:                                        ; Offset_0x001166
00001166 0000 0012 0000 0000                        dc.b    $00, $00, $00, $12, $00, $00, $00, $00
0000116E 0000 0000 0000 0000                        dc.b    $00, $00, $00, $00, $00, $00, $00, $00                     
00001176                            ;===============================================================================                  
00001176                            ; SoundDriverLoad
00001176                            ; <<<-                           
00001176                            ;===============================================================================
00001176                            
00001176                            Play_Music:                                                    ; Offset_0x001176
00001176 0C00 00DA                                  cmpi.b  #$DA, D0
0000117A 6500                                       bcs.s   Offset_0x00118E
0000117C 0C00 00FF                                  cmpi.b  #$FF, D0
00001180 6700                                       beq.s   Offset_0x00118E
00001182 0C00 00E0                                  cmpi.b  #$E0, D0
00001186 6500                                       bcs.s   Exit_Play_Music                        ; Offset_0x0011DE
00001188 0C00 00E4                                  cmpi.b  #$E4, D0
0000118C 6400                                       bcc.s   Exit_Play_Music                        ; Offset_0x0011DE
0000118E                            Offset_0x00118E:
0000118E 33FC 0100 00A1 1100                        move.w  #$0100, (Z80_Bus_Request)                    ; $00A11100
00001196                            Offset_0x001196:
00001196 0839 0000 00A1 1100                        btst    #$00, (Z80_Bus_Request)                      ; $00A11100
0000119E 66F6                                       bne.s   Offset_0x001196
000011A0 4A39 00A0 1C0A                             tst.b   ($00A01C0A)
000011A6 6600                                       bne.s   Offset_0x0011B8
000011A8 13C0 00A0 1C0A                             move.b  D0, ($00A01C0A)
000011AE 33FC 0000 00A1 1100                        move.w  #$0000, (Z80_Bus_Request)                    ; $00A11100
000011B6 4E75                                       rts
000011B8                            Offset_0x0011B8:
000011B8 4A39 00A0 1C0B                             tst.b   ($00A01C0B)
000011BE 6600                                       bne.s   Offset_0x0011D0
000011C0 13C0 00A0 1C0B                             move.b  D0, ($00A01C0B)
000011C6 33FC 0000 00A1 1100                        move.w  #$0000, (Z80_Bus_Request)                    ; $00A11100
000011CE 4E75                                       rts
000011D0                            Offset_0x0011D0:
000011D0 13C0 00A0 1C0C                             move.b  D0, ($00A01C0C)
000011D6 33FC 0000 00A1 1100                        move.w  #$0000, (Z80_Bus_Request)                    ; $00A11100
000011DE                            Exit_Play_Music:                                               ; Offset_0x0011DE
000011DE 4E75                                       rts                 
000011E0                                        
000011E0                            ;===============================================================================
000011E0                            ; Rotina para tratar o Pause
000011E0                            ; ->>>
000011E0                            ;===============================================================================            
000011E0                            Pause:                                                         ; Offset_0x0011E0
000011E0 4E71                                       nop
000011E2 4A38 FE12                                  tst.b   (Life_Count).w                               ; $FFFFFE12
000011E6 6700 0000                                  beq     Unpause                                ; Offset_0x00128A
000011EA 4A78 F63A                                  tst.w   (Pause_Status).w                             ; $FFFFF63A
000011EE 6600                                       bne.s   Pause_AlreadyPaused                    ; Offset_0x001200
000011F0 1038 F605                                  move.b  (Control_Ports_Buffer_Data+$0001).w, D0      ; $FFFFF605
000011F4 8038 F607                                  or.b    (Control_Ports_Buffer_Data+$0003).w, D0      ; $FFFFF607
000011F8 0200 0080                                  andi.b  #$80, D0
000011FC 6700 0000                                  beq     Pause_DoNothing                        ; Offset_0x001290
00001200                            Pause_AlreadyPaused:                                           ; Offset_0x001200
00001200 31FC 0001 F63A                             move.w  #$0001, (Pause_Status).w                     ; $FFFFF63A
00001206 33FC 0100 00A1 1100                        move.w  #$0100, (Z80_Bus_Request)                    ; $00A11100
0000120E                            Pause_Wait_For_Z80:                                            ; Offset_0x00120E
0000120E 0839 0000 00A1 1100                        btst    #$00, (Z80_Bus_Request)                      ; $00A11100
00001216 66F6                                       bne.s   Pause_Wait_For_Z80                     ; Offset_0x00120E
00001218 13FC 0001 00A0 1C10                        move.b  #$01, ($00A01C10)
00001220 33FC 0000 00A1 1100                        move.w  #$0000, (Z80_Bus_Request)                    ; $00A11100
00001228                            Pause_Loop:                                                    ; Offset_0x001228
00001228 11FC 0010 F62A                             move.b  #$10, (VBlank_Index).w                       ; $FFFFF62A
0000122E 6100 0000                                  bsr     Wait_For_VSync                         ; Offset_0x001AEE
00001232 4A38 FFD1                                  tst.b   (Slow_Motion_Flag).w                         ; $FFFFFFD1
00001236 6700                                       beq.s   Pause_CheckStart                       ; Offset_0x00125A
00001238 0838 0006 F605                             btst    #$06, (Control_Ports_Buffer_Data+$0001).w    ; $FFFFF605
0000123E 6700                                       beq.s   Pause_CheckBC                          ; Offset_0x00124A
00001240 11FC 0004 F600                             move.b  #gm_TitleScreen, (Game_Mode).w          ; $04, $FFFFF600
00001246 4E71                                       nop
00001248 6000                                       bra.s   Offset_0x001268
0000124A                            Pause_CheckBC:                                                 ; Offset_0x00124A
0000124A 0838 0004 F604                             btst    #$04, (Control_Ports_Buffer_Data).w          ; $FFFFF604
00001250 6600                                       bne.s   Pause_SlowMotion                       ; Offset_0x001292
00001252 0838 0005 F605                             btst    #$05, (Control_Ports_Buffer_Data+$0001).w    ; $FFFFF605
00001258 6600                                       bne.s   Pause_SlowMotion                       ; Offset_0x001292
0000125A                            Pause_CheckStart:                                              ; Offset_0x00125A
0000125A 1038 F605                                  move.b  (Control_Ports_Buffer_Data+$0001).w, D0      ; $FFFFF605
0000125E 8038 F607                                  or.b    (Control_Ports_Buffer_Data+$0003).w, D0      ; $FFFFF607
00001262 0200 0080                                  andi.b  #$80, D0
00001266 67C0                                       beq.s   Pause_Loop                             ; Offset_0x001228
00001268                            Offset_0x001268:
00001268 33FC 0100 00A1 1100                        move.w  #$0100, (Z80_Bus_Request)                    ; $00A11100
00001270                            Pause_Wait_For_Z80_1:                                          ; Offset_0x001270
00001270 0839 0000 00A1 1100                        btst    #$00, (Z80_Bus_Request)                      ; $00A11100
00001278 66F6                                       bne.s   Pause_Wait_For_Z80_1                   ; Offset_0x001270
0000127A 13FC 0080 00A0 1C10                        move.b  #$80, ($00A01C10)
00001282 33FC 0000 00A1 1100                        move.w  #$0000, (Z80_Bus_Request)                    ; $00A11100
0000128A                            Unpause:                                                       ; Offset_0x00128A
0000128A 31FC 0000 F63A                             move.w  #$0000, (Pause_Status).w                     ; $FFFFF63A
00001290                            Pause_DoNothing:                                               ; Offset_0x001290
00001290 4E75                                       rts
00001292                            Pause_SlowMotion:                                              ; Offset_0x001292
00001292 31FC 0001 F63A                             move.w  #$0001, (Pause_Status).w                     ; $FFFFF63A
00001298 33FC 0100 00A1 1100                        move.w  #$0100, (Z80_Bus_Request)                    ; $00A11100
000012A0                            Pause_SlowMotion_Wait_For_Z80:                                 ; Offset_0x0012A0
000012A0 0839 0000 00A1 1100                        btst    #$00, (Z80_Bus_Request)                      ; $00A11100
000012A8 66F6                                       bne.s   Pause_SlowMotion_Wait_For_Z80          ; Offset_0x0012A0
000012AA 13FC 0080 00A0 1C10                        move.b  #$80, ($00A01C10)
000012B2 33FC 0000 00A1 1100                        move.w  #$0000, (Z80_Bus_Request)                    ; $00A11100
000012BA 4E75                                       rts  
000012BC                            ;===============================================================================
000012BC                            ; Rotina para tratar o Pause
000012BC                            ; <<<-
000012BC                            ;===============================================================================   
000012BC                                       
000012BC                            ;===============================================================================
000012BC                            ; Rotina para carregar os mapeamentos para a VDP
000012BC                            ; ->>>
000012BC                            ;===============================================================================
000012BC                            ShowVDPGraphics:                                               ; Offset_0x0012BC
000012BC 4DF9 00C0 0000                             lea     (VDP_Data_Port), A6                          ; $00C00000
000012C2 283C 0080 0000                             move.l  #$00800000, D4
000012C8                            ShowVDPGraphics_LineLoop:                                      ; Offset_0x0012C8
000012C8 2D40 0004                                  move.l  D0, $0004(A6)
000012CC 3601                                       move.w  D1, D3
000012CE                            ShowVDPGraphics_TileLoop:                                      ; Offset_0x0012CE
000012CE 3C99                                       move.w  (A1)+, (A6)
000012D0 51CB FFFC                                  dbra    D3, ShowVDPGraphics_TileLoop           ; Offset_0x0012CE
000012D4 D084                                       add.l   D4, D0
000012D6 51CA FFF0                                  dbra    D2, ShowVDPGraphics_LineLoop           ; Offset_0x0012C8
000012DA 4E75                                       rts    
000012DC                            ;===============================================================================
000012DC                            ; Rotina para carregar os mapeamentos para a VDP
000012DC                            ; <<<-
000012DC                            ;===============================================================================
000012DC                            
000012DC                            ;===============================================================================
000012DC                            ; Rotina para carregar os mapeamentos para a VDP no Special Stage
000012DC                            ; ->>>
000012DC                            ;===============================================================================
000012DC                            ShowVDPGraphics_SS:                                            ; Offset_0x0012DC
000012DC 4DF9 00C0 0000                             lea     (VDP_Data_Port), A6                          ; $00C00000
000012E2 283C 0100 0000                             move.l  #$01000000, D4
000012E8                            ShowVDPGraphicsSS_TileLoop:                                    ; Offset_0x0012E8
000012E8 2D40 0004                                  move.l  D0, $0004(A6)
000012EC 3601                                       move.w  D1, D3
000012EE                            ShowVDPGraphicsSS_LineLoop:                                    ; Offset_0x0012EE
000012EE 3C99                                       move.w  (A1)+, (A6)
000012F0 51CB FFFC                                  dbra    D3, ShowVDPGraphicsSS_LineLoop         ; Offset_0x0012EE
000012F4 D084                                       add.l   D4, D0
000012F6 51CA FFF0                                  dbra    D2, ShowVDPGraphicsSS_TileLoop         ; Offset_0x0012E8
000012FA 4E75                                       rts 
000012FC                            ;===============================================================================
000012FC                            ; Rotina para carregar os mapeamentos para a VDP no Special Stage
000012FC                            ; <<<-
000012FC                            ;===============================================================================
000012FC                            
000012FC                            ;===============================================================================
000012FC                            ; Rotina de transfer_ncia para a VRAM       
000012FC                            ; ->>>
000012FC                            ;=============================================================================== 
000012FC                            DMA_68KtoVRAM:                                                 ; Offset_0x0012FC
000012FC 2278 E8F8                                  move.l  (DMA_Buffer_List_End).w, A1                  ; $FFFFE8F8
00001300 B2FC E8F8                                  cmpa.w  #DMA_Buffer_List_End, A1                         ; $E8F8
00001304 6700                                       beq.s   Offset_0x00135C
00001306 303C 9300                                  move.w  #$9300, D0
0000130A 1003                                       move.b  D3, D0
0000130C 32C0                                       move.w  D0, (A1)+
0000130E 303C 9400                                  move.w  #$9400, D0
00001312 E04B                                       lsr.w   #$08, D3
00001314 1003                                       move.b  D3, D0
00001316 32C0                                       move.w  D0, (A1)+
00001318 303C 9500                                  move.w  #$9500, D0
0000131C E289                                       lsr.l   #$01, D1
0000131E 1001                                       move.b  D1, D0
00001320 32C0                                       move.w  D0, (A1)+
00001322 303C 9600                                  move.w  #$9600, D0
00001326 E089                                       lsr.l   #$08, D1
00001328 1001                                       move.b  D1, D0
0000132A 32C0                                       move.w  D0, (A1)+
0000132C 303C 9700                                  move.w  #$9700, D0
00001330 E089                                       lsr.l   #$08, D1
00001332 0201 007F                                  andi.b  #$7F, D1
00001336 1001                                       move.b  D1, D0
00001338 32C0                                       move.w  D0, (A1)+
0000133A 0282 0000 FFFF                             andi.l  #$0000FFFF, D2
00001340 E58A                                       lsl.l   #$02, D2
00001342 E44A                                       lsr.w   #$02, D2
00001344 4842                                       swap.w  D2
00001346 0082 4000 0080                             ori.l   #$40000080, D2
0000134C 22C2                                       move.l  D2, (A1)+
0000134E 21C9 E8F8                                  move.l  A1, (DMA_Buffer_List_End).w                  ; $FFFFE8F8
00001352 B2FC E8F8                                  cmpa.w  #DMA_Buffer_List_End, A1                         ; $E8F8
00001356 6700                                       beq.s   Offset_0x00135C
00001358 32BC 0000                                  move.w  #$0000, (A1)
0000135C                            Offset_0x00135C:
0000135C 4E75                                       rts 
0000135E                            ;===============================================================================
0000135E                            ; Rotina de transfer_ncia para a VRAM       
0000135E                            ; <<<-
0000135E                            ;=============================================================================== 
0000135E                                         
0000135E                            ;===============================================================================
0000135E                            ; Rotina de processamento do DMA
0000135E                            ; ->>>
0000135E                            ;=============================================================================== 
0000135E                            Process_DMA:                                                   ; Offset_0x00135E
0000135E 4BF9 00C0 0004                             lea     (VDP_Control_Port), A5                       ; $00C00004
00001364 43F8 E700                                  lea     (DMA_Buffer_List).w, A1                      ; $FFFFE700
00001368                            Process_DMA_Loop:                                              ; Offset_0x001368
00001368 3019                                       move.w  (A1)+, D0
0000136A 6700                                       beq.s   Process_DMA_End                        ; Offset_0x001380
0000136C 3A80                                       move.w  D0, (A5)
0000136E 3A99                                       move.w  (A1)+, (A5)
00001370 3A99                                       move.w  (A1)+, (A5)
00001372 3A99                                       move.w  (A1)+, (A5)
00001374 3A99                                       move.w  (A1)+, (A5)
00001376 3A99                                       move.w  (A1)+, (A5)
00001378 3A99                                       move.w  (A1)+, (A5)
0000137A B2FC E8F8                                  cmpa.w  #DMA_Buffer_List_End, A1                         ; $E8F8
0000137E 66E8                                       bne.s   Process_DMA_Loop                       ; Offset_0x001368
00001380                            Process_DMA_End:                                               ; Offset_0x001380
00001380 31FC 0000 E700                             move.w  #$0000, (DMA_Buffer_List).w                  ; $FFFFE700
00001386 21FC FFFF E700 E8F8                        move.l  #DMA_Buffer_List, (DMA_Buffer_List_End).w  ; $FFFFE700, $FFFFE8F8
0000138E 4E75                                       rts
00001390                            ;===============================================================================
00001390                            ; Rotina de processamento do DMA
00001390                            ; <<<-
00001390                            ;===============================================================================              
00001390                                      
00001390                            ;===============================================================================
00001390                            ; Rotina de descompress_o no formato Nemesis
00001390                            ; ->>>
00001390                            ;=============================================================================== 
00001390                            NemesisDec:                                                    ; Offset_0x001390
00001390 48E7 FFDC                                  movem.l D0-D7/A0/A1/A3-A5, -(A7)
00001394 47F9 0000 0000                             lea     (NemesisDec_Output), A3                ; Offset_0x001452
0000139A 49F9 00C0 0000                             lea     (VDP_Data_Port), A4                          ; $00C00000
000013A0 6000                                       bra.s   NemesisDec_Main                        ; Offset_0x0013AC 
000013A2                            ;-------------------------------------------------------------------------------
000013A2                            NemesisDecToRAM:                                               ; Offset_0x0013A2
000013A2 48E7 FFDC                                  movem.l D0-D7/A0/A1/A3-A5, -(A7)
000013A6 47F9 0000 0000                             lea     (NemesisDec_OutputToRAM), A3           ; Offset_0x001468
000013AC                            NemesisDec_Main:                                               ; Offset_0x0013AC                
000013AC 43F8 AA00                                  lea     (NemesisDec_Data_Buffer).w, A1               ; $FFFFAA00
000013B0 3418                                       move.w  (A0)+, D2
000013B2 E34A                                       lsl.w   #$01, D2
000013B4 6400                                       bcc.s   Offset_0x0013BA
000013B6                                          ; Aponta A3 para NemesisDec_Output_XOR se A3 = NemesisDec_Output ou
000013B6                                          ; Aponta A3 para NemesisDec_OutputRAM_XOR se A3 = NemesisDec_OutputRAM  
000013B6 D6FC 0000                                  adda.w  #(NemesisDec_Output_XOR-NemesisDec_Output), A3   ; $000A
000013BA                            Offset_0x0013BA:
000013BA E54A                                       lsl.w   #$02, D2
000013BC 3A42                                       move.w  D2, A5
000013BE 7608                                       moveq   #$08, D3
000013C0 7400                                       moveq   #$00, D2
000013C2 7800                                       moveq   #$00, D4
000013C4 6100 0000                                  bsr     NemesisDec_4                           ; Offset_0x00147E
000013C8 1A18                                       move.b  (A0)+, D5
000013CA E145                                       asl.w   #$08, D5
000013CC 1A18                                       move.b  (A0)+, D5
000013CE 3C3C 0010                                  move.w  #$0010, D6
000013D2 6100                                       bsr.s   NemesisDec_2                           ; Offset_0x0013DA
000013D4 4CDF 3BFF                                  movem.l (A7)+, D0-D7/A0/A1/A3-A5
000013D8 4E75                                       rts
000013DA                            ;-------------------------------------------------------------------------------                
000013DA                            NemesisDec_2:                                                  ; Offset_0x0013DA
000013DA 3E06                                       move.w  D6, D7
000013DC 5147                                       subq.w  #$08, D7
000013DE 3205                                       move.w  D5, D1
000013E0 EE69                                       lsr.w   D7, D1
000013E2 0C01 00FC                                  cmpi.b  #$FC, D1
000013E6 6400                                       bcc.s   Offset_0x001426
000013E8 0241 00FF                                  andi.w  #$00FF, D1
000013EC D241                                       add.w   D1, D1
000013EE 1031 1000                                  move.b  $00(A1, D1), D0
000013F2 4880                                       ext.w   D0
000013F4 9C40                                       sub.w   D0, D6
000013F6 0C46 0009                                  cmpi.w  #$0009, D6
000013FA 6400                                       bcc.s   Offset_0x001402
000013FC 5046                                       addq.w  #$08, D6
000013FE E145                                       asl.w   #$08, D5
00001400 1A18                                       move.b  (A0)+, D5
00001402                            Offset_0x001402:
00001402 1231 1001                                  move.b  $01(A1, D1), D1
00001406 3001                                       move.w  D1, D0
00001408 0241 000F                                  andi.w  #$000F, D1
0000140C 0240 00F0                                  andi.w  #$00F0, D0
00001410                            NemesisDec_SubType:                                            ; Offset_0x001410                
00001410 E848                                       lsr.w   #$04, D0
00001412                            NemesisDec_Loop_SubType:                                       ; Offset_0x001412                
00001412 E98C                                       lsl.l   #$04, D4
00001414 8801                                       or.b    D1, D4
00001416 5343                                       subq.w  #$01, D3
00001418 6600                                       bne.s   Offset_0x001420
0000141A                                          ; A3 Cont_m uma das rotinas de descompress_o no formato Nemesis.  
0000141A                                          ; ( NemesisDec_Output_XOR ou NemesisDec_OutputRAM_XOR ) 
0000141A 4ED3                                       jmp     (A3)
0000141C                            ;-------------------------------------------------------------------------------
0000141C                            NemesisDec_3:                                                  ; Offset_0x00141C
0000141C 7800                                       moveq   #$00, D4
0000141E 7608                                       moveq   #$08, D3
00001420                            Offset_0x001420:                
00001420 51C8 FFF0                                  dbra    D0, NemesisDec_Loop_SubType            ; Offset_0x001412
00001424 60B4                                       bra.s   NemesisDec_2  
00001426                            ;-------------------------------------------------------------------------------
00001426                            Offset_0x001426:
00001426 5D46                                       subq.w  #$06, D6
00001428 0C46 0009                                  cmpi.w  #$0009, D6
0000142C 6400                                       bcc.s   Offset_0x001434
0000142E 5046                                       addq.w  #$08, D6
00001430 E145                                       asl.w   #$08, D5
00001432 1A18                                       move.b  (A0)+, D5
00001434                            Offset_0x001434:
00001434 5F46                                       subq.w  #$07, D6
00001436 3205                                       move.w  D5, D1
00001438 EC69                                       lsr.w   D6, D1
0000143A 3001                                       move.w  D1, D0
0000143C 0241 000F                                  andi.w  #$000F, D1
00001440 0240 0070                                  andi.w  #$0070, D0
00001444 0C46 0009                                  cmpi.w  #$0009, D6
00001448 64C6                                       bcc.s   NemesisDec_SubType                     ; Offset_0x001410
0000144A 5046                                       addq.w  #$08, D6
0000144C E145                                       asl.w   #$08, D5
0000144E 1A18                                       move.b  (A0)+, D5
00001450 60BE                                       bra.s   NemesisDec_SubType                     ; Offset_0x001410
00001452                            ;-------------------------------------------------------------------------------
00001452                            NemesisDec_Output:                                             ; Offset_0x001452
00001452 2884                                       move.l  D4, (A4)
00001454 534D                                       subq.w  #$01, A5
00001456 380D                                       move.w  A5, D4
00001458 66C2                                       bne.s   NemesisDec_3                           ; Offset_0x00141C
0000145A 4E75                                       rts           
0000145C                            ;-------------------------------------------------------------------------------
0000145C                            NemesisDec_Output_XOR:                                         ; Offset_0x00145C
0000145C B982                                       eor.l   D4, D2
0000145E 2882                                       move.l  D2, (A4)
00001460 534D                                       subq.w  #$01, A5
00001462 380D                                       move.w  A5, D4
00001464 66B6                                       bne.s   NemesisDec_3                           ; Offset_0x00141C
00001466 4E75                                       rts    
00001468                            ;-------------------------------------------------------------------------------
00001468                            NemesisDec_OutputToRAM:                                        ; Offset_0x001468
00001468 28C4                                       move.l  D4, (A4)+
0000146A 534D                                       subq.w  #$01, A5
0000146C 380D                                       move.w  A5, D4
0000146E 66AC                                       bne.s   NemesisDec_3                           ; Offset_0x00141C
00001470 4E75                                       rts           
00001472                            ;-------------------------------------------------------------------------------
00001472                            NemesisDec_Output_XORToRAM:                                    ; Offset_0x001472
00001472 B982                                       eor.l   D4, D2
00001474 28C2                                       move.l  D2, (A4)+
00001476 534D                                       subq.w  #$01, A5
00001478 380D                                       move.w  A5, D4
0000147A 66A0                                       bne.s   NemesisDec_3                           ; Offset_0x00141C
0000147C 4E75                                       rts   
0000147E                            ;-------------------------------------------------------------------------------
0000147E                            NemesisDec_4:                                                  ; Offset_0x00147E
0000147E 1018                                       move.b  (A0)+, D0
00001480                            Offset_0x001480:
00001480 0C00 00FF                                  cmpi.b  #$FF, D0
00001484 6600                                       bne.s   Offset_0x001488
00001486 4E75                                       rts
00001488                            Offset_0x001488:
00001488 3E00                                       move.w  D0, D7
0000148A                            Offset_0x00148A:
0000148A 1018                                       move.b  (A0)+, D0
0000148C 0C00 0080                                  cmpi.b  #$80, D0
00001490 64EE                                       bcc.s   Offset_0x001480
00001492 1200                                       move.b  D0, D1
00001494 0247 000F                                  andi.w  #$000F, D7
00001498 0241 0070                                  andi.w  #$0070, D1
0000149C 8E41                                       or.w    D1, D7
0000149E 0240 000F                                  andi.w  #$000F, D0
000014A2 1200                                       move.b  D0, D1
000014A4 E149                                       lsl.w   #$08, D1
000014A6 8E41                                       or.w    D1, D7
000014A8 7208                                       moveq   #$08, D1
000014AA 9240                                       sub.w   D0, D1
000014AC 6600                                       bne.s   Offset_0x0014B8
000014AE 1018                                       move.b  (A0)+, D0
000014B0 D040                                       add.w   D0, D0
000014B2 3387 0000                                  move.w  D7, $00(A1, D0)
000014B6 60D2                                       bra.s   Offset_0x00148A
000014B8                            Offset_0x0014B8:
000014B8 1018                                       move.b  (A0)+, D0
000014BA E368                                       lsl.w   D1, D0
000014BC D040                                       add.w   D0, D0
000014BE 7A01                                       moveq   #$01, D5
000014C0 E36D                                       lsl.w   D1, D5
000014C2 5345                                       subq.w  #$01, D5
000014C4                            Offset_0x0014C4:
000014C4 3387 0000                                  move.w  D7, $00(A1, D0)
000014C8 5440                                       addq.w  #$02, D0
000014CA 51CD FFF8                                  dbra    D5, Offset_0x0014C4
000014CE 60BA                                       bra.s   Offset_0x00148A                                                                                         
000014D0                            ;===============================================================================
000014D0                            ; Rotina de descompress_o no formato Nemesis
000014D0                            ; <<<-
000014D0                            ;=============================================================================== 
000014D0                                      
000014D0                            ;===============================================================================
000014D0                            ; Rotinas para carga dos gr_ficos no array ArtLoadCues de acordo com o 
000014D0                            ; ind_ce em D0
000014D0                            ; ->>>
000014D0                            ;=============================================================================== 
000014D0                            LoadPLC:                                                       ; Offset_0x0014D0
000014D0 48E7 0060                                  movem.l A1/A2, -(A7)
000014D4 43F9 0000 0000                             lea     (ArtLoadCues), A1                      ; Offset_0x04ABFE
000014DA D040                                       add.w   D0, D0
000014DC 3031 0000                                  move.w  $00(A1, D0), D0
000014E0 43F1 0000                                  lea     $00(A1, D0), A1
000014E4 45F8 F680                                  lea     (PLC_Data_Buffer).w, A2                      ; $FFFFF680
000014E8                            Offset_0x0014E8:
000014E8 4A92                                       tst.l   (A2)
000014EA 6700                                       beq.s   Offset_0x0014F0
000014EC 5C4A                                       addq.w  #$06, A2
000014EE 60F8                                       bra.s   Offset_0x0014E8
000014F0                            Offset_0x0014F0:
000014F0 3019                                       move.w  (A1)+, D0
000014F2 6B00                                       bmi.s   Offset_0x0014FC
000014F4                            Offset_0x0014F4:
000014F4 24D9                                       move.l  (A1)+, (A2)+
000014F6 34D9                                       move.w  (A1)+, (A2)+
000014F8 51C8 FFFA                                  dbra    D0, Offset_0x0014F4
000014FC                            Offset_0x0014FC:
000014FC 4CDF 0600                                  movem.l (A7)+, A1/A2
00001500 4E75                                       rts 
00001502                            ;-------------------------------------------------------------------------------
00001502                            LoadPLC_A1:                                                    ; Offset_0x001502
00001502 45F8 F680                                  lea     (PLC_Data_Buffer).w, A2                      ; $FFFFF680
00001506                            Offset_0x001506:
00001506 4A92                                       tst.l   (A2)
00001508 6700                                       beq.s   Offset_0x00150E
0000150A 5C4A                                       addq.w  #$06, A2
0000150C 60F8                                       bra.s   Offset_0x001506
0000150E                            Offset_0x00150E:
0000150E 3019                                       move.w  (A1)+, D0
00001510 6B00                                       bmi.s   Offset_0x00151A
00001512                            Offset_0x001512:
00001512 24D9                                       move.l  (A1)+, (A2)+
00001514 34D9                                       move.w  (A1)+, (A2)+
00001516 51C8 FFFA                                  dbra    D0, Offset_0x001512
0000151A                            Offset_0x00151A:
0000151A 4E75                                       rts    
0000151C                            ;-------------------------------------------------------------------------------
0000151C                            LoadPLC2:                                                      ; Offset_0x00151C
0000151C 48E7 0060                                  movem.l A1/A2, -(A7)
00001520 43F9 0000 0000                             lea     (ArtLoadCues), A1                      ; Offset_0x04ABFE
00001526 D040                                       add.w   D0, D0
00001528 3031 0000                                  move.w  $00(A1, D0), D0
0000152C 43F1 0000                                  lea     $00(A1, D0), A1
00001530 6100                                       bsr.s   ClearPLC                               ; Offset_0x001548
00001532 45F8 F680                                  lea     (PLC_Data_Buffer).w, A2                      ; $FFFFF680
00001536 3019                                       move.w  (A1)+, D0
00001538 6B00                                       bmi.s   Offset_0x001542
0000153A                            Offset_0x00153A:
0000153A 24D9                                       move.l  (A1)+, (A2)+
0000153C 34D9                                       move.w  (A1)+, (A2)+
0000153E 51C8 FFFA                                  dbra    D0, Offset_0x00153A
00001542                            Offset_0x001542:
00001542 4CDF 0600                                  movem.l (A7)+, A1/A2
00001546 4E75                                       rts                           
00001548                            ;===============================================================================
00001548                            ; Rotinas para carga dos gr_ficos no array ArtLoadCues de acordo com o 
00001548                            ; ind_ce em D0
00001548                            ; <<<-
00001548                            ;=============================================================================== 
00001548                            
00001548                            ;===============================================================================
00001548                            ; Rotina para limpar os itens na lista de carga dos gr_ficos
00001548                            ; ->>>
00001548                            ;=============================================================================== 
00001548                            ClearPLC:                                                      ; Offset_0x001548
00001548 45F8 F680                                  lea     (PLC_Data_Buffer).w, A2                      ; $FFFFF680
0000154C 701F                                       moveq   #$1F, D0
0000154E                            Offset_0x00154E:
0000154E 429A                                       clr.l   (A2)+
00001550 51C8 FFFC                                  dbra    D0, Offset_0x00154E
00001554 4E75                                       rts                         
00001556                            ;===============================================================================
00001556                            ; Rotina para limpar os itens na lista de carga dos gr_ficos
00001556                            ; <<<-
00001556                            ;===============================================================================                                                                                                                
00001556                            
00001556                            ;===============================================================================
00001556                            ; Rotina para descompactar os itens na lista de carga dos gr_ficos
00001556                            ; ->>>
00001556                            ;=============================================================================== 
00001556                            RunPLC:                                                        ; Offset_0x001556
00001556 4AB8 F680                                  tst.l   (PLC_Data_Buffer).w                          ; $FFFFF680
0000155A 6700                                       beq.s   Offset_0x0015AC
0000155C 4A78 F6F8                                  tst.w   (PLC_Data_Count).w                           ; $FFFFF6F8
00001560 6600                                       bne.s   Offset_0x0015AC
00001562 2078 F680                                  move.l  (PLC_Data_Buffer).w, A0                      ; $FFFFF680
00001566 47F9 0000 1452                             lea     (NemesisDec_Output), A3                ; Offset_0x001452
0000156C 4E71                                       nop
0000156E 43F8 AA00                                  lea     (NemesisDec_Data_Buffer).w, A1               ; $FFFFAA00
00001572 3418                                       move.w  (A0)+, D2
00001574 6A00                                       bpl.s   Offset_0x00157A
00001576                                          ; Aponta A3 para NemesisDec_Output_XOR se A3 = NemesisDec_Output ou
00001576                                          ; Aponta A3 para NemesisDec_OutputRAM_XOR se A3 = NemesisDec_OutputRAM   
00001576 D6FC 000A                                  adda.w  #(NemesisDec_Output_XOR-NemesisDec_Output), A3   ; $000A
0000157A                            Offset_0x00157A:
0000157A 0242 7FFF                                  andi.w  #$7FFF, D2
0000157E 31C2 F6F8                                  move.w  D2, (PLC_Data_Count).w                       ; $FFFFF6F8
00001582 6100 FEFA                                  bsr     NemesisDec_4                           ; Offset_0x00147E
00001586 1A18                                       move.b  (A0)+, D5
00001588 E145                                       asl.w   #$08, D5
0000158A 1A18                                       move.b  (A0)+, D5
0000158C 7C10                                       moveq   #$10, D6
0000158E 7000                                       moveq   #$00, D0
00001590 21C8 F680                                  move.l  A0, (PLC_Data_Buffer).w                      ; $FFFFF680
00001594 21CB F6E0                                  move.l  A3, (Nemesis_Decomp_Vars).w                  ; $FFFFF6E0
00001598 21C0 F6E4                                  move.l  D0, (Nemesis_Repeat_Count).w                 ; $FFFFF6E4
0000159C 21C0 F6E8                                  move.l  D0, (Nemesis_Palette_Index).w                ; $FFFFF6E8
000015A0 21C0 F6EC                                  move.l  D0, (Nemesis_Previous_Row).w                 ; $FFFFF6EC
000015A4 21C5 F6F0                                  move.l  D5, (Nemesis_Data_Word).w                    ; $FFFFF6F0
000015A8 21C6 F6F4                                  move.l  D6, (Nemesis_Shift_Value).w                  ; $FFFFF6F4
000015AC                            Offset_0x0015AC:
000015AC 4E75                                       rts 
000015AE                            ;===============================================================================
000015AE                            ; Rotina para descompactar os itens na lista de carga dos gr_ficos
000015AE                            ; <<<-
000015AE                            ;=============================================================================== 
000015AE                            
000015AE                            Process_Nemesis_Queue:                                         ; Offset_0x0015AE
000015AE 4A78 F6F8                                  tst.w   (PLC_Data_Count).w                           ; $FFFFF6F8
000015B2 6700 0000                                  beq     Offset_0x001646
000015B6 31FC 0006 F6FA                             move.w  #$0006, (Nemesis_Frame_Pattern_Left).w       ; $FFFFF6FA
000015BC 7000                                       moveq   #$00, D0
000015BE 3038 F684                                  move.w  (Nemesis_Decomp_Destination).w, D0           ; $FFFFF684
000015C2 0678 00C0 F684                             addi.w  #$00C0, (Nemesis_Decomp_Destination).w       ; $FFFFF684
000015C8 6000                                       bra.s   Offset_0x0015E2
000015CA                            ;-------------------------------------------------------------------------------
000015CA                            Process_Nemesis_Queue_2:                                       ; Offset_0x0015CA
000015CA 4A78 F6F8                                  tst.w   (PLC_Data_Count).w                           ; $FFFFF6F8
000015CE 6700                                       beq.s   Offset_0x001646
000015D0 31FC 0003 F6FA                             move.w  #$0003, (Nemesis_Frame_Pattern_Left).w       ; $FFFFF6FA
000015D6 7000                                       moveq   #$00, D0
000015D8 3038 F684                                  move.w  (Nemesis_Decomp_Destination).w, D0           ; $FFFFF684
000015DC 0678 0060 F684                             addi.w  #$0060, (Nemesis_Decomp_Destination).w       ; $FFFFF684
000015E2                            Offset_0x0015E2:
000015E2 49F9 00C0 0004                             lea     (VDP_Control_Port), A4                       ; $00C00004
000015E8 E588                                       lsl.l   #$02, D0
000015EA E448                                       lsr.w   #$02, D0
000015EC 0040 4000                                  ori.w   #$4000, D0
000015F0 4840                                       swap.w  D0
000015F2 2880                                       move.l  D0, (A4)
000015F4 594C                                       subq.w  #$04, A4
000015F6 2078 F680                                  move.l  (PLC_Data_Buffer).w, A0                      ; $FFFFF680
000015FA 2678 F6E0                                  move.l  (Nemesis_Decomp_Vars).w, A3                  ; $FFFFF6E0
000015FE 2038 F6E4                                  move.l  (Nemesis_Repeat_Count).w, D0                 ; $FFFFF6E4
00001602 2238 F6E8                                  move.l  (Nemesis_Palette_Index).w, D1                ; $FFFFF6E8
00001606 2438 F6EC                                  move.l  (Nemesis_Previous_Row).w, D2                 ; $FFFFF6EC
0000160A 2A38 F6F0                                  move.l  (Nemesis_Data_Word).w, D5                    ; $FFFFF6F0
0000160E 2C38 F6F4                                  move.l  (Nemesis_Shift_Value).w, D6                  ; $FFFFF6F4
00001612 43F8 AA00                                  lea     (NemesisDec_Data_Buffer).w, A1               ; $FFFFAA00
00001616                            Offset_0x001616:
00001616 3A7C 0008                                  move.w  #$0008, A5
0000161A 6100 FE00                                  bsr     NemesisDec_3                           ; Offset_0x00141C
0000161E 5378 F6F8                                  subq.w  #$01, (PLC_Data_Count).w                     ; $FFFFF6F8
00001622 6700                                       beq.s   Offset_0x001648
00001624 5378 F6FA                                  subq.w  #$01, (Nemesis_Frame_Pattern_Left).w         ; $FFFFF6FA
00001628 66EC                                       bne.s   Offset_0x001616
0000162A 21C8 F680                                  move.l  A0, (PLC_Data_Buffer).w                      ; $FFFFF680
0000162E 21CB F6E0                                  move.l  A3, (Nemesis_Decomp_Vars).w                  ; $FFFFF6E0
00001632 21C0 F6E4                                  move.l  D0, (Nemesis_Repeat_Count).w                 ; $FFFFF6E4
00001636 21C1 F6E8                                  move.l  D1, (Nemesis_Palette_Index).w                ; $FFFFF6E8
0000163A 21C2 F6EC                                  move.l  D2, (Nemesis_Previous_Row).w                 ; $FFFFF6EC
0000163E 21C5 F6F0                                  move.l  D5, (Nemesis_Data_Word).w                    ; $FFFFF6F0
00001642 21C6 F6F4                                  move.l  D6, (Nemesis_Shift_Value).w                  ; $FFFFF6F4
00001646                            Offset_0x001646:
00001646 4E75                                       rts
00001648                            Offset_0x001648:
00001648 41F8 F680                                  lea     (PLC_Data_Buffer).w, A0                      ; $FFFFF680
0000164C 7015                                       moveq   #$15, D0
0000164E                            Offset_0x00164E:
0000164E 20E8 0006                                  move.l  $0006(A0), (A0)+
00001652 51C8 FFFA                                  dbra    D0, Offset_0x00164E
00001656 4E75                                       rts   
00001658                                            
00001658                            ;===============================================================================
00001658                            ; Carrega os dados direto do ROM sem entrar na fila       
00001658                            ; ->>>
00001658                            ;=============================================================================== 
00001658                            RunPLC_ROM:                                                    ; Offset_0x001658
00001658 43F9 0000 0000                             lea     (ArtLoadCues), A1                      ; Offset_0x04ABFE
0000165E D040                                       add.w   D0, D0
00001660 3031 0000                                  move.w  $00(A1, D0), D0
00001664 43F1 0000                                  lea     $00(A1, D0), A1
00001668 3219                                       move.w  (A1)+, D1
0000166A                            RunPLC_ROM_Loop:                                               ; Offset_0x00166A
0000166A 2059                                       move.l  (A1)+, A0
0000166C 7000                                       moveq   #$00, D0
0000166E 3019                                       move.w  (A1)+, D0
00001670 E588                                       lsl.l   #$02, D0
00001672 E448                                       lsr.w   #$02, D0
00001674 0040 4000                                  ori.w   #$4000, D0
00001678 4840                                       swap.w  D0
0000167A 23C0 00C0 0004                             move.l  D0, (VDP_Control_Port)                       ; $00C00004
00001680 6100 FD0E                                  bsr     NemesisDec                             ; Offset_0x001390
00001684 51C9 FFE4                                  dbra    D1, RunPLC_ROM_Loop                    ; Offset_0x00166A
00001688 4E75                                       rts 
0000168A                            ;===============================================================================
0000168A                            ; Carrega os dados direto do ROM sem entrar na fila       
0000168A                            ; <<<-
0000168A                            ;=============================================================================== 
0000168A                                
0000168A                            ;===============================================================================
0000168A                            ; Rotina de descompress_o no formato Enigma
0000168A                            ; ->>>
0000168A                            ;===============================================================================  
0000168A                            EnigmaDec:                                                     ; Offset_0x00168A
0000168A 48E7 FF7C                                  movem.l D0-D7/A1-A5, -(A7)
0000168E 3640                                       move.w  D0, A3
00001690 1018                                       move.b  (A0)+, D0
00001692 4880                                       ext.w   D0
00001694 3A40                                       move.w  D0, A5
00001696 1818                                       move.b  (A0)+, D4
00001698 E70C                                       lsl.b   #$03, D4
0000169A 3458                                       move.w  (A0)+, A2
0000169C D4CB                                       adda.w  A3, A2
0000169E 3858                                       move.w  (A0)+, A4
000016A0 D8CB                                       adda.w  A3, A4
000016A2 1A18                                       move.b  (A0)+, D5
000016A4 E145                                       asl.w   #$08, D5
000016A6 1A18                                       move.b  (A0)+, D5
000016A8 7C10                                       moveq   #$10, D6
000016AA                            EnigmaDec_Loop:                                                ; Offset_0x0016AA     
000016AA 7007                                       moveq   #$07, D0
000016AC 3E06                                       move.w  D6, D7
000016AE 9E40                                       sub.w   D0, D7
000016B0 3205                                       move.w  D5, D1
000016B2 EE69                                       lsr.w   D7, D1
000016B4 0241 007F                                  andi.w  #$007F, D1
000016B8 3401                                       move.w  D1, D2
000016BA 0C41 0040                                  cmpi.w  #$0040, D1
000016BE 6400                                       bcc.s   Offset_0x0016C4
000016C0 7006                                       moveq   #$06, D0
000016C2 E24A                                       lsr.w   #$01, D2
000016C4                            Offset_0x0016C4:
000016C4 6100 0000                                  bsr     Enigma_Dec_Fetch_Byte                  ; Offset_0x0017F8
000016C8 0242 000F                                  andi.w  #$000F, D2
000016CC E849                                       lsr.w   #$04, D1
000016CE D241                                       add.w   D1, D1
000016D0 4EFB 1000                                  jmp     Enigma_Dec_Routines(PC, D1)            ; Offset_0x001720
000016D4                            ;-------------------------------------------------------------------------------
000016D4                            Enigma_Dec_00:                                                 ; Offset_0x0016D4
000016D4 32CA                                       move.w  A2, (A1)+
000016D6 524A                                       addq.w  #$01, A2
000016D8 51CA FFFA                                  dbra    D2, Enigma_Dec_00                      ; Offset_0x0016D4
000016DC 60CC                                       bra.s   EnigmaDec_Loop                         ; Offset_0x0016AA
000016DE                            ;-------------------------------------------------------------------------------
000016DE                            Enigma_Dec_01:                                                 ; Offset_0x0016DE
000016DE 32CC                                       move.w  A4, (A1)+
000016E0 51CA FFFC                                  dbra    D2, Enigma_Dec_01                      ; Offset_0x0016DE
000016E4 60C4                                       bra.s   EnigmaDec_Loop                         ; Offset_0x0016AA
000016E6                            ;-------------------------------------------------------------------------------
000016E6                            Enigma_Dec_02:                                                 ; Offset_0x0016E6
000016E6 6100 0000                                  bsr     Enigma_Dec_Fetch                       ; Offset_0x001748
000016EA                            Offset_0x0016EA:
000016EA 32C1                                       move.w  D1, (A1)+
000016EC 51CA FFFC                                  dbra    D2, Offset_0x0016EA
000016F0 60B8                                       bra.s   EnigmaDec_Loop                         ; Offset_0x0016AA
000016F2                            ;-------------------------------------------------------------------------------
000016F2                            Enigma_Dec_03:                                                 ; Offset_0x0016F2
000016F2 6100 0000                                  bsr     Enigma_Dec_Fetch                       ; Offset_0x001748
000016F6                            Offset_0x0016F6:
000016F6 32C1                                       move.w  D1, (A1)+
000016F8 5241                                       addq.w  #$01, D1
000016FA 51CA FFFA                                  dbra    D2, Offset_0x0016F6
000016FE 60AA                                       bra.s   EnigmaDec_Loop                         ; Offset_0x0016AA
00001700                            ;-------------------------------------------------------------------------------
00001700                            Enigma_Dec_04:                                                 ; Offset_0x001700
00001700 6100 0000                                  bsr     Enigma_Dec_Fetch                       ; Offset_0x001748
00001704                            Offset_0x001704:
00001704 32C1                                       move.w  D1, (A1)+
00001706 5341                                       subq.w  #$01, D1
00001708 51CA FFFA                                  dbra    D2, Offset_0x001704
0000170C 609C                                       bra.s   EnigmaDec_Loop                         ; Offset_0x0016AA
0000170E                            ;-------------------------------------------------------------------------------
0000170E                            Enigma_Dec_05:                                                 ; Offset_0x00170E
0000170E 0C42 000F                                  cmpi.w  #$000F, D2
00001712 6700                                       beq.s   Enigma_Dec_Finalize                    ; Offset_0x001730
00001714                            Offset_0x001714:
00001714 6100 0000                                  bsr     Enigma_Dec_Fetch                       ; Offset_0x001748
00001718 32C1                                       move.w  D1, (A1)+
0000171A 51CA FFF8                                  dbra    D2, Offset_0x001714
0000171E 608A                                       bra.s   EnigmaDec_Loop                         ; Offset_0x0016AA
00001720                            ;-------------------------------------------------------------------------------
00001720                            Enigma_Dec_Routines                                            ; Offset_0x001720
00001720 60B2                                       bra.s   Enigma_Dec_00                          ; Offset_0x0016D4
00001722 60B0                                       bra.s   Enigma_Dec_00                          ; Offset_0x0016D4
00001724 60B8                                       bra.s   Enigma_Dec_01                          ; Offset_0x0016DE
00001726 60B6                                       bra.s   Enigma_Dec_01                          ; Offset_0x0016DE
00001728 60BC                                       bra.s   Enigma_Dec_02                          ; Offset_0x0016E6
0000172A 60C6                                       bra.s   Enigma_Dec_03                          ; Offset_0x0016F2
0000172C 60D2                                       bra.s   Enigma_Dec_04                          ; Offset_0x001700
0000172E 60DE                                       bra.s   Enigma_Dec_05                          ; Offset_0x00170E   
00001730                            ;-------------------------------------------------------------------------------
00001730                            Enigma_Dec_Finalize:                                           ; Offset_0x001730
00001730 5348                                       subq.w  #$01, A0
00001732 0C46 0010                                  cmpi.w  #$0010, D6
00001736 6600                                       bne.s   Offset_0x00173A
00001738 5348                                       subq.w  #$01, A0
0000173A                            Offset_0x00173A:
0000173A 3008                                       move.w  A0, D0
0000173C E248                                       lsr.w   #$01, D0
0000173E 6400                                       bcc.s   Offset_0x001742
00001740 5248                                       addq.w  #$01, A0
00001742                            Offset_0x001742:
00001742 4CDF 3EFF                                  movem.l (A7)+, D0-D7/A1-A5
00001746 4E75                                       rts
00001748                            ;-------------------------------------------------------------------------------                
00001748                            Enigma_Dec_Fetch:                                              ; Offset_0x001748
00001748 360B                                       move.w  A3, D3
0000174A 1204                                       move.b  D4, D1
0000174C D201                                       add.b   D1, D1
0000174E 6400                                       bcc.s   Offset_0x00175A
00001750 5346                                       subq.w  #$01, D6
00001752 0D05                                       btst    D6, D5
00001754 6700                                       beq.s   Offset_0x00175A
00001756 0043 8000                                  ori.w   #$8000, D3
0000175A                            Offset_0x00175A:
0000175A D201                                       add.b   D1, D1
0000175C 6400                                       bcc.s   Offset_0x001768
0000175E 5346                                       subq.w  #$01, D6
00001760 0D05                                       btst    D6, D5
00001762 6700                                       beq.s   Offset_0x001768
00001764 0643 4000                                  addi.w  #$4000, D3
00001768                            Offset_0x001768:
00001768 D201                                       add.b   D1, D1
0000176A 6400                                       bcc.s   Offset_0x001776
0000176C 5346                                       subq.w  #$01, D6
0000176E 0D05                                       btst    D6, D5
00001770 6700                                       beq.s   Offset_0x001776
00001772 0643 2000                                  addi.w  #$2000, D3
00001776                            Offset_0x001776:
00001776 D201                                       add.b   D1, D1
00001778 6400                                       bcc.s   Offset_0x001784
0000177A 5346                                       subq.w  #$01, D6
0000177C 0D05                                       btst    D6, D5
0000177E 6700                                       beq.s   Offset_0x001784
00001780 0043 1000                                  ori.w   #$1000, D3
00001784                            Offset_0x001784:
00001784 D201                                       add.b   D1, D1
00001786 6400                                       bcc.s   Offset_0x001792
00001788 5346                                       subq.w  #$01, D6
0000178A 0D05                                       btst    D6, D5
0000178C 6700                                       beq.s   Offset_0x001792
0000178E 0043 0800                                  ori.w   #$0800, D3
00001792                            Offset_0x001792:
00001792 3205                                       move.w  D5, D1
00001794 3E06                                       move.w  D6, D7
00001796 9E4D                                       sub.w   A5, D7
00001798 6400                                       bcc.s   Offset_0x0017C2
0000179A 3C07                                       move.w  D7, D6
0000179C 0646 0010                                  addi.w  #$0010, D6
000017A0 4447                                       neg.w   D7
000017A2 EF69                                       lsl.w   D7, D1
000017A4 1A10                                       move.b  (A0), D5
000017A6 EF3D                                       rol.b   D7, D5
000017A8 DE47                                       add.w   D7, D7
000017AA CA7B 7000                                  and.w   Enigma_Dec_Mask-$02(PC, D7), D5        ; Offset_0x0017D6
000017AE D245                                       add.w   D5, D1
000017B0                            Offset_0x0017B0:
000017B0 300D                                       move.w  A5, D0
000017B2 D040                                       add.w   D0, D0
000017B4 C27B 0000                                  and.w   Enigma_Dec_Mask-$02(PC, D0), D1        ; Offset_0x0017D6
000017B8 D243                                       add.w   D3, D1
000017BA 1A18                                       move.b  (A0)+, D5
000017BC E14D                                       lsl.w   #$08, D5
000017BE 1A18                                       move.b  (A0)+, D5
000017C0 4E75                                       rts
000017C2                            Offset_0x0017C2:
000017C2 6700                                       beq.s   Offset_0x0017D4
000017C4 EE69                                       lsr.w   D7, D1
000017C6 300D                                       move.w  A5, D0
000017C8 D040                                       add.w   D0, D0
000017CA C27B 0000                                  and.w   Enigma_Dec_Mask-$02(PC, D0), D1        ; Offset_0x0017D6
000017CE D243                                       add.w   D3, D1
000017D0 300D                                       move.w  A5, D0
000017D2 6000                                       bra.s   Enigma_Dec_Fetch_Byte                  ; Offset_0x0017F8
000017D4                            Offset_0x0017D4:
000017D4 7C10                                       moveq   #$10, D6
000017D6 60D8                                       bra.s   Offset_0x0017B0     
000017D8                            ;-------------------------------------------------------------------------------
000017D8                            Enigma_Dec_Mask:                                               ; Offset_0x0017D8
000017D8 0001 0003 0007 000F 001F+                  dc.w    $0001, $0003, $0007, $000F, $001F, $003F, $007F, $00FF
000017E8 01FF 03FF 07FF 0FFF 1FFF+                  dc.w    $01FF, $03FF, $07FF, $0FFF, $1FFF, $3FFF, $7FFF, $FFFF  
000017F8                            ;-------------------------------------------------------------------------------
000017F8                            Enigma_Dec_Fetch_Byte:                                         ; Offset_0x0017F8
000017F8 9C40                                       sub.w   D0, D6
000017FA 0C46 0009                                  cmpi.w  #$0009, D6
000017FE 6400                                       bcc.s   Offset_0x001806
00001800 5046                                       addq.w  #$08, D6
00001802 E145                                       asl.w   #$08, D5
00001804 1A18                                       move.b  (A0)+, D5
00001806                            Offset_0x001806:
00001806 4E75                                       rts                                                                                                                       
00001808                            ;===============================================================================
00001808                            ; Rotina de descompress_o no formato Enigma
00001808                            ; <<<-
00001808                            ;===============================================================================  
00001808                                           
00001808                            ;===============================================================================
00001808                            ; Rotina de descompress_o no formato Kosinski
00001808                            ; ->>>
00001808                            ;=============================================================================== 
00001808                            KosinskiDec:                                                   ; Offset_0x001808
00001808 558F                                       subq.l  #$02, A7
0000180A 1F58 0001                                  move.b  (A0)+, $0001(A7)
0000180E 1E98                                       move.b  (A0)+, (A7)
00001810 3A17                                       move.w  (A7), D5
00001812 780F                                       moveq   #$0F, D4
00001814                            Offset_0x001814:
00001814 E24D                                       lsr.w   #$01, D5
00001816 40C6                                       move    SR, D6
00001818 51CC 0000                                  dbra    D4, Offset_0x001826
0000181C 1F58 0001                                  move.b  (A0)+, $0001(A7)
00001820 1E98                                       move.b  (A0)+, (A7)
00001822 3A17                                       move.w  (A7), D5
00001824 780F                                       moveq   #$0F, D4
00001826                            Offset_0x001826:
00001826 44C6                                       move    D6, CCR
00001828 6400                                       bcc.s   Offset_0x00182E
0000182A 12D8                                       move.b  (A0)+, (A1)+
0000182C 60E6                                       bra.s   Offset_0x001814
0000182E                            Offset_0x00182E:
0000182E 7600                                       moveq   #$00, D3
00001830 E24D                                       lsr.w   #$01, D5
00001832 40C6                                       move    SR, D6
00001834 51CC 0000                                  dbra    D4, Offset_0x001842
00001838 1F58 0001                                  move.b  (A0)+, $0001(A7)
0000183C 1E98                                       move.b  (A0)+, (A7)
0000183E 3A17                                       move.w  (A7), D5
00001840 780F                                       moveq   #$0F, D4
00001842                            Offset_0x001842:
00001842 44C6                                       move    D6, CCR
00001844 6500                                       bcs.s   Offset_0x001872
00001846 E24D                                       lsr.w   #$01, D5
00001848 51CC 0000                                  dbra    D4, Offset_0x001856
0000184C 1F58 0001                                  move.b  (A0)+, $0001(A7)
00001850 1E98                                       move.b  (A0)+, (A7)
00001852 3A17                                       move.w  (A7), D5
00001854 780F                                       moveq   #$0F, D4
00001856                            Offset_0x001856:
00001856 E353                                       roxl.w  #$01, D3
00001858 E24D                                       lsr.w   #$01, D5
0000185A 51CC 0000                                  dbra    D4, Offset_0x001868
0000185E 1F58 0001                                  move.b  (A0)+, $0001(A7)
00001862 1E98                                       move.b  (A0)+, (A7)
00001864 3A17                                       move.w  (A7), D5
00001866 780F                                       moveq   #$0F, D4
00001868                            Offset_0x001868:
00001868 E353                                       roxl.w  #$01, D3
0000186A 5243                                       addq.w  #$01, D3
0000186C 74FF                                       moveq   #-$01, D2
0000186E 1418                                       move.b  (A0)+, D2
00001870 6000                                       bra.s   Offset_0x001888
00001872                            Offset_0x001872:
00001872 1018                                       move.b  (A0)+, D0
00001874 1218                                       move.b  (A0)+, D1
00001876 74FF                                       moveq   #-$01, D2
00001878 1401                                       move.b  D1, D2
0000187A EB4A                                       lsl.w   #$05, D2
0000187C 1400                                       move.b  D0, D2
0000187E 0241 0007                                  andi.w  #$0007, D1
00001882 6700                                       beq.s   Offset_0x001894
00001884 1601                                       move.b  D1, D3
00001886 5243                                       addq.w  #$01, D3
00001888                            Offset_0x001888:
00001888 1031 2000                                  move.b  $00(A1, D2), D0
0000188C 12C0                                       move.b  D0, (A1)+
0000188E 51CB FFF8                                  dbra    D3, Offset_0x001888
00001892 6080                                       bra.s   Offset_0x001814
00001894                            Offset_0x001894:
00001894 1218                                       move.b  (A0)+, D1
00001896 6700                                       beq.s   Offset_0x0018A4
00001898 0C01 0001                                  cmpi.b  #$01, D1
0000189C 6700 FF76                                  beq     Offset_0x001814
000018A0 1601                                       move.b  D1, D3
000018A2 60E4                                       bra.s   Offset_0x001888
000018A4                            Offset_0x0018A4:
000018A4 548F                                       addq.l  #$02, A7
000018A6 4E75                                       rts 
000018A8                            ;===============================================================================
000018A8                            ; Rotina de descompress_o no formato Kosinski
000018A8                            ; <<<-
000018A8                            ;=============================================================================== 
000018A8                                          
000018A8                            ;===============================================================================
000018A8                            ; Rotina de descompress_o no formato Kosinski modulado
000018A8                            ; ->>>
000018A8                            ;===============================================================================               
000018A8                            Kosinski_Moduled_Dec:                                          ; Offset_0x0018A8
000018A8 45F8 FF64                                  lea     (Kosinski_Mod_Queue).w, A2                   ; $FFFFFF64
000018AC 4A92                                       tst.l   (A2)
000018AE 6700                                       beq.s   Offset_0x0018C0
000018B0 5C4A                                       addq.w  #$06, A2
000018B2                            Offset_0x0018B2:
000018B2 4A92                                       tst.l   (A2)
000018B4 6700                                       beq.s   Offset_0x0018BA
000018B6 5C4A                                       addq.w  #$06, A2
000018B8 60F8                                       bra.s   Offset_0x0018B2
000018BA                            Offset_0x0018BA:
000018BA 24C9                                       move.l  A1, (A2)+
000018BC 34C2                                       move.w  D2, (A2)+
000018BE 4E75                                       rts
000018C0                            Offset_0x0018C0:
000018C0 3619                                       move.w  (A1)+, D3
000018C2 0C43 A000                                  cmpi.w  #$A000, D3
000018C6 6600                                       bne.s   Offset_0x0018CC
000018C8 363C 8000                                  move.w  #$8000, D3
000018CC                            Offset_0x0018CC:
000018CC E24B                                       lsr.w   #$01, D3
000018CE 3003                                       move.w  D3, D0
000018D0 EB58                                       rol.w   #$05, D0
000018D2 0240 001F                                  andi.w  #$001F, D0
000018D6 11C0 FF60                                  move.b  D0, (Kosinski_Modules_Left).w                ; $FFFFFF60
000018DA 0283 0000 07FF                             andi.l  #$000007FF, D3
000018E0 6600                                       bne.s   Offset_0x0018EC
000018E2 5338 FF60                                  subq.b  #$01, (Kosinski_Modules_Left).w              ; $FFFFFF60
000018E6 263C 0000 0800                             move.l  #$00000800, D3
000018EC                            Offset_0x0018EC:
000018EC 31C3 FF62                                  move.w  D3, (Kosinski_Module_Size).w                 ; $FFFFFF62
000018F0 31C2 FF68                                  move.w  D2, (Kosinski_Mod_Destination).w             ; $FFFFFF68
000018F4 21C9 FF64                                  move.l  A1, (Kosinski_Mod_Queue).w                   ; $FFFFFF64
000018F8 5238 FF60                                  addq.b  #$01, (Kosinski_Modules_Left).w              ; $FFFFFF60
000018FC 4E75                                       rts   
000018FE                            ;===============================================================================
000018FE                            ; Rotina de descompress_o no formato Kosinski modulado
000018FE                            ; <<<-
000018FE                            ;===============================================================================
000018FE                            Process_Kosinski_Queue:                                        ; Offset_0x0018FE
000018FE 4A38 FF60                                  tst.b   (Kosinski_Modules_Left).w                    ; $FFFFFF60
00001902 6600                                       bne.s   Offset_0x001906
00001904                            Offset_0x001904:
00001904 4E75                                       rts
00001906                            Offset_0x001906:
00001906 6B00                                       bmi.s   Offset_0x001924
00001908 0C78 0004 FF0E                             cmpi.w  #$0004, (Kosinski_Mod_Queue_Count).w         ; $FFFFFF0E
0000190E 64F4                                       bcc.s   Offset_0x001904
00001910 2278 FF64                                  move.l  (Kosinski_Mod_Queue).w, A1                   ; $FFFFFF64
00001914 45F8 D000                                  lea     (Kosinski_Decomp_Buffer).w, A2               ; $FFFFD000
00001918 6100 0000                                  bsr     Update_Kosinski_Queue_Count            ; Offset_0x0019AE
0000191C 0038 0080 FF60                             ori.b   #$80, (Kosinski_Modules_Left).w              ; $FFFFFF60
00001922 4E75                                       rts
00001924                            Offset_0x001924:
00001924 4A78 FF0E                                  tst.w   (Kosinski_Mod_Queue_Count).w                 ; $FFFFFF0E
00001928 66DA                                       bne.s   Offset_0x001904
0000192A 0238 007F FF60                             andi.b  #$7F, (Kosinski_Modules_Left).w              ; $FFFFFF60
00001930 263C 0000 0800                             move.l  #$00000800, D3
00001936 5338 FF60                                  subq.b  #$01, (Kosinski_Modules_Left).w              ; $FFFFFF60
0000193A 6600                                       bne.s   Offset_0x001940
0000193C 3638 FF62                                  move.w  (Kosinski_Module_Size).w, D3                 ; $FFFFFF62
00001940                            Offset_0x001940:
00001940 3438 FF68                                  move.w  (Kosinski_Mod_Destination).w, D2             ; $FFFFFF68
00001944 3002                                       move.w  D2, D0
00001946 D043                                       add.w   D3, D0
00001948 D043                                       add.w   D3, D0
0000194A 31C0 FF68                                  move.w  D0, (Kosinski_Mod_Destination).w             ; $FFFFFF68
0000194E 2038 FF64                                  move.l  (Kosinski_Mod_Queue).w, D0                   ; $FFFFFF64
00001952 2238 FF40                                  move.l  (Kosinski_Decomp_Queue).w, D1                ; $FFFFFF40
00001956 9081                                       sub.l   D1, D0
00001958 0280 0000 000F                             andi.l  #$0000000F, D0
0000195E D280                                       add.l   D0, D1
00001960 21C1 FF64                                  move.l  D1, (Kosinski_Mod_Queue).w                   ; $FFFFFF64
00001964 223C FFFF D000                             move.l  #Kosinski_Decomp_Buffer, D1                  ; $FFFFD000
0000196A 0281 00FF FFFF                             andi.l  #$00FFFFFF, D1
00001970 4EB9 0000 12FC                             jsr     (DMA_68KtoVRAM)                        ; Offset_0x0012FC
00001976 4A38 FF60                                  tst.b   (Kosinski_Modules_Left).w                    ; $FFFFFF60
0000197A 6600                                       bne.s   Offset_0x0019AC
0000197C 41F8 FF64                                  lea     (Kosinski_Mod_Queue).w, A0                   ; $FFFFFF64
00001980 43F8 FF6A                                  lea     (Kosinski_Mod_Queue+$06).w, A1               ; $FFFFFF6A
00001984 20D9                                       move.l  (A1)+, (A0)+
00001986 30D9                                       move.w  (A1)+, (A0)+
00001988 20D9                                       move.l  (A1)+, (A0)+
0000198A 30D9                                       move.w  (A1)+, (A0)+
0000198C 20D9                                       move.l  (A1)+, (A0)+
0000198E 30D9                                       move.w  (A1)+, (A0)+
00001990 20FC 0000 0000                             move.l  #$00000000, (A0)+
00001996 30FC 0000                                  move.w  #$0000, (A0)+
0000199A 2038 FF64                                  move.l  (Kosinski_Mod_Queue).w, D0                   ; $FFFFFF64
0000199E 6700                                       beq.s   Offset_0x0019AC
000019A0 2240                                       move.l  D0, A1
000019A2 3438 FF68                                  move.w  (Kosinski_Mod_Destination).w, D2             ; $FFFFFF68
000019A6 4EF9 0000 18C0                             jmp     (Offset_0x0018C0)
000019AC                            Offset_0x0019AC:
000019AC 4E75                                       rts
000019AE                            Update_Kosinski_Queue_Count:                                   ; Offset_0x0019AE
000019AE 3038 FF0E                                  move.w  (Kosinski_Mod_Queue_Count).w, D0             ; $FFFFFF0E
000019B2 E748                                       lsl.w   #$03, D0
000019B4 47F8 FF40                                  lea     (Kosinski_Decomp_Queue).w, A3                ; $FFFFFF40
000019B8 2789 0000                                  move.l  A1, $00(A3, D0)
000019BC 278A 0004                                  move.l  A2, $04(A3, D0)
000019C0 5278 FF0E                                  addq.w  #$01, (Kosinski_Mod_Queue_Count).w           ; $FFFFFF0E
000019C4 4E75                                       rts                  
000019C6                            ;-------------------------------------------------------------------------------                  
000019C6                            Set_Kosinski_Bookmark:                                         ; Offset_0x0019C6
000019C6 4A78 FF0E                                  tst.w   (Kosinski_Mod_Queue_Count).w                 ; $FFFFFF0E
000019CA 6A00                                       bpl.s   Offset_0x0019EE
000019CC 202F 0042                                  move.l  $0042(A7), D0
000019D0 0C80 0000 0000                             cmpi.l  #Process_Kosinski_Queue_Main, D0       ; Offset_0x0019F0
000019D6 6500                                       bcs.s   Offset_0x0019EE
000019D8 0C80 0000 0000                             cmpi.l  #Exit_Process_Kosinski_Queue_Main, D0  ; Offset_0x001AD0
000019DE 6400                                       bcc.s   Offset_0x0019EE
000019E0 21EF 0042 FF3A                             move.l  $0042(A7), (Kosinski_Bookmark).w             ; $FFFFFF3A
000019E6 2F7C 0000 0000 0042                        move.l  #Kosinski_Save_Registers, $0042(A7)    ; Offset_0x001AE2
000019EE                            Offset_0x0019EE:
000019EE 4E75                                       rts    
000019F0                            ;-------------------------------------------------------------------------------
000019F0                            Process_Kosinski_Queue_Main:                                   ; Offset_0x0019F0
000019F0 4A78 FF0E                                  tst.w   (Kosinski_Mod_Queue_Count).w                 ; $FFFFFF0E
000019F4 6700 0000                                  beq     Exit_Process_Kosinski_Queue_Main       ; Offset_0x001AD0
000019F8 6B00 0000                                  bmi     Offset_0x001AD2
000019FC 0078 8000 FF0E                             ori.w   #$8000, (Kosinski_Mod_Queue_Count).w         ; $FFFFFF0E
00001A02 2078 FF40                                  move.l  (Kosinski_Decomp_Queue).w, A0                ; $FFFFFF40
00001A06 2278 FF44                                  move.l  (Kosinski_Decomp_Destination).w, A1          ; $FFFFFF44
00001A0A 45F8 FF3E                                  lea     (Kosinski_Description_Field).w, A2           ; $FFFFFF3E
00001A0E 1558 0001                                  move.b  (A0)+, $0001(A2)
00001A12 1498                                       move.b  (A0)+, (A2)
00001A14 3A12                                       move.w  (A2), D5
00001A16 780F                                       moveq   #$0F, D4
00001A18                            Offset_0x001A18:
00001A18 E24D                                       lsr.w   #$01, D5
00001A1A 40C6                                       move    SR, D6
00001A1C 51CC 0000                                  dbra    D4, Offset_0x001A2A
00001A20 1558 0001                                  move.b  (A0)+, $0001(A2)
00001A24 1498                                       move.b  (A0)+, (A2)
00001A26 3A12                                       move.w  (A2), D5
00001A28 780F                                       moveq   #$0F, D4
00001A2A                            Offset_0x001A2A:
00001A2A 44C6                                       move    D6, CCR
00001A2C 6400                                       bcc.s   Offset_0x001A32
00001A2E 12D8                                       move.b  (A0)+, (A1)+
00001A30 60E6                                       bra.s   Offset_0x001A18
00001A32                            Offset_0x001A32:
00001A32 7600                                       moveq   #$00, D3
00001A34 E24D                                       lsr.w   #$01, D5
00001A36 40C6                                       move    SR, D6
00001A38 51CC 0000                                  dbra    D4, Offset_0x001A46
00001A3C 1558 0001                                  move.b  (A0)+, $0001(A2)
00001A40 1498                                       move.b  (A0)+, (A2)
00001A42 3A12                                       move.w  (A2), D5
00001A44 780F                                       moveq   #$0F, D4
00001A46                            Offset_0x001A46:
00001A46 44C6                                       move    D6, CCR
00001A48 6500                                       bcs.s   Offset_0x001A76
00001A4A E24D                                       lsr.w   #$01, D5
00001A4C 51CC 0000                                  dbra    D4, Offset_0x001A5A
00001A50 1558 0001                                  move.b  (A0)+, $0001(A2)
00001A54 1498                                       move.b  (A0)+, (A2)
00001A56 3A12                                       move.w  (A2), D5
00001A58 780F                                       moveq   #$0F, D4
00001A5A                            Offset_0x001A5A:
00001A5A E353                                       roxl.w  #$01, D3
00001A5C E24D                                       lsr.w   #$01, D5
00001A5E 51CC 0000                                  dbra    D4, Offset_0x001A6C
00001A62 1558 0001                                  move.b  (A0)+, $0001(A2)
00001A66 1498                                       move.b  (A0)+, (A2)
00001A68 3A12                                       move.w  (A2), D5
00001A6A 780F                                       moveq   #$0F, D4
00001A6C                            Offset_0x001A6C:
00001A6C E353                                       roxl.w  #$01, D3
00001A6E 5243                                       addq.w  #$01, D3
00001A70 74FF                                       moveq   #-$01, D2
00001A72 1418                                       move.b  (A0)+, D2
00001A74 6000                                       bra.s   Offset_0x001A8C
00001A76                            Offset_0x001A76:
00001A76 1018                                       move.b  (A0)+, D0
00001A78 1218                                       move.b  (A0)+, D1
00001A7A 74FF                                       moveq   #-$01, D2
00001A7C 1401                                       move.b  D1, D2
00001A7E EB4A                                       lsl.w   #$05, D2
00001A80 1400                                       move.b  D0, D2
00001A82 0241 0007                                  andi.w  #$0007, D1
00001A86 6700                                       beq.s   Offset_0x001A98
00001A88 1601                                       move.b  D1, D3
00001A8A 5243                                       addq.w  #$01, D3
00001A8C                            Offset_0x001A8C:
00001A8C 1031 2000                                  move.b  $00(A1, D2), D0
00001A90 12C0                                       move.b  D0, (A1)+
00001A92 51CB FFF8                                  dbra    D3, Offset_0x001A8C
00001A96 6080                                       bra.s   Offset_0x001A18
00001A98                            Offset_0x001A98:
00001A98 1218                                       move.b  (A0)+, D1
00001A9A 6700                                       beq.s   Offset_0x001AA8
00001A9C 0C01 0001                                  cmpi.b  #$01, D1
00001AA0 6700 FF76                                  beq     Offset_0x001A18
00001AA4 1601                                       move.b  D1, D3
00001AA6 60E4                                       bra.s   Offset_0x001A8C
00001AA8                            Offset_0x001AA8:
00001AA8 21C8 FF40                                  move.l  A0, (Kosinski_Decomp_Queue).w                ; $FFFFFF40
00001AAC 21C9 FF44                                  move.l  A1, (Kosinski_Decomp_Destination).w          ; $FFFFFF44
00001AB0 0278 7FFF FF0E                             andi.w  #$7FFF, (Kosinski_Mod_Queue_Count).w         ; $FFFFFF0E
00001AB6 5378 FF0E                                  subq.w  #$01, (Kosinski_Mod_Queue_Count).w           ; $FFFFFF0E
00001ABA 6700                                       beq.s   Exit_Process_Kosinski_Queue_Main       ; Offset_0x001AD0
00001ABC 41F8 FF40                                  lea     (Kosinski_Decomp_Queue).w, A0                ; $FFFFFF40
00001AC0 43F8 FF48                                  lea     (Kosinski_Decomp_Queue+$08).w, A1            ; $FFFFFF48
00001AC4 20D9                                       move.l  (A1)+, (A0)+
00001AC6 20D9                                       move.l  (A1)+, (A0)+
00001AC8 20D9                                       move.l  (A1)+, (A0)+
00001ACA 20D9                                       move.l  (A1)+, (A0)+
00001ACC 20D9                                       move.l  (A1)+, (A0)+
00001ACE 20D9                                       move.l  (A1)+, (A0)+
00001AD0                            Exit_Process_Kosinski_Queue_Main:                              ; Offset_0x001AD0
00001AD0 4E75                                       rts
00001AD2                            Offset_0x001AD2:
00001AD2 4CF8 077F FF10                             movem.l (Kosinski_Saved_Registers).w, D0-D6/A0-A2    ; $FFFFFF10
00001AD8 2F38 FF3A                                  move.l  (Kosinski_Bookmark).w, -(A7)                 ; $FFFFFF3A
00001ADC 3F38 FF38                                  move.w  (Kosinski_Saved_SR).w, -(A7)                 ; $FFFFFF38
00001AE0 4E73                                       rte  
00001AE2                            ;-------------------------------------------------------------------------------
00001AE2                            Kosinski_Save_Registers:                                       ; Offset_0x001AE2
00001AE2 40F8 FF38                                  move    SR, (Kosinski_Saved_SR).w                    ; $FFFFFF38
00001AE6 48F8 077F FF10                             movem.l D0-D6/A0-A2, (Kosinski_Saved_Registers).w    ; $FFFFFF10
00001AEC 4E75                                       rts   
00001AEE                                                                                    
00001AEE                            ;===============================================================================
00001AEE                            ; Aguarda pela conclus_o do procedimento de interrup__o vertical
00001AEE                            ; ->>>
00001AEE                            ;=============================================================================== 
00001AEE                            Wait_For_VSync:                                                ; Offset_0x001AEE
00001AEE 46FC 2300                                  move    #$2300, SR
00001AF2                            Wait_For_VSync_Inf_Loop:                                       ; Offset_0x001AF2
00001AF2 4A38 F62A                                  tst.b   (VBlank_Index).w                             ; $FFFFF62A
00001AF6 66FA                                       bne.s   Wait_For_VSync_Inf_Loop                ; Offset_0x001AF2
00001AF8 4E75                                       rts
00001AFA                            ;===============================================================================
00001AFA                            ; Aguarda pela conclus_o do procedimento de interrup__o vertical
00001AFA                            ; <<<-
00001AFA                            ;=============================================================================== 
00001AFA                            
00001AFA                            ;===============================================================================
00001AFA                            ; Gera__o de n_meros pseudo aleat_rios
00001AFA                            ; ->>>
00001AFA                            ;===============================================================================
00001AFA                            PseudoRandomNumber:                                            ; Offset_0x001AFA
00001AFA 2238 F636                                  move.l  (Random_Seed).w, D1                          ; $FFFFF636
00001AFE 6600                                       bne.s   Offset_0x001B06
00001B00 223C 2A6D 365A                             move.l  #$2A6D365A, D1
00001B06                            Offset_0x001B06:
00001B06 2001                                       move.l  D1, D0
00001B08 E581                                       asl.l   #$02, D1
00001B0A D280                                       add.l   D0, D1
00001B0C E781                                       asl.l   #$03, D1
00001B0E D280                                       add.l   D0, D1
00001B10 3001                                       move.w  D1, D0
00001B12 4841                                       swap.w  D1
00001B14 D041                                       add.w   D1, D0
00001B16 3200                                       move.w  D0, D1
00001B18 4841                                       swap.w  D1
00001B1A 21C1 F636                                  move.l  D1, (Random_Seed).w                          ; $FFFFF636
00001B1E 4E75                                       rts 
00001B20                            ;===============================================================================
00001B20                            ; Gera__o de n_meros pseudo aleat_rios
00001B20                            ; <<<-
00001B20                            ;===============================================================================
00001B20                            
00001B20                            ;===============================================================================
00001B20                            ; Rotina para calcular o Seno usando tabela pr_-calculada
00001B20                            ; ->>>
00001B20                            ;===============================================================================   
00001B20                            CalcSine:                                                      ; Offset_0x001B20
00001B20 0240 00FF                                  andi.w  #$00FF, D0
00001B24 D040                                       add.w   D0, D0
00001B26 0640 0080                                  addi.w  #$0080, D0
00001B2A 323B 0000                                  move.w  Sine_Table(PC, D0), D1                 ; Offset_0x001B38
00001B2E 0440 0080                                  subi.w  #$0080, D0
00001B32 303B 0000                                  move.w  Sine_Table(PC, D0), D0                 ; Offset_0x001B38
00001B36 4E75                                       rts 
00001B38                            ;-------------------------------------------------------------------------------
00001B38                            Sine_Table:                                                    ; Offset_0x001B38
00001B38 0000 0006 000C 0012 0019+                  dc.w    $0000, $0006, $000C, $0012, $0019, $001F, $0025, $002B
00001B48 0031 0038 003E 0044 004A+                  dc.w    $0031, $0038, $003E, $0044, $004A, $0050, $0056, $005C
00001B58 0061 0067 006D 0073 0078+                  dc.w    $0061, $0067, $006D, $0073, $0078, $007E, $0083, $0088
00001B68 008E 0093 0098 009D 00A2+                  dc.w    $008E, $0093, $0098, $009D, $00A2, $00A7, $00AB, $00B0
00001B78 00B5 00B9 00BD 00C1 00C5+                  dc.w    $00B5, $00B9, $00BD, $00C1, $00C5, $00C9, $00CD, $00D1
00001B88 00D4 00D8 00DB 00DE 00E1+                  dc.w    $00D4, $00D8, $00DB, $00DE, $00E1, $00E4, $00E7, $00EA
00001B98 00EC 00EE 00F1 00F3 00F4+                  dc.w    $00EC, $00EE, $00F1, $00F3, $00F4, $00F6, $00F8, $00F9
00001BA8 00FB 00FC 00FD 00FE 00FE+                  dc.w    $00FB, $00FC, $00FD, $00FE, $00FE, $00FF, $00FF, $00FF
00001BB8 0100 00FF 00FF 00FF 00FE+                  dc.w    $0100, $00FF, $00FF, $00FF, $00FE, $00FE, $00FD, $00FC
00001BC8 00FB 00F9 00F8 00F6 00F4+                  dc.w    $00FB, $00F9, $00F8, $00F6, $00F4, $00F3, $00F1, $00EE
00001BD8 00EC 00EA 00E7 00E4 00E1+                  dc.w    $00EC, $00EA, $00E7, $00E4, $00E1, $00DE, $00DB, $00D8
00001BE8 00D4 00D1 00CD 00C9 00C5+                  dc.w    $00D4, $00D1, $00CD, $00C9, $00C5, $00C1, $00BD, $00B9
00001BF8 00B5 00B0 00AB 00A7 00A2+                  dc.w    $00B5, $00B0, $00AB, $00A7, $00A2, $009D, $0098, $0093
00001C08 008E 0088 0083 007E 0078+                  dc.w    $008E, $0088, $0083, $007E, $0078, $0073, $006D, $0067
00001C18 0061 005C 0056 0050 004A+                  dc.w    $0061, $005C, $0056, $0050, $004A, $0044, $003E, $0038
00001C28 0031 002B 0025 001F 0019+                  dc.w    $0031, $002B, $0025, $001F, $0019, $0012, $000C, $0006
00001C38 0000 FFFA FFF4 FFEE FFE7+                  dc.w    $0000, $FFFA, $FFF4, $FFEE, $FFE7, $FFE1, $FFDB, $FFD5
00001C48 FFCF FFC8 FFC2 FFBC FFB6+                  dc.w    $FFCF, $FFC8, $FFC2, $FFBC, $FFB6, $FFB0, $FFAA, $FFA4
00001C58 FF9F FF99 FF93 FF8B FF88+                  dc.w    $FF9F, $FF99, $FF93, $FF8B, $FF88, $FF82, $FF7D, $FF78
00001C68 FF72 FF6D FF68 FF63 FF5E+                  dc.w    $FF72, $FF6D, $FF68, $FF63, $FF5E, $FF59, $FF55, $FF50
00001C78 FF4B FF47 FF43 FF3F FF3B+                  dc.w    $FF4B, $FF47, $FF43, $FF3F, $FF3B, $FF37, $FF33, $FF2F
00001C88 FF2C FF28 FF25 FF22 FF1F+                  dc.w    $FF2C, $FF28, $FF25, $FF22, $FF1F, $FF1C, $FF19, $FF16
00001C98 FF14 FF12 FF0F FF0D FF0C+                  dc.w    $FF14, $FF12, $FF0F, $FF0D, $FF0C, $FF0A, $FF08, $FF07
00001CA8 FF05 FF04 FF03 FF02 FF02+                  dc.w    $FF05, $FF04, $FF03, $FF02, $FF02, $FF01, $FF01, $FF01
00001CB8 FF00 FF01 FF01 FF01 FF02+                  dc.w    $FF00, $FF01, $FF01, $FF01, $FF02, $FF02, $FF03, $FF04
00001CC8 FF05 FF07 FF08 FF0A FF0C+                  dc.w    $FF05, $FF07, $FF08, $FF0A, $FF0C, $FF0D, $FF0F, $FF12
00001CD8 FF14 FF16 FF19 FF1C FF1F+                  dc.w    $FF14, $FF16, $FF19, $FF1C, $FF1F, $FF22, $FF25, $FF28
00001CE8 FF2C FF2F FF33 FF37 FF3B+                  dc.w    $FF2C, $FF2F, $FF33, $FF37, $FF3B, $FF3F, $FF43, $FF47
00001CF8 FF4B FF50 FF55 FF59 FF5E+                  dc.w    $FF4B, $FF50, $FF55, $FF59, $FF5E, $FF63, $FF68, $FF6D
00001D08 FF72 FF78 FF7D FF82 FF88+                  dc.w    $FF72, $FF78, $FF7D, $FF82, $FF88, $FF8B, $FF93, $FF99
00001D18 FF9F FFA4 FFAA FFB0 FFB6+                  dc.w    $FF9F, $FFA4, $FFAA, $FFB0, $FFB6, $FFBC, $FFC2, $FFC8
00001D28 FFCF FFD5 FFDB FFE1 FFE7+                  dc.w    $FFCF, $FFD5, $FFDB, $FFE1, $FFE7, $FFEE, $FFF4, $FFFA
00001D38 0000 0006 000C 0012 0019+                  dc.w    $0000, $0006, $000C, $0012, $0019, $001F, $0025, $002B
00001D48 0031 0038 003E 0044 004A+                  dc.w    $0031, $0038, $003E, $0044, $004A, $0050, $0056, $005C
00001D58 0061 0067 006D 0073 0078+                  dc.w    $0061, $0067, $006D, $0073, $0078, $007E, $0083, $0088
00001D68 008E 0093 0098 009D 00A2+                  dc.w    $008E, $0093, $0098, $009D, $00A2, $00A7, $00AB, $00B0
00001D78 00B5 00B9 00BD 00C1 00C5+                  dc.w    $00B5, $00B9, $00BD, $00C1, $00C5, $00C9, $00CD, $00D1
00001D88 00D4 00D8 00DB 00DE 00E1+                  dc.w    $00D4, $00D8, $00DB, $00DE, $00E1, $00E4, $00E7, $00EA
00001D98 00EC 00EE 00F1 00F3 00F4+                  dc.w    $00EC, $00EE, $00F1, $00F3, $00F4, $00F6, $00F8, $00F9
00001DA8 00FB 00FC 00FD 00FE 00FE+                  dc.w    $00FB, $00FC, $00FD, $00FE, $00FE, $00FF, $00FF, $00FF 
00001DB8                            ;===============================================================================
00001DB8                            ; Rotina para calcular o Seno usando tabela pr_-calculada
00001DB8                            ; <<<-
00001DB8                            ;===============================================================================
00001DB8                            
00001DB8                            ;===============================================================================
00001DB8                            ; Rotina para calcular o _ngulo usando tabela pr_-calculada
00001DB8                            ; ->>>
00001DB8                            ;===============================================================================
00001DB8                            CalcAngle:                                                     ; Offset_0x001DB8
00001DB8 48E7 1800                                  movem.l D3/D4, -(A7)
00001DBC 7600                                       moveq   #$00, D3
00001DBE 7800                                       moveq   #$00, D4
00001DC0 3601                                       move.w  D1, D3
00001DC2 3802                                       move.w  D2, D4
00001DC4 8843                                       or.w    D3, D4
00001DC6 6700                                       beq.s   Offset_0x001E0A
00001DC8 3802                                       move.w  D2, D4
00001DCA 4A43                                       tst.w   D3
00001DCC 6A00                                       bpl.s   Offset_0x001DD0
00001DCE 4443                                       neg.w   D3
00001DD0                            Offset_0x001DD0:
00001DD0 4A44                                       tst.w   D4
00001DD2 6A00                                       bpl.s   Offset_0x001DD6
00001DD4 4444                                       neg.w   D4
00001DD6                            Offset_0x001DD6:
00001DD6 B843                                       cmp.w   D3, D4
00001DD8 6400                                       bcc.s   Offset_0x001DE6
00001DDA E18C                                       lsl.l   #$08, D4
00001DDC 88C3                                       divu.w  D3, D4
00001DDE 7000                                       moveq   #$00, D0
00001DE0 103B 4000                                  move.b  Angle_Table(PC, D4), D0                ; Offset_0x001E14
00001DE4 6000                                       bra.s   Offset_0x001DF0
00001DE6                            Offset_0x001DE6:
00001DE6 E18B                                       lsl.l   #$08, D3
00001DE8 86C4                                       divu.w  D4, D3
00001DEA 7040                                       moveq   #$40, D0
00001DEC 903B 3000                                  sub.b   Angle_Table(PC, D3), D0                ; Offset_0x001E14
00001DF0                            Offset_0x001DF0:
00001DF0 4A41                                       tst.w   D1
00001DF2 6A00                                       bpl.s   Offset_0x001DFA
00001DF4 4440                                       neg.w   D0
00001DF6 0640 0080                                  addi.w  #$0080, D0
00001DFA                            Offset_0x001DFA:
00001DFA 4A42                                       tst.w   D2
00001DFC 6A00                                       bpl.s   Offset_0x001E04
00001DFE 4440                                       neg.w   D0
00001E00 0640 0100                                  addi.w  #$0100, D0
00001E04                            Offset_0x001E04:
00001E04 4CDF 0018                                  movem.l (A7)+, D3/D4
00001E08 4E75                                       rts
00001E0A                            Offset_0x001E0A:
00001E0A 303C 0040                                  move.w  #$0040, D0
00001E0E 4CDF 0018                                  movem.l (A7)+, D3/D4
00001E12 4E75                                       rts 
00001E14                            ;-------------------------------------------------------------------------------
00001E14                            Angle_Table:                                                   ; Offset_0x001E14
00001E14 0000 0000 0101 0101                        dc.b    $00, $00, $00, $00, $01, $01, $01, $01
00001E1C 0101 0202 0202 0202                        dc.b    $01, $01, $02, $02, $02, $02, $02, $02
00001E24 0303 0303 0303 0304                        dc.b    $03, $03, $03, $03, $03, $03, $03, $04
00001E2C 0404 0404 0405 0505                        dc.b    $04, $04, $04, $04, $04, $05, $05, $05
00001E34 0505 0506 0606 0606                        dc.b    $05, $05, $05, $06, $06, $06, $06, $06
00001E3C 0606 0707 0707 0707                        dc.b    $06, $06, $07, $07, $07, $07, $07, $07
00001E44 0808 0808 0808 0809                        dc.b    $08, $08, $08, $08, $08, $08, $08, $09
00001E4C 0909 0909 090A 0A0A                        dc.b    $09, $09, $09, $09, $09, $0A, $0A, $0A
00001E54 0A0A 0A0A 0B0B 0B0B                        dc.b    $0A, $0A, $0A, $0A, $0B, $0B, $0B, $0B
00001E5C 0B0B 0B0C 0C0C 0C0C                        dc.b    $0B, $0B, $0B, $0C, $0C, $0C, $0C, $0C
00001E64 0C0C 0D0D 0D0D 0D0D                        dc.b    $0C, $0C, $0D, $0D, $0D, $0D, $0D, $0D
00001E6C 0D0E 0E0E 0E0E 0E0E                        dc.b    $0D, $0E, $0E, $0E, $0E, $0E, $0E, $0E
00001E74 0F0F 0F0F 0F0F 0F10                        dc.b    $0F, $0F, $0F, $0F, $0F, $0F, $0F, $10
00001E7C 1010 1010 1010 1111                        dc.b    $10, $10, $10, $10, $10, $10, $11, $11
00001E84 1111 1111 1111 1212                        dc.b    $11, $11, $11, $11, $11, $11, $12, $12
00001E8C 1212 1212 1213 1313                        dc.b    $12, $12, $12, $12, $12, $13, $13, $13
00001E94 1313 1313 1314 1414                        dc.b    $13, $13, $13, $13, $13, $14, $14, $14
00001E9C 1414 1414 1415 1515                        dc.b    $14, $14, $14, $14, $14, $15, $15, $15
00001EA4 1515 1515 1515 1616                        dc.b    $15, $15, $15, $15, $15, $15, $16, $16
00001EAC 1616 1616 1616 1717                        dc.b    $16, $16, $16, $16, $16, $16, $17, $17
00001EB4 1717 1717 1717 1718                        dc.b    $17, $17, $17, $17, $17, $17, $17, $18
00001EBC 1818 1818 1818 1818                        dc.b    $18, $18, $18, $18, $18, $18, $18, $18
00001EC4 1919 1919 1919 1919                        dc.b    $19, $19, $19, $19, $19, $19, $19, $19
00001ECC 1919 1A1A 1A1A 1A1A                        dc.b    $19, $19, $1A, $1A, $1A, $1A, $1A, $1A
00001ED4 1A1A 1A1B 1B1B 1B1B                        dc.b    $1A, $1A, $1A, $1B, $1B, $1B, $1B, $1B
00001EDC 1B1B 1B1B 1B1C 1C1C                        dc.b    $1B, $1B, $1B, $1B, $1B, $1C, $1C, $1C
00001EE4 1C1C 1C1C 1C1C 1C1C                        dc.b    $1C, $1C, $1C, $1C, $1C, $1C, $1C, $1C
00001EEC 1D1D 1D1D 1D1D 1D1D                        dc.b    $1D, $1D, $1D, $1D, $1D, $1D, $1D, $1D
00001EF4 1D1D 1D1E 1E1E 1E1E                        dc.b    $1D, $1D, $1D, $1E, $1E, $1E, $1E, $1E
00001EFC 1E1E 1E1E 1E1E 1F1F                        dc.b    $1E, $1E, $1E, $1E, $1E, $1E, $1F, $1F
00001F04 1F1F 1F1F 1F1F 1F1F                        dc.b    $1F, $1F, $1F, $1F, $1F, $1F, $1F, $1F
00001F0C 1F1F 2020 2020 2020                        dc.b    $1F, $1F, $20, $20, $20, $20, $20, $20
00001F14 2000                                       dc.b    $20, $00                                                                           
00001F16                            ;===============================================================================
00001F16                            ; Rotina para calcular o _ngulo usando tabela pr_-calculada
00001F16                            ; <<<-
00001F16                            ;===============================================================================
00001F16                            
00001F16                            ;===============================================================================
00001F16                            ; Rotina para execu__o das paletas animadas. Ex: luzes piscando, fogo etc...
00001F16                            ; ->>>        
00001F16                            ;===============================================================================  
00001F16                            PalCycle_Load:                                                 ; Offset_0x001F16
00001F16 6100 0000                                  bsr     PalCycle_SuperSonic                    ; Offset_0x002AB8
00001F1A 7400                                       moveq   #$00, D2
00001F1C 7000                                       moveq   #$00, D0
00001F1E 3038 FE10                                  move.w  (Level_Id).w, D0                             ; $FFFFFE10
00001F22 E218                                       ror.b   #$01, D0
00001F24 EC48                                       lsr.w   #$06, D0
00001F26 303B 0000                                  move.w  PalCycle_Load_List(PC, D0), D0         ; Offset_0x001F30
00001F2A 4EFB 0000                                  jmp     PalCycle_Load_List(PC, D0)             ; Offset_0x001F30
00001F2E 4E75                                       rts
00001F30                            ;-------------------------------------------------------------------------------
00001F30                            PalCycle_Load_List:                                            ; Offset_0x001F30
00001F30 0000                                       dc.w    PalCycle_AIz_1-PalCycle_Load_List      ; Offset_0x001F92
00001F32 0000                                       dc.w    PalCycle_AIz_2-PalCycle_Load_List      ; Offset_0x00204A
00001F34 0000                                       dc.w    PalCycle_Hz_1-PalCycle_Load_List       ; Offset_0x002102
00001F36 0000                                       dc.w    PalCycle_Hz_2-PalCycle_Load_List       ; Offset_0x002150
00001F38 0000                                       dc.w    PalCycle_MGz_1-PalCycle_Load_List      ; Offset_0x001F90
00001F3A 0000                                       dc.w    PalCycle_MGz_2-PalCycle_Load_List      ; Offset_0x001F90
00001F3C 0000                                       dc.w    PalCycle_CNz_1-PalCycle_Load_List      ; Offset_0x002152
00001F3E 0000                                       dc.w    PalCycle_CNz_2-PalCycle_Load_List      ; Offset_0x002152
00001F40 0000                                       dc.w    PalCycle_FBz_1-PalCycle_Load_List      ; Offset_0x0021DE
00001F42 0000                                       dc.w    PalCycle_FBz_2-PalCycle_Load_List      ; Offset_0x0021DE
00001F44 0000                                       dc.w    PalCycle_Iz_1-PalCycle_Load_List       ; Offset_0x0021E0
00001F46 0000                                       dc.w    PalCycle_Iz_2-PalCycle_Load_List       ; Offset_0x0021E0
00001F48 0000                                       dc.w    PalCycle_LBz_1-PalCycle_Load_List      ; Offset_0x00229A
00001F4A 0000                                       dc.w    PalCycle_LBz_2-PalCycle_Load_List      ; Offset_0x0022A2
00001F4C 0000                                       dc.w    PalCycle_MVz_1-PalCycle_Load_List      ; Offset_0x001F90
00001F4E 0000                                       dc.w    PalCycle_MVz_2-PalCycle_Load_List      ; Offset_0x001F90
00001F50 0000                                       dc.w    PalCycle_Sz_1-PalCycle_Load_List       ; Offset_0x001F90
00001F52 0000                                       dc.w    PalCycle_Sz_2-PalCycle_Load_List       ; Offset_0x001F90
00001F54 0000                                       dc.w    PalCycle_LRz_1-PalCycle_Load_List      ; Offset_0x0022D8
00001F56 0000                                       dc.w    PalCycle_LRz_2-PalCycle_Load_List      ; Offset_0x002330
00001F58 0000                                       dc.w    PalCycle_SSz_1-PalCycle_Load_List      ; Offset_0x001F90
00001F5A 0000                                       dc.w    PalCycle_SSz_2-PalCycle_Load_List      ; Offset_0x001F90
00001F5C 0000                                       dc.w    PalCycle_DEz_1-PalCycle_Load_List      ; Offset_0x001F90
00001F5E 0000                                       dc.w    PalCycle_DEz_2-PalCycle_Load_List      ; Offset_0x001F90
00001F60 0000                                       dc.w    PalCycle_TDz_1-PalCycle_Load_List      ; Offset_0x001F90
00001F62 0000                                       dc.w    PalCycle_TDz_2-PalCycle_Load_List      ; Offset_0x001F90
00001F64 0000                                       dc.w    PalCycle_End_Seq_1-PalCycle_Load_List  ; Offset_0x001F90
00001F66 0000                                       dc.w    PalCycle_End_Seq_2-PalCycle_Load_List  ; Offset_0x001F90
00001F68 0000                                       dc.w    PalCycle_ALz_1-PalCycle_Load_List      ; Offset_0x001F90
00001F6A 0000                                       dc.w    PalCycle_ALz_2-PalCycle_Load_List      ; Offset_0x001F90
00001F6C 0000                                       dc.w    PalCycle_BPz_1-PalCycle_Load_List      ; Offset_0x002332
00001F6E 0000                                       dc.w    PalCycle_BPz_2-PalCycle_Load_List      ; Offset_0x002332
00001F70 0000                                       dc.w    PalCycle_DPz_1-PalCycle_Load_List      ; Offset_0x001F90
00001F72 0000                                       dc.w    PalCycle_DPz_2-PalCycle_Load_List      ; Offset_0x001F90
00001F74 0000                                       dc.w    PalCycle_CGz_1-PalCycle_Load_List      ; Offset_0x00239C
00001F76 0000                                       dc.w    PalCycle_CGz_2-PalCycle_Load_List      ; Offset_0x00239C
00001F78 0000                                       dc.w    PalCycle_EMz_1-PalCycle_Load_List      ; Offset_0x0023D2
00001F7A 0000                                       dc.w    PalCycle_EMz_2-PalCycle_Load_List      ; Offset_0x0023D2
00001F7C 0000                                       dc.w    PalCycle_BS_GM_1-PalCycle_Load_List    ; Offset_0x001F90
00001F7E 0000                                       dc.w    PalCycle_BS_GM_2-PalCycle_Load_List    ; Offset_0x001F90
00001F80 0000                                       dc.w    PalCycle_BS_GS_1-PalCycle_Load_List    ; Offset_0x001F90
00001F82 0000                                       dc.w    PalCycle_BS_GS_2-PalCycle_Load_List    ; Offset_0x001F90
00001F84 0000                                       dc.w    PalCycle_BS_SM_1-PalCycle_Load_List    ; Offset_0x001F90
00001F86 0000                                       dc.w    PalCycle_BS_SM_2-PalCycle_Load_List    ; Offset_0x001F90
00001F88 0000                                       dc.w    PalCycle_LRz_Boss-PalCycle_Load_List   ; Offset_0x001F90
00001F8A 0000                                       dc.w    PalCycle_HPz-PalCycle_Load_List        ; Offset_0x001F90
00001F8C 0000                                       dc.w    PalCycle_DEz_Boss-PalCycle_Load_List   ; Offset_0x001F90
00001F8E 0000                                       dc.w    PalCycle_HPz_Portal-PalCycle_Load_List ; Offset_0x001F90
00001F90                            ;-------------------------------------------------------------------------------
00001F90                            PalCycle_MGz_1:                                                ; Offset_0x001F90
00001F90                            PalCycle_MGz_2:
00001F90                            PalCycle_MVz_1:
00001F90                            PalCycle_MVz_2:
00001F90                            PalCycle_Sz_1:
00001F90                            PalCycle_Sz_2:
00001F90                            PalCycle_SSz_1:
00001F90                            PalCycle_SSz_2:
00001F90                            PalCycle_DEz_1:
00001F90                            PalCycle_DEz_2:
00001F90                            PalCycle_TDz_1:
00001F90                            PalCycle_TDz_2:
00001F90                            PalCycle_End_Seq_1:
00001F90                            PalCycle_End_Seq_2:
00001F90                            PalCycle_ALz_1:
00001F90                            PalCycle_ALz_2:
00001F90                            PalCycle_DPz_1:    
00001F90                            PalCycle_DPz_2:
00001F90                            PalCycle_BS_GM_1:
00001F90                            PalCycle_BS_GM_2:
00001F90                            PalCycle_BS_GS_1:
00001F90                            PalCycle_BS_GS_2:
00001F90                            PalCycle_BS_SM_1:
00001F90                            PalCycle_BS_SM_2:
00001F90                            PalCycle_LRz_Boss:
00001F90                            PalCycle_HPz:
00001F90                            PalCycle_DEz_Boss:
00001F90                            PalCycle_HPz_Portal:
00001F90 4E75                                       rts
00001F92                            ;-------------------------------------------------------------------------------
00001F92                            PalCycle_AIz_1:                                                ; Offset_0x001F92
00001F92 1038 F72E                                  move.b  (Palette_Cycle_Flag).w, D0                   ; $FFFFF72E
00001F96 6700                                       beq.s   Offset_0x001FEC
00001F98 5378 F634                                  subq.w  #$01, (Palette_Cycle_Count_1).w              ; $FFFFF634
00001F9C 6A00                                       bpl.s   Offset_0x001FEA
00001F9E 31FC 0007 F634                             move.w  #$0007, (Palette_Cycle_Count_1).w            ; $FFFFF634
00001FA4 3038 F632                                  move.w  (Palette_Cycle_Count_0).w, D0                ; $FFFFF632
00001FA8 5078 F632                                  addq.w  #$08, (Palette_Cycle_Count_0).w              ; $FFFFF632
00001FAC 0240 0018                                  andi.w  #$0018, D0
00001FB0 41F9 0000 0000                             lea     (Pal_AIz1_Cyc1), A0                    ; Offset_0x002430
00001FB6 21F0 0000 ED56                             move.l  $00(A0, D0), (Palette_Row_2_Offset+$16).w    ; $FFFFED56
00001FBC 21F0 0004 ED5A                             move.l  $04(A0, D0), (Palette_Row_2_Offset+$1A).w    ; $FFFFED5A
00001FC2 3038 F652                                  move.w  (Palette_Cycle_Counters+$02).w, D0           ; $FFFFF652
00001FC6 5C78 F652                                  addq.w  #$06, (Palette_Cycle_Counters+$02).w         ; $FFFFF652
00001FCA 0C78 0030 F652                             cmpi.w  #$0030, (Palette_Cycle_Counters+$02).w       ; $FFFFF652
00001FD0 6500                                       bcs.s   Offset_0x001FD8
00001FD2 31FC 0000 F652                             move.w  #$0000, (Palette_Cycle_Counters+$02).w       ; $FFFFF652
00001FD8                            Offset_0x001FD8:
00001FD8 41F9 0000 0000                             lea     (Pal_AIz1_Cyc4), A0                    ; Offset_0x002530
00001FDE 21F0 0000 ED78                             move.l  $00(A0, D0), (Palette_Row_3_Offset+$18).w    ; $FFFFED78
00001FE4 31F0 0004 ED7C                             move.w  $04(A0, D0), (Palette_Row_3_Offset+$1C).w    ; $FFFFED7C
00001FEA                            Offset_0x001FEA:
00001FEA 4E75                                       rts
00001FEC                            Offset_0x001FEC:
00001FEC 5378 F634                                  subq.w  #$01, (Palette_Cycle_Count_1).w              ; $FFFFF634
00001FF0 6A00                                       bpl.s   Offset_0x002048
00001FF2 31FC 0009 F634                             move.w  #$0009, (Palette_Cycle_Count_1).w            ; $FFFFF634
00001FF8 3038 F632                                  move.w  (Palette_Cycle_Count_0).w, D0                ; $FFFFF632
00001FFC 5078 F632                                  addq.w  #$08, (Palette_Cycle_Count_0).w              ; $FFFFF632
00002000 0C78 0050 F632                             cmpi.w  #$0050, (Palette_Cycle_Count_0).w            ; $FFFFF632
00002006 6500                                       bcs.s   Offset_0x00200E
00002008 31FC 0000 F632                             move.w  #$0000, (Palette_Cycle_Count_0).w            ; $FFFFF632
0000200E                            Offset_0x00200E:
0000200E 41F9 0000 0000                             lea     (Pal_AIz1_Cyc2), A0                    ; Offset_0x002450
00002014 21F0 0000 ED64                             move.l  $00(A0, D0), (Palette_Row_3_Offset+$04).w    ; $FFFFED64
0000201A 21F0 0004 ED68                             move.l  $04(A0, D0), (Palette_Row_3_Offset+$08).w    ; $FFFFED68
00002020 3038 F652                                  move.w  (Palette_Cycle_Counters+$02).w, D0           ; $FFFFF652
00002024 5C78 F652                                  addq.w  #$06, (Palette_Cycle_Counters+$02).w         ; $FFFFF652
00002028 0C78 003C F652                             cmpi.w  #$003C, (Palette_Cycle_Counters+$02).w       ; $FFFFF652
0000202E 6500                                       bcs.s   Offset_0x002036
00002030 31FC 0000 F652                             move.w  #$0000, (Palette_Cycle_Counters+$02).w       ; $FFFFF652
00002036                            Offset_0x002036:
00002036 41F9 0000 0000                             lea     (Pal_AIz1_Cyc3), A0                    ; Offset_0x0024D0
0000203C 21F0 0000 ED7A                             move.l  $00(A0, D0), (Palette_Row_3_Offset+$1A).w    ; $FFFFED7A
00002042 31F0 0004 ED7E                             move.w  $04(A0, D0), (Palette_Row_3_Offset+$1E).w    ; $FFFFED7E
00002048                            Offset_0x002048:
00002048 4E75                                       rts         
0000204A                            ;-------------------------------------------------------------------------------
0000204A                            PalCycle_AIz_2:                                                ; Offset_0x00204A
0000204A 5378 F634                                  subq.w  #$01, (Palette_Cycle_Count_1).w              ; $FFFFF634
0000204E 6A00                                       bpl.s   Offset_0x0020C4
00002050 31FC 0005 F634                             move.w  #$0005, (Palette_Cycle_Count_1).w            ; $FFFFF634
00002056 3038 F632                                  move.w  (Palette_Cycle_Count_0).w, D0                ; $FFFFF632
0000205A 5078 F632                                  addq.w  #$08, (Palette_Cycle_Count_0).w              ; $FFFFF632
0000205E 0240 0018                                  andi.w  #$0018, D0
00002062 41F9 0000 0000                             lea     (Pal_AIz2_Cyc1), A0                    ; Offset_0x002560
00002068 21F0 0000 ED78                             move.l  $00(A0, D0), (Palette_Row_3_Offset+$18).w    ; $FFFFED78
0000206E 21F0 0004 ED7C                             move.l  $04(A0, D0), (Palette_Row_3_Offset+$1C).w    ; $FFFFED7C
00002074 3038 F652                                  move.w  (Palette_Cycle_Counters+$02).w, D0           ; $FFFFF652
00002078 5C78 F652                                  addq.w  #$06, (Palette_Cycle_Counters+$02).w         ; $FFFFF652
0000207C 0C78 0030 F652                             cmpi.w  #$0030, (Palette_Cycle_Counters+$02).w       ; $FFFFF652
00002082 6500                                       bcs.s   Offset_0x00208A
00002084 31FC 0000 F652                             move.w  #$0000, (Palette_Cycle_Counters+$02).w       ; $FFFFF652
0000208A                            Offset_0x00208A:
0000208A 41F9 0000 0000                             lea     (Pal_AIz2_Cyc2), A0                    ; Offset_0x002580
00002090 0C78 3800 EE78                             cmpi.w  #$3800, (Camera_X).w                         ; $FFFFEE78
00002096 6500                                       bcs.s   Offset_0x00209E
00002098 41F9 0000 0000                             lea     (Pal_AIz2_Cyc3), A0                    ; Offset_0x0025B0
0000209E                            Offset_0x00209E:
0000209E 31F0 0000 ED48                             move.w  $00(A0, D0), (Palette_Row_2_Offset+$08).w    ; $FFFFED48
000020A4 31F0 0002 ED50                             move.w  $02(A0, D0), (Palette_Row_2_Offset+$10).w    ; $FFFFED50
000020AA 31F0 0004 ED76                             move.w  $04(A0, D0), (Palette_Row_3_Offset+$16).w    ; $FFFFED76
000020B0 31FC 0A0E ED5C                             move.w  #$0A0E, (Palette_Row_2_Offset+$1C).w         ; $FFFFED5C
000020B6 0C78 01C0 EE78                             cmpi.w  #$01C0, (Camera_X).w                         ; $FFFFEE78
000020BC 6400                                       bcc.s   Offset_0x0020C4
000020BE 31F0 0004 ED5C                             move.w  $04(A0, D0), (Palette_Row_2_Offset+$1C).w    ; $FFFFED5C
000020C4                            Offset_0x0020C4:
000020C4 5378 F658                                  subq.w  #$01, (Palette_Cycle_Counters+$08).w         ; $FFFFF658
000020C8 6A00                                       bpl.s   Offset_0x002100
000020CA 31FC 0001 F658                             move.w  #$0001, (Palette_Cycle_Counters+$08).w       ; $FFFFF658
000020D0 3038 F654                                  move.w  (Palette_Cycle_Counters+$04).w, D0           ; $FFFFF654
000020D4 5478 F654                                  addq.w  #$02, (Palette_Cycle_Counters+$04).w         ; $FFFFF654
000020D8 0C78 0034 F654                             cmpi.w  #$0034, (Palette_Cycle_Counters+$04).w       ; $FFFFF654
000020DE 6500                                       bcs.s   Offset_0x0020E6
000020E0 31FC 0000 F654                             move.w  #$0000, (Palette_Cycle_Counters+$04).w       ; $FFFFF654
000020E6                            Offset_0x0020E6:
000020E6 41F9 0000 0000                             lea     (Pal_AIz2_Cyc4), A0                    ; Offset_0x0025E0
000020EC 0C78 3800 EE78                             cmpi.w  #$3800, (Camera_X).w                         ; $FFFFEE78
000020F2 6500                                       bcs.s   Offset_0x0020FA
000020F4 41F9 0000 0000                             lea     (Pal_AIz2_Cyc5), A0                    ; Offset_0x002614
000020FA                            Offset_0x0020FA:
000020FA 31F0 0000 ED62                             move.w  $00(A0, D0), (Palette_Row_3_Offset+$02).w    ; $FFFFED62
00002100                            Offset_0x002100:
00002100 4E75                                       rts     
00002102                            ;-------------------------------------------------------------------------------
00002102                            PalCycle_Hz_1:                                                 ; Offset_0x002102
00002102 5378 F634                                  subq.w  #$01, (Palette_Cycle_Count_1).w              ; $FFFFF634
00002106 6A00                                       bpl.s   Offset_0x00214E
00002108 31FC 0007 F634                             move.w  #$0007, (Palette_Cycle_Count_1).w            ; $FFFFF634
0000210E 4A38 F650                                  tst.b   (Palette_Cycle_Counters).w                   ; $FFFFF650
00002112 6700                                       beq.s   Offset_0x00211A
00002114 31FC 0000 F634                             move.w  #$0000, (Palette_Cycle_Count_1).w            ; $FFFFF634
0000211A                            Offset_0x00211A:
0000211A 41F9 0000 0000                             lea     (Pal_Hz1_Cyc), A0                      ; Offset_0x002648
00002120 3038 F632                                  move.w  (Palette_Cycle_Count_0).w, D0                ; $FFFFF632
00002124 5078 F632                                  addq.w  #$08, (Palette_Cycle_Count_0).w              ; $FFFFF632
00002128 0C78 0020 F632                             cmpi.w  #$0020, (Palette_Cycle_Count_0).w            ; $FFFFF632
0000212E 6500                                       bcs.s   Offset_0x002136
00002130 31FC 0000 F632                             move.w  #$0000, (Palette_Cycle_Count_0).w            ; $FFFFF632
00002136                            Offset_0x002136:
00002136 21F0 0000 ED46                             move.l  $00(A0, D0), (Palette_Row_2_Offset+$06).w    ; $FFFFED46
0000213C 21F0 0004 ED4A                             move.l  $04(A0, D0), (Palette_Row_2_Offset+$0A).w    ; $FFFFED4A
00002142 21F0 0000 F0C6                             move.l  $00(A0, D0), (Palette_UW_Row_2_Offset+$06).w ; $FFFFF0C6
00002148 21F0 0004 F0CA                             move.l  $04(A0, D0), (Palette_UW_Row_2_Offset+$0A).w ; $FFFFF0CA
0000214E                            Offset_0x00214E:
0000214E 4E75                                       rts 
00002150                            ;-------------------------------------------------------------------------------
00002150                            PalCycle_Hz_2:                                                 ; Offset_0x002150
00002150 4E75                                       rts             
00002152                            ;-------------------------------------------------------------------------------
00002152                            PalCycle_CNz_1:                                                ; Offset_0x002152
00002152                            PalCycle_CNz_2:  
00002152 5378 F634                                  subq.w  #$01, (Palette_Cycle_Count_1).w              ; $FFFFF634
00002156 6A00                                       bpl.s   Offset_0x002186
00002158 31FC 0003 F634                             move.w  #$0003, (Palette_Cycle_Count_1).w            ; $FFFFF634
0000215E 41F9 0000 0000                             lea     (Pal_CNz_Cyc1), A0                     ; Offset_0x002668
00002164 3038 F632                                  move.w  (Palette_Cycle_Count_0).w, D0                ; $FFFFF632
00002168 5C78 F632                                  addq.w  #$06, (Palette_Cycle_Count_0).w              ; $FFFFF632
0000216C 0C78 0060 F632                             cmpi.w  #$0060, (Palette_Cycle_Count_0).w            ; $FFFFF632
00002172 6500                                       bcs.s   Offset_0x00217A
00002174 31FC 0000 F632                             move.w  #$0000, (Palette_Cycle_Count_0).w            ; $FFFFF632
0000217A                            Offset_0x00217A:
0000217A 21F0 0000 ED72                             move.l  $00(A0, D0), (Palette_Row_3_Offset+$12).w    ; $FFFFED72
00002180 31F0 0004 ED76                             move.w  $04(A0, D0), (Palette_Row_3_Offset+$16).w    ; $FFFFED76
00002186                            Offset_0x002186:
00002186 41F9 0000 0000                             lea     (Pal_CNz_Cyc2), A0                     ; Offset_0x0026C8
0000218C 3038 F652                                  move.w  (Palette_Cycle_Counters+$02).w, D0           ; $FFFFF652
00002190 5C78 F652                                  addq.w  #$06, (Palette_Cycle_Counters+$02).w         ; $FFFFF652
00002194 0C78 00B4 F652                             cmpi.w  #$00B4, (Palette_Cycle_Counters+$02).w       ; $FFFFF652
0000219A 6500                                       bcs.s   Offset_0x0021A2
0000219C 31FC 0000 F652                             move.w  #$0000, (Palette_Cycle_Counters+$02).w       ; $FFFFF652
000021A2                            Offset_0x0021A2:
000021A2 21F0 0000 ED52                             move.l  $00(A0, D0), (Palette_Row_2_Offset+$12).w    ; $FFFFED52
000021A8 31F0 0004 ED56                             move.w  $04(A0, D0), (Palette_Row_2_Offset+$16).w    ; $FFFFED56
000021AE 5378 F658                                  subq.w  #$01, (Palette_Cycle_Counters+$08).w         ; $FFFFF658
000021B2 6A00                                       bpl.s   Offset_0x0021DC
000021B4 31FC 0002 F658                             move.w  #$0002, (Palette_Cycle_Counters+$08).w       ; $FFFFF658
000021BA 41F9 0000 0000                             lea     (Pal_CNz_Cyc3), A0                     ; Offset_0x00277C
000021C0 3038 F654                                  move.w  (Palette_Cycle_Counters+$04).w, D0           ; $FFFFF654
000021C4 5878 F654                                  addq.w  #$04, (Palette_Cycle_Counters+$04).w         ; $FFFFF654
000021C8 0C78 0040 F654                             cmpi.w  #$0040, (Palette_Cycle_Counters+$04).w       ; $FFFFF654
000021CE 6500                                       bcs.s   Offset_0x0021D6
000021D0 31FC 0000 F654                             move.w  #$0000, (Palette_Cycle_Counters+$04).w       ; $FFFFF654
000021D6                            Offset_0x0021D6:
000021D6 21F0 0000 ED4E                             move.l  $00(A0, D0), (Palette_Row_2_Offset+$0E).w    ; $FFFFED4E
000021DC                            Offset_0x0021DC:
000021DC 4E75                                       rts    
000021DE                            ;-------------------------------------------------------------------------------
000021DE                            PalCycle_FBz_1:                                                ; Offset_0x0021DE
000021DE                            PalCycle_FBz_2: 
000021DE 4E75                                       rts
000021E0                            ;-------------------------------------------------------------------------------
000021E0                            PalCycle_Iz_1:                                                 ; Offset_0x0021E0
000021E0                            PalCycle_Iz_2:
000021E0 5378 F634                                  subq.w  #$01, (Palette_Cycle_Count_1).w              ; $FFFFF634
000021E4 6A00                                       bpl.s   Offset_0x00220E
000021E6 31FC 0005 F634                             move.w  #$0005, (Palette_Cycle_Count_1).w            ; $FFFFF634
000021EC 41F9 0000 0000                             lea     (Pal_Iz_Cyc1), A0                      ; Offset_0x0027BC
000021F2 3038 F632                                  move.w  (Palette_Cycle_Count_0).w, D0                ; $FFFFF632
000021F6 5878 F632                                  addq.w  #$04, (Palette_Cycle_Count_0).w              ; $FFFFF632
000021FA 0C78 0040 F632                             cmpi.w  #$0040, (Palette_Cycle_Count_0).w            ; $FFFFF632
00002200 6500                                       bcs.s   Offset_0x002208
00002202 31FC 0000 F632                             move.w  #$0000, (Palette_Cycle_Count_0).w            ; $FFFFF632
00002208                            Offset_0x002208:
00002208 21F0 0000 ED5C                             move.l  $00(A0, D0), (Palette_Row_2_Offset+$1C).w    ; $FFFFED5C
0000220E                            Offset_0x00220E:
0000220E 5378 F658                                  subq.w  #$01, (Palette_Cycle_Counters+$08).w         ; $FFFFF658
00002212 6A00                                       bpl.s   Offset_0x002242
00002214 31FC 0009 F658                             move.w  #$0009, (Palette_Cycle_Counters+$08).w       ; $FFFFF658
0000221A 41F9 0000 0000                             lea     (Pal_Iz_Cyc2), A0                      ; Offset_0x0027FC
00002220 3038 F652                                  move.w  (Palette_Cycle_Counters+$02).w, D0           ; $FFFFF652
00002224 5878 F652                                  addq.w  #$04, (Palette_Cycle_Counters+$02).w         ; $FFFFF652
00002228 0C78 0048 F652                             cmpi.w  #$0048, (Palette_Cycle_Counters+$02).w       ; $FFFFF652
0000222E 6500                                       bcs.s   Offset_0x002236
00002230 31FC 0000 F652                             move.w  #$0000, (Palette_Cycle_Counters+$02).w       ; $FFFFF652
00002236                            Offset_0x002236:
00002236 4A78 EEE8                                  tst.w   (Background_Events+$16).w                    ; $FFFFEEE8
0000223A 6700                                       beq.s   Offset_0x002242
0000223C 21F0 0000 ED7C                             move.l  $00(A0, D0), (Palette_Row_3_Offset+$1C).w    ; $FFFFED7C
00002242                            Offset_0x002242:
00002242 5378 F65A                                  subq.w  #$01, (Palette_Cycle_Counters+$0A).w         ; $FFFFF65A
00002246 6A00                                       bpl.s   Offset_0x002298
00002248 31FC 0007 F65A                             move.w  #$0007, (Palette_Cycle_Counters+$0A).w       ; $FFFFF65A
0000224E 41F9 0000 0000                             lea     (Pal_Iz_Cyc3), A0                      ; Offset_0x002844
00002254 3038 F654                                  move.w  (Palette_Cycle_Counters+$04).w, D0           ; $FFFFF654
00002258 5878 F654                                  addq.w  #$04, (Palette_Cycle_Counters+$04).w         ; $FFFFF654
0000225C 0C78 0018 F654                             cmpi.w  #$0018, (Palette_Cycle_Counters+$04).w       ; $FFFFF654
00002262 6500                                       bcs.s   Offset_0x00226A
00002264 31FC 0000 F654                             move.w  #$0000, (Palette_Cycle_Counters+$04).w       ; $FFFFF654
0000226A                            Offset_0x00226A:
0000226A 4A78 EEE8                                  tst.w   (Background_Events+$16).w                    ; $FFFFEEE8
0000226E 6700                                       beq.s   Offset_0x002276
00002270 21F0 0000 ED78                             move.l  $00(A0, D0), (Palette_Row_3_Offset+$18).w    ; $FFFFED78
00002276                            Offset_0x002276:
00002276 41F9 0000 0000                             lea     (Pal_Iz_Cyc4), A0                      ; Offset_0x00285C
0000227C 3038 F656                                  move.w  (Palette_Cycle_Counters+$06).w, D0           ; $FFFFF656
00002280 5878 F656                                  addq.w  #$04, (Palette_Cycle_Counters+$06).w         ; $FFFFF656
00002284 0C78 0040 F656                             cmpi.w  #$0040, (Palette_Cycle_Counters+$06).w       ; $FFFFF656
0000228A 6500                                       bcs.s   Offset_0x002292
0000228C 31FC 0000 F656                             move.w  #$0000, (Palette_Cycle_Counters+$06).w       ; $FFFFF656
00002292                            Offset_0x002292:
00002292 21F0 0000 ED58                             move.l  $00(A0, D0), (Palette_Row_2_Offset+$18).w    ; $FFFFED58
00002298                            Offset_0x002298:
00002298 4E75                                       rts    
0000229A                            ;-------------------------------------------------------------------------------
0000229A                            PalCycle_LBz_1:                                                ; Offset_0x00229A
0000229A 41F9 0000 0000                             lea     (Pal_LBz1_Cyc), A0                     ; Offset_0x00289C
000022A0 6000                                       bra.s   PalCycle_LBz_Main                      ; Offset_0x0022A8            
000022A2                            ;-------------------------------------------------------------------------------
000022A2                            PalCycle_LBz_2:                                                ; Offset_0x0022A2
000022A2 41F9 0000 0000                             lea     (Pal_LBz2_Cyc), A0                     ; Offset_0x0028AE
000022A8                            PalCycle_LBz_Main:                
000022A8 5378 F634                                  subq.w  #$01, (Palette_Cycle_Count_1).w              ; $FFFFF634
000022AC 6A00                                       bpl.s   Offset_0x0022D6
000022AE 31FC 0003 F634                             move.w  #$0003, (Palette_Cycle_Count_1).w            ; $FFFFF634
000022B4 3038 F632                                  move.w  (Palette_Cycle_Count_0).w, D0                ; $FFFFF632
000022B8 5C78 F632                                  addq.w  #$06, (Palette_Cycle_Count_0).w              ; $FFFFF632
000022BC 0C78 0012 F632                             cmpi.w  #$0012, (Palette_Cycle_Count_0).w            ; $FFFFF632
000022C2 6500                                       bcs.s   Offset_0x0022CA
000022C4 31FC 0000 F632                             move.w  #$0000, (Palette_Cycle_Count_0).w            ; $FFFFF632
000022CA                            Offset_0x0022CA:
000022CA 21F0 0000 ED50                             move.l  $00(A0, D0), (Palette_Row_2_Offset+$10).w    ; $FFFFED50
000022D0 31F0 0004 ED54                             move.w  $04(A0, D0), (Palette_Row_2_Offset+$14).w    ; $FFFFED54
000022D6                            Offset_0x0022D6:
000022D6 4E75                                       rts  
000022D8                            ;-------------------------------------------------------------------------------
000022D8                            PalCycle_LRz_1:                                                ; Offset_0x0022D8
000022D8 5378 F634                                  subq.w  #$01, (Palette_Cycle_Count_1).w              ; $FFFFF634
000022DC 6A00                                       bpl.s   Offset_0x00232E
000022DE 31FC 000F F634                             move.w  #$000F, (Palette_Cycle_Count_1).w            ; $FFFFF634
000022E4 3038 F632                                  move.w  (Palette_Cycle_Count_0).w, D0                ; $FFFFF632
000022E8 5078 F632                                  addq.w  #$08, (Palette_Cycle_Count_0).w              ; $FFFFF632
000022EC 0C78 0080 F632                             cmpi.w  #$0080, (Palette_Cycle_Count_0).w            ; $FFFFF632
000022F2 6500                                       bcs.s   Offset_0x0022FA
000022F4 31FC 0000 F632                             move.w  #$0000, (Palette_Cycle_Count_0).w            ; $FFFFF632
000022FA                            Offset_0x0022FA:
000022FA 41F9 0000 0000                             lea     (Pal_LRz1_Cyc1), A0                    ; Offset_0x0028C0
00002300 21F0 0000 ED42                             move.l  $00(A0, D0), (Palette_Row_2_Offset+$02).w    ; $FFFFED42
00002306 21F0 0004 ED46                             move.l  $04(A0, D0), (Palette_Row_2_Offset+$06).w    ; $FFFFED46
0000230C 3038 F652                                  move.w  (Palette_Cycle_Counters+$02).w, D0           ; $FFFFF652
00002310 5878 F652                                  addq.w  #$04, (Palette_Cycle_Counters+$02).w         ; $FFFFF652
00002314 0C78 001C F652                             cmpi.w  #$001C, (Palette_Cycle_Counters+$02).w       ; $FFFFF652
0000231A 6500                                       bcs.s   Offset_0x002322
0000231C 31FC 0000 F652                             move.w  #$0000, (Palette_Cycle_Counters+$02).w       ; $FFFFF652
00002322                            Offset_0x002322:
00002322 41F9 0000 0000                             lea     (Pal_LRz1_Cyc2), A0                    ; Offset_0x002940
00002328 21F0 0000 ED62                             move.l  $00(A0, D0), (Palette_Row_3_Offset+$02).w    ; $FFFFED62
0000232E                            Offset_0x00232E:
0000232E 4E75                                       rts      
00002330                            ;-------------------------------------------------------------------------------
00002330                            PalCycle_LRz_2:                                                ; Offset_0x002330
00002330 4E75                                       rts      
00002332                            ;-------------------------------------------------------------------------------
00002332                            PalCycle_BPz_1:                                                ; Offset_0x002332
00002332                            PalCycle_BPz_2:
00002332 5378 F634                                  subq.w  #$01, (Palette_Cycle_Count_1).w              ; $FFFFF634
00002336 6A00                                       bpl.s   Offset_0x002366
00002338 31FC 0007 F634                             move.w  #$0007, (Palette_Cycle_Count_1).w            ; $FFFFF634
0000233E 41F9 0000 0000                             lea     (Pal_BPz_Cyc1), A0                     ; Offset_0x002964
00002344 3038 F632                                  move.w  (Palette_Cycle_Count_0).w, D0                ; $FFFFF632
00002348 5C78 F632                                  addq.w  #$06, (Palette_Cycle_Count_0).w              ; $FFFFF632
0000234C 0C78 0012 F632                             cmpi.w  #$0012, (Palette_Cycle_Count_0).w            ; $FFFFF632
00002352 6500                                       bcs.s   Offset_0x00235A
00002354 31FC 0000 F632                             move.w  #$0000, (Palette_Cycle_Count_0).w            ; $FFFFF632
0000235A                            Offset_0x00235A:
0000235A 21F0 0000 ED5A                             move.l  $00(A0, D0), (Palette_Row_2_Offset+$1A).w    ; $FFFFED5A
00002360 31F0 0004 ED5E                             move.w  $04(A0, D0), (Palette_Row_2_Offset+$1E).w    ; $FFFFED5E
00002366                            Offset_0x002366:
00002366 5378 F658                                  subq.w  #$01, (Palette_Cycle_Counters+$08).w         ; $FFFFF658
0000236A 6A00                                       bpl.s   Offset_0x00239A
0000236C 31FC 0011 F658                             move.w  #$0011, (Palette_Cycle_Counters+$08).w       ; $FFFFF658
00002372 41F9 0000 0000                             lea     (Pal_BPz_Cyc2), A0                     ; Offset_0x002976
00002378 3038 F652                                  move.w  (Palette_Cycle_Counters+$02).w, D0           ; $FFFFF652
0000237C 5C78 F652                                  addq.w  #$06, (Palette_Cycle_Counters+$02).w         ; $FFFFF652
00002380 0C78 007E F652                             cmpi.w  #$007E, (Palette_Cycle_Counters+$02).w       ; $FFFFF652
00002386 6500                                       bcs.s   Offset_0x00238E
00002388 31FC 0000 F652                             move.w  #$0000, (Palette_Cycle_Counters+$02).w       ; $FFFFF652
0000238E                            Offset_0x00238E:
0000238E 21F0 0000 ED64                             move.l  $00(A0, D0), (Palette_Row_3_Offset+$04).w    ; $FFFFED64
00002394 31F0 0004 ED68                             move.w  $04(A0, D0), (Palette_Row_3_Offset+$08).w    ; $FFFFED68
0000239A                            Offset_0x00239A:
0000239A 4E75                                       rts 
0000239C                            ;-------------------------------------------------------------------------------
0000239C                            PalCycle_CGz_1:                                                ; Offset_0x00239C
0000239C                            PalCycle_CGz_2:
0000239C 5378 F634                                  subq.w  #$01, (Palette_Cycle_Count_1).w              ; $FFFFF634
000023A0 6A00                                       bpl.s   Offset_0x0023D0
000023A2 31FC 0009 F634                             move.w  #$0009, (Palette_Cycle_Count_1).w            ; $FFFFF634
000023A8 41F9 0000 0000                             lea     (Pal_CGz_Cyc), A0                      ; Offset_0x0029F4
000023AE 3038 F632                                  move.w  (Palette_Cycle_Count_0).w, D0                ; $FFFFF632
000023B2 5078 F632                                  addq.w  #$08, (Palette_Cycle_Count_0).w              ; $FFFFF632
000023B6 0C78 0050 F632                             cmpi.w  #$0050, (Palette_Cycle_Count_0).w            ; $FFFFF632
000023BC 6500                                       bcs.s   Offset_0x0023C4
000023BE 31FC 0000 F632                             move.w  #$0000, (Palette_Cycle_Count_0).w            ; $FFFFF632
000023C4                            Offset_0x0023C4:
000023C4 21F0 0000 ED44                             move.l  $00(A0, D0), (Palette_Row_2_Offset+$04).w    ; $FFFFED44
000023CA 21F0 0004 ED48                             move.l  $04(A0, D0), (Palette_Row_2_Offset+$08).w    ; $FFFFED48
000023D0                            Offset_0x0023D0:
000023D0 4E75                                       rts      
000023D2                            ;-------------------------------------------------------------------------------
000023D2                            PalCycle_EMz_1:                                                ; Offset_0x0023D2
000023D2                            PalCycle_EMz_2:
000023D2 5378 F634                                  subq.w  #$01, (Palette_Cycle_Count_1).w              ; $FFFFF634
000023D6 6A00                                       bpl.s   Offset_0x002400
000023D8 31FC 0007 F634                             move.w  #$0007, (Palette_Cycle_Count_1).w            ; $FFFFF634
000023DE 41F9 0000 0000                             lea     (Pal_EMz_Cyc1), A0                     ; Offset_0x002A44
000023E4 3038 F632                                  move.w  (Palette_Cycle_Count_0).w, D0                ; $FFFFF632
000023E8 5478 F632                                  addq.w  #$02, (Palette_Cycle_Count_0).w              ; $FFFFF632
000023EC 0C78 003C F632                             cmpi.w  #$003C, (Palette_Cycle_Count_0).w            ; $FFFFF632
000023F2 6500                                       bcs.s   Offset_0x0023FA
000023F4 31FC 0000 F632                             move.w  #$0000, (Palette_Cycle_Count_0).w            ; $FFFFF632
000023FA                            Offset_0x0023FA:
000023FA 31F0 0004 ED5C                             move.w  $04(A0, D0), (Palette_Row_2_Offset+$1C).w    ; $FFFFED5C
00002400                            Offset_0x002400:
00002400 5378 F658                                  subq.w  #$01, (Palette_Cycle_Counters+$08).w         ; $FFFFF658
00002404 6A00                                       bpl.s   Offset_0x00242E
00002406 31FC 001F F658                             move.w  #$001F, (Palette_Cycle_Counters+$08).w       ; $FFFFF658
0000240C 41F9 0000 0000                             lea     (Pal_EMz_Cyc2), A0                     ; Offset_0x002A80
00002412 3038 F652                                  move.w  (Palette_Cycle_Counters+$02).w, D0           ; $FFFFF652
00002416 5878 F652                                  addq.w  #$04, (Palette_Cycle_Counters+$02).w         ; $FFFFF652
0000241A 0C78 0034 F652                             cmpi.w  #$0034, (Palette_Cycle_Counters+$02).w       ; $FFFFF652
00002420 6500                                       bcs.s   Offset_0x002428
00002422 31FC 0000 F652                             move.w  #$0000, (Palette_Cycle_Counters+$02).w       ; $FFFFF652
00002428                            Offset_0x002428:
00002428 21F0 0000 ED72                             move.l  $00(A0, D0), (Palette_Row_3_Offset+$12).w    ; $FFFFED72
0000242E                            Offset_0x00242E:
0000242E 4E75                                       rts  
00002430                            ;-------------------------------------------------------------------------------
00002430                            Pal_AIz1_Cyc1:                                                 ; Offset_0x002430
00002430 0EE8 0EE2 0EA4 0E64 0EE2+                  dc.w    $0EE8, $0EE2, $0EA4, $0E64, $0EE2, $0EA4, $0E64, $0EE8
00002440 0EA4 0E64 0EE8 0EE2 0E64+                  dc.w    $0EA4, $0E64, $0EE8, $0EE2, $0E64, $0EE8, $0EE2, $0EA4 
00002450                            ;-------------------------------------------------------------------------------
00002450                            Pal_AIz1_Cyc2:                                                 ; Offset_0x002450
00002450 0EEC 0EEE 0EE8 0E40 0EEC+                  dc.w    $0EEC, $0EEE, $0EE8, $0E40, $0EEC, $0EE8, $0EE8, $0EEE
00002460 0EEA 0E86 0EE8 0EE8 0EE8+                  dc.w    $0EEA, $0E86, $0EE8, $0EE8, $0EE8, $0E40, $0EE8, $0E86
00002470 0EE6 0EEE 0EE8 0E40 0EEA+                  dc.w    $0EE6, $0EEE, $0EE8, $0E40, $0EEA, $0EE8, $0EE8, $0EEE
00002480 0EE8 0E86 0EE8 0EE8 0EE8+                  dc.w    $0EE8, $0E86, $0EE8, $0EE8, $0EE8, $0E40, $0EE8, $0E86
00002490 0EE6 0EEE 0EE8 0E40 0EE8+                  dc.w    $0EE6, $0EEE, $0EE8, $0E40, $0EE8, $0EE8, $0EE8, $0EEE
000024A0 0EEA 0E86 0EE8 0EE8 0EEC+                  dc.w    $0EEA, $0E86, $0EE8, $0EE8, $0EEC, $0E40, $0EE8, $0E86
000024B0 0EEC 0EEE 0EE8 0E40 0EEC+                  dc.w    $0EEC, $0EEE, $0EE8, $0E40, $0EEC, $0EE8, $0EE8, $0EEE
000024C0 0EEC 0E86 0EE8 0EE8 0EEC+                  dc.w    $0EEC, $0E86, $0EE8, $0EE8, $0EEC, $0E40, $0EE8, $0E86   
000024D0                            ;-------------------------------------------------------------------------------
000024D0                            Pal_AIz1_Cyc3:                                                 ; Offset_0x0024D0
000024D0 0CEC 0CEE 0EEE 0CEE 0EEE+                  dc.w    $0CEC, $0CEE, $0EEE, $0CEE, $0EEE, $0EEE, $0EEE, $0EEE
000024E0 0EEE 0EEE 0EEE 0EEE 0EEE+                  dc.w    $0EEE, $0EEE, $0EEE, $0EEE, $0EEE, $0EEE, $0EEE, $0EEE
000024F0 0EEE 0EEE 0EEE 0EEE 0EEE+                  dc.w    $0EEE, $0EEE, $0EEE, $0EEE, $0EEE, $0EE8, $0EEE, $0EEE
00002500 0EE8 0EE8 0EEE 0EE8 0EE8+                  dc.w    $0EE8, $0EE8, $0EEE, $0EE8, $0EE8, $0EE8, $0EE8, $0EE8
00002510 0EE8 0EE8 0EE8 0EE8 0EE8+                  dc.w    $0EE8, $0EE8, $0EE8, $0EE8, $0EE8, $0EE8, $0EE8, $0EE8
00002520 0EE8 0AEC 0EE8 0AEC 0CEC+                  dc.w    $0EE8, $0AEC, $0EE8, $0AEC, $0CEC, $0AEC, $0CEC, $0CEC 
00002530                            ;-------------------------------------------------------------------------------
00002530                            Pal_AIz1_Cyc4:                                                 ; Offset_0x002530
00002530 0EA4 0E60 0EE2 0EA4 0EE8+                  dc.w    $0EA4, $0E60, $0EE2, $0EA4, $0EE8, $0EA4, $0E60, $0EE8
00002540 0EEE 0E60 0EE2 0EE2 0EE8+                  dc.w    $0EEE, $0E60, $0EE2, $0EE2, $0EE8, $0EA4, $0EA4, $0EE2
00002550 0E60 0E60 0EE2 0E60 0EEE+                  dc.w    $0E60, $0E60, $0EE2, $0E60, $0EEE, $0EE2, $0E60, $0EE8  
00002560                            ;-------------------------------------------------------------------------------
00002560                            Pal_AIz2_Cyc1:                                                 ; Offset_0x002560
00002560 0EE8 0EE2 0EC4 0EA4 0EE2+                  dc.w    $0EE8, $0EE2, $0EC4, $0EA4, $0EE2, $0EC4, $0EA4, $0EE8
00002570 0EC4 0EA4 0EE8 0EE2 0EA4+                  dc.w    $0EC4, $0EA4, $0EE8, $0EE2, $0EA4, $0EE8, $0EE2, $0EC4  
00002580                            ;-------------------------------------------------------------------------------
00002580                            Pal_AIz2_Cyc2:                                                 ; Offset_0x002580
00002580 0024 0044 008E 0026 0046+                  dc.w    $0024, $0044, $008E, $0026, $0046, $00AE, $0024, $0048
00002590 008E 0026 004A 00AE 0024+                  dc.w    $008E, $0026, $004A, $00AE, $0024, $004C, $008E, $0026
000025A0 004A 00AE 0024 0048 008E+                  dc.w    $004A, $00AE, $0024, $0048, $008E, $0024, $0046, $008E   
000025B0                            ;-------------------------------------------------------------------------------
000025B0                            Pal_AIz2_Cyc3:                                                 ; Offset_0x0025B0
000025B0 0024 0044 000C 0026 0046+                  dc.w    $0024, $0044, $000C, $0026, $0046, $000E, $0024, $0048
000025C0 000C 0026 004A 000E 0024+                  dc.w    $000C, $0026, $004A, $000E, $0024, $004C, $000C, $0026
000025D0 004A 000E 0024 0048 000C+                  dc.w    $004A, $000E, $0024, $0048, $000C, $0024, $0046, $000C  
000025E0                            ;-------------------------------------------------------------------------------
000025E0                            Pal_AIz2_Cyc4:                                                 ; Offset_0x0025E0
000025E0 006E 006E 006E 006E 028E+                  dc.w    $006E, $006E, $006E, $006E, $028E, $04AE, $06AE, $08CE
000025F0 08EE 0AEE 0AEE 0AEE 0AEE+                  dc.w    $08EE, $0AEE, $0AEE, $0AEE, $0AEE, $0AEE, $08EE, $08EE
00002600 08EE 08EE 08CE 08CE 08CE+                  dc.w    $08EE, $08EE, $08CE, $08CE, $08CE, $06AE, $06AE, $04AE
00002610 04AE 028E                                  dc.w    $04AE, $028E     
00002614                            ;-------------------------------------------------------------------------------
00002614                            Pal_AIz2_Cyc5:                                                 ; Offset_0x002614
00002614 000C 000C 000C 000C 002C+                  dc.w    $000C, $000C, $000C, $000C, $002C, $000E, $002E, $004E
00002624 006E 008E 008E 008E 008E+                  dc.w    $006E, $008E, $008E, $008E, $008E, $008E, $006E, $004E
00002634 004E 004E 002E 002E 002E+                  dc.w    $004E, $004E, $002E, $002E, $002E, $000E, $000E, $002C
00002644 002C 002C                                  dc.w    $002C, $002C                             
00002648                            ;-------------------------------------------------------------------------------
00002648                            Pal_Hz1_Cyc:                                                   ; Offset_0x002648
00002648 0EC8 0EC0 0EA0 0E80 0EC0+                  dc.w    $0EC8, $0EC0, $0EA0, $0E80, $0EC0, $0EA0, $0E80, $0EC8
00002658 0EA0 0E80 0EC8 0EC0 0E80+                  dc.w    $0EA0, $0E80, $0EC8, $0EC0, $0E80, $0EC8, $0EC0, $0EA0 
00002668                            ;-------------------------------------------------------------------------------
00002668                            Pal_CNz_Cyc1:                                                  ; Offset_0x002668
00002668 0000 0066 00EE 0022 0044+                  dc.w    $0000, $0066, $00EE, $0022, $0044, $00CC, $0044, $0022
00002678 00AA 0066 0000 0088 0088+                  dc.w    $00AA, $0066, $0000, $0088, $0088, $0000, $0066, $00AA
00002688 0022 0044 00CC 0044 0022+                  dc.w    $0022, $0044, $00CC, $0044, $0022, $00EE, $0066, $0000
00002698 00EE 0088 0000 00CC 00AA+                  dc.w    $00EE, $0088, $0000, $00CC, $00AA, $0022, $00AA, $00CC
000026A8 0044 0088 00EE 0066 0066+                  dc.w    $0044, $0088, $00EE, $0066, $0066, $00EE, $0088, $0044
000026B8 00CC 00AA 0022 00AA 00CC+                  dc.w    $00CC, $00AA, $0022, $00AA, $00CC, $0000, $0088, $00EE 
000026C8                            ;-------------------------------------------------------------------------------
000026C8                            Pal_CNz_Cyc2:                                                  ; Offset_0x0026C8
000026C8 0E20 008A 0C0E 0C42 006C+                  dc.w    $0E20, $008A, $0C0E, $0C42, $006C, $0E0E, $0A64, $004C
000026D8 0E0C 0884 002E 0E0A 06A6+                  dc.w    $0E0C, $0884, $002E, $0E0A, $06A6, $000E, $0E08, $04C6
000026E8 020E 0E06 02E8 040E 0E04+                  dc.w    $020E, $0E06, $02E8, $040E, $0E04, $00E8, $060E, $0E02
000026F8 00C8 080E 0E00 00AA 0A0E+                  dc.w    $00C8, $080E, $0E00, $00AA, $0A0E, $0E00, $008A, $0C0E
00002708 0E20 006C 0E0E 0C42 004C+                  dc.w    $0E20, $006C, $0E0E, $0C42, $004C, $0E0C, $0A64, $002E
00002718 0E0A 0884 000E 0E08 06A6+                  dc.w    $0E0A, $0884, $000E, $0E08, $06A6, $020E, $0E06, $04C6
00002728 040E 0E04 02E8 060E 0E02+                  dc.w    $040E, $0E04, $02E8, $060E, $0E02, $00E8, $080E, $0E00
00002738 00C8 0A0E 0E00 00AA 0C0E+                  dc.w    $00C8, $0A0E, $0E00, $00AA, $0C0E, $0E20, $008A, $0E0E
00002748 0C42 006C 0E0C 0A64 004C+                  dc.w    $0C42, $006C, $0E0C, $0A64, $004C, $0E0A, $0884, $002E
00002758 0E08 06A6 000E 0E06 04C6+                  dc.w    $0E08, $06A6, $000E, $0E06, $04C6, $020E, $0E04, $02E8
00002768 040E 0E02 00E8 060E 0E00+                  dc.w    $040E, $0E02, $00E8, $060E, $0E00, $00C8, $080E, $0E00
00002778 00AA 0A0E                                  dc.w    $00AA, $0A0E  
0000277C                            ;-------------------------------------------------------------------------------
0000277C                            Pal_CNz_Cyc3:                                                  ; Offset_0x00277C
0000277C 02E0 0ECE 04E2 0EAC 06E4+                  dc.w    $02E0, $0ECE, $04E2, $0EAC, $06E4, $0E8A, $08E6, $0E68
0000278C 0AE8 0E46 0CEA 0E24 0EEC+                  dc.w    $0AE8, $0E46, $0CEA, $0E24, $0EEC, $0E02, $0EEE, $0E00
0000279C 0EEC 0E02 0CEA 0E24 0AE8+                  dc.w    $0EEC, $0E02, $0CEA, $0E24, $0AE8, $0E46, $08E6, $0E68
000027AC 06E4 0E8A 04E2 0EAC 02E0+                  dc.w    $06E4, $0E8A, $04E2, $0EAC, $02E0, $0ECE, $00E0, $0EEE 
000027BC                            ;-------------------------------------------------------------------------------
000027BC                            Pal_Iz_Cyc1:                                                   ; Offset_0x0027BC
000027BC 0E62 0E20 0E44 0E20 0E44+                  dc.w    $0E62, $0E20, $0E44, $0E20, $0E44, $0E00, $0E42, $0E00
000027CC 0E62 0C00 0E82 0A00 0EA2+                  dc.w    $0E62, $0C00, $0E82, $0A00, $0EA2, $0C00, $0EC0, $0E00
000027DC 0EE0 0E20 0EE4 0E00 0EE4+                  dc.w    $0EE0, $0E20, $0EE4, $0E00, $0EE4, $0C00, $0EE4, $0A00
000027EC 0EE0 0800 0EC2 0A00 0EA2+                  dc.w    $0EE0, $0800, $0EC2, $0A00, $0EA2, $0C00, $0E82, $0E20
000027FC                            ;-------------------------------------------------------------------------------
000027FC                            Pal_Iz_Cyc2:                                                   ; Offset_0x0027FC
000027FC 0E06 0E08 0E04 0E06 0C04+                  dc.w    $0E06, $0E08, $0E04, $0E06, $0C04, $0E04, $0C02, $0C04
0000280C 0A02 0C02 0A00 0A02 0800+                  dc.w    $0A02, $0C02, $0A00, $0A02, $0800, $0A00, $0600, $0800
0000281C 0600 0800 0600 0800 0600+                  dc.w    $0600, $0800, $0600, $0800, $0600, $0800, $0800, $0A00
0000282C 0A00 0A02 0A02 0C02 0C02+                  dc.w    $0A00, $0A02, $0A02, $0C02, $0C02, $0C04, $0C04, $0E04
0000283C 0E04 0E06 0E06 0E08                        dc.w    $0E04, $0E06, $0E06, $0E08  
00002844                            ;-------------------------------------------------------------------------------
00002844                            Pal_Iz_Cyc3:                                                   ; Offset_0x002844
00002844 0840 0EEA 0860 0EE0 0A80+                  dc.w    $0840, $0EEA, $0860, $0EE0, $0A80, $0EC0, $0EC0, $0A80
00002854 0A80 0EC0 0860 0EE0                        dc.w    $0A80, $0EC0, $0860, $0EE0      
0000285C                            ;-------------------------------------------------------------------------------
0000285C                            Pal_Iz_Cyc4:                                                   ; Offset_0x00285C
0000285C 00E8 0CEC 00C8 0AEA 00C8+                  dc.w    $00E8, $0CEC, $00C8, $0AEA, $00C8, $0AEA, $00A6, $06E8
0000286C 00A6 06E8 0084 00E8 0084+                  dc.w    $00A6, $06E8, $0084, $00E8, $0084, $00E8, $0082, $00C8
0000287C 0064 00A6 0064 00A6 0082+                  dc.w    $0064, $00A6, $0064, $00A6, $0082, $00C8, $0084, $00E8
0000288C 00A6 06E8 00C8 0AEA 00E8+                  dc.w    $00A6, $06E8, $00C8, $0AEA, $00E8, $0CEC, $00E8, $0CEC  
0000289C                            ;-------------------------------------------------------------------------------
0000289C                            Pal_LBz1_Cyc:                                                  ; Offset_0x00289C
0000289C 08E0 00C0 0080 00C0 0080+                  dc.w    $08E0, $00C0, $0080, $00C0, $0080, $08E0, $0080, $08E0
000028AC 00C0                                       dc.w    $00C0   
000028AE                            ;-------------------------------------------------------------------------------
000028AE                            Pal_LBz2_Cyc:                                                  ; Offset_0x0028AE
000028AE 0EEA 0EA4 0C62 0EA4 0C62+                  dc.w    $0EEA, $0EA4, $0C62, $0EA4, $0C62, $0EEA, $0C62, $0EEA
000028BE 0EA4                                       dc.w    $0EA4   
000028C0                            ;-------------------------------------------------------------------------------
000028C0                            Pal_LRz1_Cyc1:                                                 ; Offset_0x0028C0
000028C0 00EE 00AE 006E 000E 00AE+                  dc.w    $00EE, $00AE, $006E, $000E, $00AE, $006E, $000E, $00EE
000028D0 006E 000E 00EE 02CE 002E+                  dc.w    $006E, $000E, $00EE, $02CE, $002E, $08EE, $04EE, $006E
000028E0 0AEE 06EE 008E 004E 04EE+                  dc.w    $0AEE, $06EE, $008E, $004E, $04EE, $006E, $002E, $08EE
000028F0 006E 000E 00EE 02CE 000E+                  dc.w    $006E, $000E, $00EE, $02CE, $000E, $00EE, $02CE, $006E
00002900 00EE 00AE 006E 000E 008E+                  dc.w    $00EE, $00AE, $006E, $000E, $008E, $004E, $000C, $00CE
00002910 002E 000A 00AC 006E 0008+                  dc.w    $002E, $000A, $00AC, $006E, $0008, $008E, $004C, $000C
00002920 00AC 006E 002E 000A 008E+                  dc.w    $00AC, $006E, $002E, $000A, $008E, $004E, $000C, $00CE
00002930 006E 000E 00EE 00AE 000E+                  dc.w    $006E, $000E, $00EE, $00AE, $000E, $00EE, $00AE, $006E  
00002940                            ;-------------------------------------------------------------------------------
00002940                            Pal_LRz1_Cyc2:                                                 ; Offset_0x002940
00002940 0224 0224 0224 0424 0224+                  dc.w    $0224, $0224, $0224, $0424, $0224, $0426, $0426, $0224
00002950 0424 0224 0224 0224 0224+                  dc.w    $0424, $0224, $0224, $0224, $0224, $0224, $0224, $0422
00002960 0422 0422                                  dc.w    $0422, $0422     
00002964                            ;-------------------------------------------------------------------------------
00002964                            Pal_BPz_Cyc1:                                                  ; Offset_0x002964
00002964 00EE 00AE 006C 00AE 006E+                  dc.w    $00EE, $00AE, $006C, $00AE, $006E, $00EE, $006E, $00EE
00002974 00AE                                       dc.w    $00AE    
00002976                            ;-------------------------------------------------------------------------------
00002976                            Pal_BPz_Cyc2:                                                  ; Offset_0x002976
00002976 0EE0 0E0E 00EE 0EA0 0A0E+                  dc.w    $0EE0, $0E0E, $00EE, $0EA0, $0A0E, $00EA, $0E60, $060E
00002986 00E6 0E20 020E 00E2 0E02+                  dc.w    $00E6, $0E20, $020E, $00E2, $0E02, $002E, $02E0, $0E06
00002996 006E 06E0 0E0A 00AE 0AE0+                  dc.w    $006E, $06E0, $0E0A, $00AE, $0AE0, $0E0E, $00EE, $0EE0
000029A6 0A0E 00EA 0EA0 060E 00E6+                  dc.w    $0A0E, $00EA, $0EA0, $060E, $00E6, $0E60, $020E, $00E2
000029B6 0E20 002E 02E0 0E02 006E+                  dc.w    $0E20, $002E, $02E0, $0E02, $006E, $06E0, $0E06, $00AE
000029C6 0AE0 0E0A 00EE 0EE0 0E0E+                  dc.w    $0AE0, $0E0A, $00EE, $0EE0, $0E0E, $00EA, $0EA0, $0A0E
000029D6 00E6 0E60 060E 00E2 0E20+                  dc.w    $00E6, $0E60, $060E, $00E2, $0E20, $020E, $02E0, $0E02
000029E6 002E 06E0 0E06 006E 0AE0+                  dc.w    $002E, $06E0, $0E06, $006E, $0AE0, $0E0A, $00AE  
000029F4                            ;-------------------------------------------------------------------------------
000029F4                            Pal_CGz_Cyc:                                                   ; Offset_0x0029F4
000029F4 000E 0008 0004 0EEE 000C+                  dc.w    $000E, $0008, $0004, $0EEE, $000C, $0006, $0002, $0CCE
00002A04 000A 0004 0000 0AAE 0008+                  dc.w    $000A, $0004, $0000, $0AAE, $0008, $0002, $0000, $088E
00002A14 0006 0000 0000 066E 0004+                  dc.w    $0006, $0000, $0000, $066E, $0004, $0000, $0000, $044E
00002A24 0006 0000 0000 066E 0008+                  dc.w    $0006, $0000, $0000, $066E, $0008, $0002, $0000, $088E
00002A34 000A 0004 0002 0AAE 000C+                  dc.w    $000A, $0004, $0002, $0AAE, $000C, $0006, $0004, $0CCE  
00002A44                            ;-------------------------------------------------------------------------------
00002A44                            Pal_EMz_Cyc1:                                                  ; Offset_0x002A44
00002A44 0006 0008 000A 000C 000E+                  dc.w    $0006, $0008, $000A, $000C, $000E, $000E, $000E, $000E
00002A54 000C 000A 0008 0006 0006+                  dc.w    $000C, $000A, $0008, $0006, $0006, $0006, $0006, $0008
00002A64 000A 000C 000E 000E 000E+                  dc.w    $000A, $000C, $000E, $000E, $000E, $000C, $000A, $0008
00002A74 0006 0008 000A 000A 000A+                  dc.w    $0006, $0008, $000A, $000A, $000A, $0008  
00002A80                            ;-------------------------------------------------------------------------------
00002A80                            Pal_EMz_Cyc2:                                                  ; Offset_0x002A80
00002A80 0000 000E 0002 000C 0004+                  dc.w    $0000, $000E, $0002, $000C, $0004, $000A, $0006, $0008
00002A90 0008 0006 000A 0004 000C+                  dc.w    $0008, $0006, $000A, $0004, $000C, $0002, $000E, $0000
00002AA0 000C 0002 000A 0004 0008+                  dc.w    $000C, $0002, $000A, $0004, $0008, $0006, $0006, $0008
00002AB0 0004 000A 0002 000C                        dc.w    $0004, $000A, $0002, $000C   
00002AB8                            ;-------------------------------------------------------------------------------
00002AB8                            PalCycle_SuperSonic:                                           ; Offset_0x002AB8
00002AB8 1038 F65F                                  move.b  (Super_Sonic_Palette_Status).w, D0           ; $FFFFF65F
00002ABC 6700                                       beq.s   Offset_0x002B00
00002ABE 6B00 0000                                  bmi     Offset_0x002B50
00002AC2 5300                                       subq.b  #$01, D0
00002AC4 6600                                       bne.s   Offset_0x002B02
00002AC6 5338 F65E                                  subq.b  #$01, (Super_Sonic_Palette_Timer).w          ; $FFFFF65E
00002ACA 6A00                                       bpl.s   Offset_0x002B00
00002ACC 11FC 0003 F65E                             move.b  #$03, (Super_Sonic_Palette_Timer).w          ; $FFFFF65E
00002AD2 41F9 0000 0000                             lea     (Pal_SuperSonic_Cyc), A0               ; Offset_0x002BA0
00002AD8 3038 F65C                                  move.w  (Super_Sonic_Palette_Frame).w, D0            ; $FFFFF65C
00002ADC 5078 F65C                                  addq.w  #$08, (Super_Sonic_Palette_Frame).w          ; $FFFFF65C
00002AE0 0C78 0030 F65C                             cmpi.w  #$0030, (Super_Sonic_Palette_Frame).w        ; $FFFFF65C
00002AE6 6500                                       bcs.s   Offset_0x002AF4
00002AE8 11FC 00FF F65F                             move.b  #$FF, (Super_Sonic_Palette_Status).w         ; $FFFFF65F
00002AEE 11FC 0000 B02E                             move.b  #$00, (Obj_Player_One+Obj_Timer).w           ; $FFFFB02E
00002AF4                            Offset_0x002AF4:
00002AF4 43F8 ED04                                  lea     (Palette_Row_0_Offset+$04).w, A1             ; $FFFFED04
00002AF8 22F0 0000                                  move.l  $00(A0, D0), (A1)+
00002AFC 32B0 0004                                  move.w  $04(A0, D0), (A1)
00002B00                            Offset_0x002B00:
00002B00 4E75                                       rts
00002B02                            Offset_0x002B02:
00002B02 5338 F65E                                  subq.b  #$01, (Super_Sonic_Palette_Timer).w          ; $FFFFF65E
00002B06 6AF8                                       bpl.s   Offset_0x002B00
00002B08 11FC 0003 F65E                             move.b  #$03, (Super_Sonic_Palette_Timer).w          ; $FFFFF65E
00002B0E 41F9 0000 0000                             lea     (Pal_SuperSonic_Cyc), A0               ; Offset_0x002BA0
00002B14 3038 F65C                                  move.w  (Super_Sonic_Palette_Frame).w, D0            ; $FFFFF65C
00002B18 5178 F65C                                  subq.w  #$08, (Super_Sonic_Palette_Frame).w          ; $FFFFF65C
00002B1C 6400                                       bcc.s   Offset_0x002B2A
00002B1E 11FC 0000 F65C                             move.b  #$00, (Super_Sonic_Palette_Frame).w          ; $FFFFF65C
00002B24 11FC 0000 F65F                             move.b  #$00, (Super_Sonic_Palette_Status).w         ; $FFFFF65F
00002B2A                            Offset_0x002B2A:
00002B2A 43F8 ED04                                  lea     (Palette_Row_0_Offset+$04).w, A1             ; $FFFFED04
00002B2E 22F0 0000                                  move.l  $00(A0, D0), (A1)+
00002B32 32B0 0004                                  move.w  $04(A0, D0), (A1)
00002B36 41F9 0000 0000                             lea     (Pal_SuperSonic_Underwater_Cyc), A0    ; Offset_0x002C20
00002B3C 4A38 F730                                  tst.b   (Water_Level_Flag).w                         ; $FFFFF730
00002B40 67BE                                       beq.s   Offset_0x002B00
00002B42 43F8 F084                                  lea     (Palette_UW_Row_0_Offset+$04).w, A1          ; $FFFFF084
00002B46 22F0 0000                                  move.l  $00(A0, D0), (A1)+
00002B4A 32B0 0004                                  move.w  $04(A0, D0), (A1)
00002B4E 4E75                                       rts
00002B50                            Offset_0x002B50:
00002B50 5338 F65E                                  subq.b  #$01, (Super_Sonic_Palette_Timer).w          ; $FFFFF65E
00002B54 6AAA                                       bpl.s   Offset_0x002B00
00002B56 11FC 0007 F65E                             move.b  #$07, (Super_Sonic_Palette_Timer).w          ; $FFFFF65E
00002B5C 41F9 0000 0000                             lea     (Pal_SuperSonic_Cyc), A0               ; Offset_0x002BA0
00002B62 3038 F65C                                  move.w  (Super_Sonic_Palette_Frame).w, D0            ; $FFFFF65C
00002B66 5078 F65C                                  addq.w  #$08, (Super_Sonic_Palette_Frame).w          ; $FFFFF65C
00002B6A 0C78 0078 F65C                             cmpi.w  #$0078, (Super_Sonic_Palette_Frame).w        ; $FFFFF65C
00002B70 6500                                       bcs.s   Offset_0x002B78
00002B72 31FC 0030 F65C                             move.w  #$0030, (Super_Sonic_Palette_Frame).w        ; $FFFFF65C
00002B78                            Offset_0x002B78:
00002B78 43F8 ED04                                  lea     (Palette_Row_0_Offset+$04).w, A1             ; $FFFFED04
00002B7C 22F0 0000                                  move.l  $00(A0, D0), (A1)+
00002B80 32B0 0004                                  move.w  $04(A0, D0), (A1)
00002B84 41F9 0000 0000                             lea     (Pal_SuperSonic_Underwater_Cyc), A0    ; Offset_0x002C20
00002B8A 4A38 F730                                  tst.b   (Water_Level_Flag).w                         ; $FFFFF730
00002B8E 6700 FF70                                  beq     Offset_0x002B00
00002B92 43F8 F084                                  lea     (Palette_UW_Row_0_Offset+$04).w, A1          ; $FFFFF084
00002B96 22F0 0000                                  move.l  $00(A0, D0), (A1)+
00002B9A 32B0 0004                                  move.w  $04(A0, D0), (A1)
00002B9E 4E75                                       rts   
00002BA0                            ;-------------------------------------------------------------------------------
00002BA0                            Pal_SuperSonic_Cyc:                                            ; Offset_0x002BA0
00002BA0 0A22 0C42 0E44 0E66 0844+                  dc.w    $0A22, $0C42, $0E44, $0E66, $0844, $0A64, $0E66, $0E88
00002BB0 0666 0A86 0E88 0EAA 0488+                  dc.w    $0666, $0A86, $0E88, $0EAA, $0488, $0AA8, $0EAA, $0ECC
00002BC0 04AA 0ACA 0ECC 0EEE 04CC+                  dc.w    $04AA, $0ACA, $0ECC, $0EEE, $04CC, $0AEC, $0EEE, $0EEE
00002BD0 04EE 0AEE 0EEE 0EEE 06EE+                  dc.w    $04EE, $0AEE, $0EEE, $0EEE, $06EE, $0EEE, $0EEE, $0EEE
00002BE0 08EE 0EEE 0EEE 0EEE 06EE+                  dc.w    $08EE, $0EEE, $0EEE, $0EEE, $06EE, $0CEE, $0EEE, $0EEE
00002BF0 04EE 0AEE 0EEE 0EEE 02EE+                  dc.w    $04EE, $0AEE, $0EEE, $0EEE, $02EE, $08EE, $0CEE, $0EEE
00002C00 00EE 06EE 0AEE 0EEE 00EE+                  dc.w    $00EE, $06EE, $0AEE, $0EEE, $00EE, $04EE, $08EE, $0CEE
00002C10 00EE 06EE 0AEE 0EEE 00EE+                  dc.w    $00EE, $06EE, $0AEE, $0EEE, $00EE, $08EE, $0CEE, $0EEE 
00002C20                            ;-------------------------------------------------------------------------------
00002C20                            Pal_SuperSonic_Underwater_Cyc:                                 ; Offset_0x002C20
00002C20 0E08 0E28 0E2A 0E4C 0C2A+                  dc.w    $0E08, $0E28, $0E2A, $0E4C, $0C2A, $0E4A, $0E4C, $0E6E
00002C30 0A4C 0E6C 0E6E 0E8E 0A6E+                  dc.w    $0A4C, $0E6C, $0E6E, $0E8E, $0A6E, $0E8E, $0E8E, $0E8E
00002C40 0A6E 0E8E 0E8E 0E8E 0A6E+                  dc.w    $0A6E, $0E8E, $0E8E, $0E8E, $0A6E, $0E8E, $0E8E, $0E8E
00002C50 0A6E 0E8E 0E8E 0E8E 0A6E+                  dc.w    $0A6E, $0E8E, $0E8E, $0E8E, $0A6E, $0E8E, $0E8E, $0E8E
00002C60 0C8E 0EAE 0EAE 0EAE 0C8E+                  dc.w    $0C8E, $0EAE, $0EAE, $0EAE, $0C8E, $0EAE, $0EAE, $0EAE
00002C70 0EAE 0EAE 0EAE 0EAE 0EAE+                  dc.w    $0EAE, $0EAE, $0EAE, $0EAE, $0EAE, $0EAE, $0EAE, $0EAE
00002C80 0EAE 0EAE 0EAE 0EAE 0EAE+                  dc.w    $0EAE, $0EAE, $0EAE, $0EAE, $0EAE, $0EAE, $0EAE, $0EAE
00002C90 0EAE 0EAE 0EAE 0EAE 0EAE+                  dc.w    $0EAE, $0EAE, $0EAE, $0EAE, $0EAE, $0EAE, $0EAE, $0EAE
00002CA0 0A24 0C44 0E46 0E68 0C46+                  dc.w    $0A24, $0C44, $0E46, $0E68, $0C46, $0E66, $0E68, $0E8A
00002CB0 0E68 0E88 0E8A 0EAC 0E68+                  dc.w    $0E68, $0E88, $0E8A, $0EAC, $0E68, $0E88, $0E8A, $0EAC
00002CC0 0E88 0EAA 0EAC 0ECC 0E88+                  dc.w    $0E88, $0EAA, $0EAC, $0ECC, $0E88, $0EAA, $0EAC, $0ECC
00002CD0 0EA8 0ECC 0ECC 0ECC 0EA8+                  dc.w    $0EA8, $0ECC, $0ECC, $0ECC, $0EA8, $0ECC, $0ECC, $0ECC
00002CE0 0EA8 0ECC 0ECC 0ECC 0ECA+                  dc.w    $0EA8, $0ECC, $0ECC, $0ECC, $0ECA, $0ECC, $0ECC, $0ECC
00002CF0 0ECC 0ECC 0ECC 0ECC 0ECC+                  dc.w    $0ECC, $0ECC, $0ECC, $0ECC, $0ECC, $0ECC, $0ECC, $0ECC
00002D00 0ECC 0ECC 0ECC 0ECC 0ECC+                  dc.w    $0ECC, $0ECC, $0ECC, $0ECC, $0ECC, $0ECC, $0ECC, $0ECC
00002D10 0ECA 0ECC 0ECC 0ECC 0EA8+                  dc.w    $0ECA, $0ECC, $0ECC, $0ECC, $0EA8, $0ECC, $0ECC, $0ECC                                                                                                                                                                                                                                                                                                                                                                                                                    
00002D20                            ;===============================================================================
00002D20                            ; Rotina para execu__o das paletas animadas. Ex: luzes piscando, fogo etc...
00002D20                            ; <<<-        
00002D20                            ;===============================================================================  
00002D20                            
00002D20                            ;===============================================================================
00002D20                            ; Rotinas para escurecer / clarear a tela progressivamente
00002D20                            ; ->>>
00002D20                            ;=============================================================================== 
00002D20                            Pal_FadeTo:                                                    ; Offset_0x002D20
00002D20 31FC 003F F626                             move.w  #$003F, (Palette_Fade_Info).w                ; $FFFFF626
00002D26 4EBA 0000                                  jsr     Pal_Clear(PC)                          ; Offset_0x002DB0
00002D2A 383C 0015                                  move.w  #$0015, D4
00002D2E                            Pal_FadeTo_Loop:                                               ; Offset_0x002D2E
00002D2E 11FC 0012 F62A                             move.b  #$12, (VBlank_Index).w                       ; $FFFFF62A
00002D34 6100 EDB8                                  bsr     Wait_For_VSync                         ; Offset_0x001AEE
00002D38 6100                                       bsr.s   Pal_FadeIn                             ; Offset_0x002D44
00002D3A 6100 E81A                                  bsr     RunPLC                                 ; Offset_0x001556
00002D3E 51CC FFEE                                  dbra    D4, Pal_FadeTo_Loop                    ; Offset_0x002D2E
00002D42 4E75                                       rts
00002D44                            ;-------------------------------------------------------------------------------
00002D44                            Pal_FadeIn:                                                    ; Offset_0x002D44
00002D44 7000                                       moveq   #$00, D0
00002D46 41F8 ED00                                  lea     (Palette_Buffer).w, A0                       ; $FFFFED00
00002D4A 43F8 ED80                                  lea     (Palette_Data_Target).w, A1                  ; $FFFFED80
00002D4E 1038 F626                                  move.b  (Palette_Fade_Info).w, D0                    ; $FFFFF626
00002D52 D0C0                                       adda.w  D0, A0
00002D54 D2C0                                       adda.w  D0, A1
00002D56 1038 F627                                  move.b  (Palette_Fade_Count).w, D0                   ; $FFFFF627
00002D5A                            Offset_0x002D5A:
00002D5A 6100                                       bsr.s   Pal_AddColor                           ; Offset_0x002D84
00002D5C 51C8 FFFC                                  dbra    D0, Offset_0x002D5A
00002D60 4A38 F730                                  tst.b   (Water_Level_Flag).w                         ; $FFFFF730
00002D64 6700                                       beq.s   Offset_0x002D82
00002D66 7000                                       moveq   #$00, D0
00002D68 41F8 F080                                  lea     (Palette_Underwater_Buffer).w, A0            ; $FFFFF080
00002D6C 43F8 F000                                  lea     (Palette_Underwater_Target).w, A1            ; $FFFFF000
00002D70 1038 F626                                  move.b  (Palette_Fade_Info).w, D0                    ; $FFFFF626
00002D74 D0C0                                       adda.w  D0, A0
00002D76 D2C0                                       adda.w  D0, A1
00002D78 1038 F627                                  move.b  (Palette_Fade_Count).w, D0                   ; $FFFFF627
00002D7C                            Offset_0x002D7C:        
00002D7C 6100                                       bsr.s   Pal_AddColor                           ; Offset_0x002D84
00002D7E 51C8 FFFC                                  dbra    D0, Offset_0x002D7C
00002D82                            Offset_0x002D82:
00002D82 4E75                                       rts
00002D84                            ;-------------------------------------------------------------------------------                
00002D84                            Pal_AddColor:                                                  ; Offset_0x002D84
00002D84 3419                                       move.w  (A1)+, D2
00002D86 3610                                       move.w  (A0), D3
00002D88 B642                                       cmp.w   D2, D3
00002D8A 6700                                       beq.s   Pal_NoAdd                              ; Offset_0x002DAC
00002D8C 3203                                       move.w  D3, D1
00002D8E                            ; Pal_AddBlue:                
00002D8E 0641 0200                                  addi.w  #$0200, D1
00002D92 B242                                       cmp.w   D2, D1
00002D94 6200                                       bhi.s   Pal_AddGreen                           ; Offset_0x002D9A
00002D96 30C1                                       move.w  D1, (A0)+
00002D98 4E75                                       rts
00002D9A                            Pal_AddGreen:                                                  ; Offset_0x002D9A
00002D9A 3203                                       move.w  D3, D1
00002D9C 0641 0020                                  addi.w  #$0020, D1
00002DA0 B242                                       cmp.w   D2, D1
00002DA2 6200                                       bhi.s   Pal_AddRed                             ; Offset_0x002DA8
00002DA4 30C1                                       move.w  D1, (A0)+
00002DA6 4E75                                       rts
00002DA8                            Pal_AddRed:                                                    ; Offset_0x002DA8
00002DA8 5458                                       addq.w  #$02, (A0)+
00002DAA 4E75                                       rts
00002DAC                            Pal_NoAdd:                                                     ; Offset_0x002DAC
00002DAC 5448                                       addq.w  #$02, A0
00002DAE 4E75                                       rts   
00002DB0                            ;-------------------------------------------------------------------------------
00002DB0                            Pal_Clear:                                                     ; Offset_0x002DB0
00002DB0 7000                                       moveq   #$00, D0
00002DB2 41F8 ED00                                  lea     (Palette_Buffer).w, A0                       ; $FFFFED00
00002DB6 1038 F626                                  move.b  (Palette_Fade_Info).w, D0                    ; $FFFFF626
00002DBA D0C0                                       adda.w  D0, A0
00002DBC 7200                                       moveq   #$00, D1
00002DBE 1038 F627                                  move.b  (Palette_Fade_Count).w, D0                   ; $FFFFF627
00002DC2                            Offset_0x002DC2:
00002DC2 30C1                                       move.w  D1, (A0)+
00002DC4 4A38 F730                                  tst.b   (Water_Level_Flag).w                         ; $FFFFF730
00002DC8 6700                                       beq.s   Offset_0x002DCE
00002DCA 3141 037E                                  move.w  D1, $037E(A0)
00002DCE                            Offset_0x002DCE:
00002DCE 51C8 FFF2                                  dbra    D0, Offset_0x002DC2
00002DD2 4E75                                       rts   
00002DD4                            ;-------------------------------------------------------------------------------
00002DD4                            Animate_Palette:                                               ; Offset_0x002DD4
00002DD4 4A78 EE56                                  tst.w   (Palette_Fade_Timer).w                       ; $FFFFEE56
00002DD8 6700                                       beq.s   Run_Pal_Cycle                          ; Offset_0x002DE2
00002DDA 5378 EE56                                  subq.w  #$01, (Palette_Fade_Timer).w                 ; $FFFFEE56
00002DDE 6000 FF64                                  bra     Pal_FadeIn                             ; Offset_0x002D44
00002DE2                            Run_Pal_Cycle:                                                 ; Offset_0x002DE2
00002DE2 4EF9 0000 1F16                             jmp     (PalCycle_Load)                        ; Offset_0x001F16    
00002DE8                            ;------------------------------------------------------------------------------- 
00002DE8                            Pal_FadeFrom:                                                  ; Offset_0x002DE8
00002DE8 31FC 003F F626                             move.w  #$003F, (Palette_Fade_Info).w                ; $FFFFF626
00002DEE 383C 0015                                  move.w  #$0015, D4
00002DF2                            Pal_FadeFrom_Loop:                                             ; Offset_0x002DF2
00002DF2 11FC 0012 F62A                             move.b  #$12, (VBlank_Index).w                       ; $FFFFF62A
00002DF8 6100 ECF4                                  bsr     Wait_For_VSync                         ; Offset_0x001AEE
00002DFC 6100                                       bsr.s   Pal_FadeOut                            ; Offset_0x002E08
00002DFE 6100 E756                                  bsr     RunPLC                                 ; Offset_0x001556
00002E02 51CC FFEE                                  dbra    D4, Pal_FadeFrom_Loop                  ; Offset_0x002DF2
00002E06 4E75                                       rts
00002E08                            ;-------------------------------------------------------------------------------
00002E08                            Pal_FadeOut:                                                   ; Offset_0x002E08
00002E08 7000                                       moveq   #$00, D0
00002E0A 41F8 ED00                                  lea     (Palette_Buffer).w, A0                       ; $FFFFED00
00002E0E 1038 F626                                  move.b  (Palette_Fade_Info).w, D0                    ; $FFFFF626
00002E12 D0C0                                       adda.w  D0, A0
00002E14 1038 F627                                  move.b  (Palette_Fade_Count).w, D0                   ; $FFFFF627
00002E18                            Offset_0x002E18:
00002E18 6100                                       bsr.s   Pal_DecColor                           ; Offset_0x002E36
00002E1A 51C8 FFFC                                  dbra    D0, Offset_0x002E18
00002E1E 7000                                       moveq   #$00, D0
00002E20 41F8 F080                                  lea     (Palette_Underwater_Buffer).w, A0            ; $FFFFF080
00002E24 1038 F626                                  move.b  (Palette_Fade_Info).w, D0                    ; $FFFFF626
00002E28 D0C0                                       adda.w  D0, A0
00002E2A 1038 F627                                  move.b  (Palette_Fade_Count).w, D0                   ; $FFFFF627
00002E2E                            Offset_0x002E2E:
00002E2E 6100                                       bsr.s   Pal_DecColor                           ; Offset_0x002E36
00002E30 51C8 FFFC                                  dbra    D0, Offset_0x002E2E
00002E34 4E75                                       rts
00002E36                            Pal_DecColor:                                                  ; Offset_0x002E36
00002E36 3410                                       move.w  (A0), D2
00002E38 6700                                       beq.s   Pal_NoDec                              ; Offset_0x002E62
00002E3A                            Pal_DecRed:                 
00002E3A 3202                                       move.w  D2, D1
00002E3C 0241 000E                                  andi.w  #$000E, D1
00002E40 6700                                       beq.s   Pal_DecGreen                           ; Offset_0x002E46
00002E42 5558                                       subq.w  #$02, (A0)+
00002E44 4E75                                       rts
00002E46                            Pal_DecGreen:                                                  ; Offset_0x002E46
00002E46 3202                                       move.w  D2, D1
00002E48 0241 00E0                                  andi.w  #$00E0, D1
00002E4C 6700                                       beq.s   Pal_DecBlue                            ; Offset_0x002E54
00002E4E 0458 0020                                  subi.w  #$0020, (A0)+
00002E52 4E75                                       rts
00002E54                            Pal_DecBlue:                                                   ; Offset_0x002E54
00002E54 3202                                       move.w  D2, D1
00002E56 0241 0E00                                  andi.w  #$0E00, D1
00002E5A 6700                                       beq.s   Pal_NoDec                              ; Offset_0x002E62
00002E5C 0458 0200                                  subi.w  #$0200, (A0)+
00002E60 4E75                                       rts
00002E62                            Pal_NoDec:                                                     ; Offset_0x002E62
00002E62 5448                                       addq.w  #$02, A0
00002E64 4E75                                       rts              
00002E66                            ;-------------------------------------------------------------------------------
00002E66                            Pal_MakeWhite: ; Usado pelo Special Stage                      ; Offset_0x002E66
00002E66 31FC 003F F626                             move.w  #$003F, (Palette_Fade_Info).w                ; $FFFFF626
00002E6C 7000                                       moveq   #$00, D0
00002E6E 41F8 ED00                                  lea     (Palette_Buffer).w, A0                       ; $FFFFED00
00002E72 1038 F626                                  move.b  (Palette_Fade_Info).w, D0                    ; $FFFFF626
00002E76 D0C0                                       adda.w  D0, A0
00002E78 323C 0EEE                                  move.w  #$0EEE, D1
00002E7C 1038 F627                                  move.b  (Palette_Fade_Count).w, D0                   ; $FFFFF627
00002E80                            Offset_0x002E80:
00002E80 30C1                                       move.w  D1, (A0)+
00002E82 51C8 FFFC                                  dbra    D0, Offset_0x002E80
00002E86 383C 0015                                  move.w  #$0015, D4
00002E8A                            Offset_0x002E8A:
00002E8A 11FC 0012 F62A                             move.b  #$12, (VBlank_Index).w                       ; $FFFFF62A
00002E90 6100 EC5C                                  bsr     Wait_For_VSync                         ; Offset_0x001AEE
00002E94 6100                                       bsr.s   Pal_WhiteToBlack                       ; Offset_0x002EA0
00002E96 6100 E6BE                                  bsr     RunPLC                                 ; Offset_0x001556
00002E9A 51CC FFEE                                  dbra    D4, Offset_0x002E8A
00002E9E 4E75                                       rts
00002EA0                            ;-------------------------------------------------------------------------------                
00002EA0                            Pal_WhiteToBlack:                                              ; Offset_0x002EA0
00002EA0 7000                                       moveq   #$00, D0
00002EA2 41F8 ED00                                  lea     (Palette_Buffer).w, A0                       ; $FFFFED00
00002EA6 43F8 ED80                                  lea     (Palette_Data_Target).w, A1                  ; $FFFFED80
00002EAA 1038 F626                                  move.b  (Palette_Fade_Info).w, D0                    ; $FFFFF626
00002EAE D0C0                                       adda.w  D0, A0
00002EB0 D2C0                                       adda.w  D0, A1
00002EB2 1038 F627                                  move.b  (Palette_Fade_Count).w, D0                   ; $FFFFF627
00002EB6                            Offset_0x002EB6:
00002EB6 6100                                       bsr.s   Pal_DecColor_2                         ; Offset_0x002EE0
00002EB8 51C8 FFFC                                  dbra    D0, Offset_0x002EB6
00002EBC 4A38 F730                                  tst.b   (Water_Level_Flag).w                         ; $FFFFF730
00002EC0 6700                                       beq.s   Offset_0x002EDE
00002EC2 7000                                       moveq   #$00, D0
00002EC4 41F8 F080                                  lea     (Palette_Underwater_Buffer).w, A0            ; $FFFFF080
00002EC8 43F8 F000                                  lea     (Palette_Underwater_Target).w, A1            ; $FFFFF000
00002ECC 1038 F626                                  move.b  (Palette_Fade_Info).w, D0                    ; $FFFFF626
00002ED0 D0C0                                       adda.w  D0, A0
00002ED2 D2C0                                       adda.w  D0, A1
00002ED4 1038 F627                                  move.b  (Palette_Fade_Count).w, D0                   ; $FFFFF627
00002ED8                            Offset_0x002ED8:
00002ED8 6100                                       bsr.s   Pal_DecColor_2                         ; Offset_0x002EE0
00002EDA 51C8 FFFC                                  dbra    D0, Offset_0x002ED8
00002EDE                            Offset_0x002EDE:
00002EDE 4E75                                       rts
00002EE0                            ;-------------------------------------------------------------------------------  
00002EE0                            Pal_DecColor_2:                                                ; Offset_0x002EE0
00002EE0 3419                                       move.w  (A1)+, D2
00002EE2 3610                                       move.w  (A0), D3
00002EE4 B642                                       cmp.w   D2, D3
00002EE6 6700                                       beq.s   Pal_NoDec_2                            ; Offset_0x002F0C
00002EE8                            Pal_DecBlue_2:                
00002EE8 3203                                       move.w  D3, D1
00002EEA 0441 0200                                  subi.w  #$0200, D1
00002EEE 6500                                       bcs.s   Pal_DecGreen_2                         ; Offset_0x002EF8
00002EF0 B242                                       cmp.w   D2, D1
00002EF2 6500                                       bcs.s   Pal_DecGreen_2                         ; Offset_0x002EF8
00002EF4 30C1                                       move.w  D1, (A0)+
00002EF6 4E75                                       rts
00002EF8                            Pal_DecGreen_2:                                                ; Offset_0x002EF8
00002EF8 3203                                       move.w  D3, D1
00002EFA 0441 0020                                  subi.w  #$0020, D1
00002EFE 6500                                       bcs.s   Pal_DecRed_2                           ; Offset_0x002F08
00002F00 B242                                       cmp.w   D2, D1
00002F02 6500                                       bcs.s   Pal_DecRed_2                           ; Offset_0x002F08
00002F04 30C1                                       move.w  D1, (A0)+
00002F06 4E75                                       rts
00002F08                            Pal_DecRed_2:                                                  ; Offset_0x002F08
00002F08 5558                                       subq.w  #$02, (A0)+
00002F0A 4E75                                       rts
00002F0C                            Pal_NoDec_2:                                                   ; Offset_0x002F0C
00002F0C 5448                                       addq.w  #$02, A0
00002F0E 4E75                                       rts   
00002F10                            ;-------------------------------------------------------------------------------
00002F10                            Pal_MakeFlash:  ; Usado pelo Special Stage                     ; Offset_0x002F10
00002F10 31FC 003F F626                             move.w  #$003F, (Palette_Fade_Info).w                ; $FFFFF626
00002F16 383C 0015                                  move.w  #$0015, D4
00002F1A                            Offset_0x002F1A:
00002F1A 11FC 0012 F62A                             move.b  #$12, (VBlank_Index).w                       ; $FFFFF62A
00002F20 6100 EBCC                                  bsr     Wait_For_VSync                         ; Offset_0x001AEE
00002F24 6100                                       bsr.s   Pal_ToWhite                            ; Offset_0x002F30
00002F26 6100 E62E                                  bsr     RunPLC                                 ; Offset_0x001556
00002F2A 51CC FFEE                                  dbra    D4, Offset_0x002F1A
00002F2E 4E75                                       rts
00002F30                            Pal_ToWhite:                                                   ; Offset_0x002F30
00002F30 7000                                       moveq   #$00, D0
00002F32 41F8 ED00                                  lea     (Palette_Buffer).w, A0                       ; $FFFFED00
00002F36 1038 F626                                  move.b  (Palette_Fade_Info).w, D0                    ; $FFFFF626
00002F3A D0C0                                       adda.w  D0, A0
00002F3C 1038 F627                                  move.b  (Palette_Fade_Count).w, D0                   ; $FFFFF627
00002F40                            Offset_0x002F40:
00002F40 6100                                       bsr.s   Pal_AddColor_2                         ; Offset_0x002F5E
00002F42 51C8 FFFC                                  dbra    D0, Offset_0x002F40
00002F46 7000                                       moveq   #$00, D0
00002F48 41F8 F080                                  lea     (Palette_Underwater_Buffer).w, A0            ; $FFFFF080
00002F4C 1038 F626                                  move.b  (Palette_Fade_Info).w, D0                    ; $FFFFF626
00002F50 D0C0                                       adda.w  D0, A0
00002F52 1038 F627                                  move.b  (Palette_Fade_Count).w, D0                   ; $FFFFF627
00002F56                            Offset_0x002F56:
00002F56 6100                                       bsr.s   Pal_AddColor_2                         ; Offset_0x002F5E
00002F58 51C8 FFFC                                  dbra    D0, Offset_0x002F56
00002F5C 4E75                                       rts
00002F5E                            Pal_AddColor_2:                                                ; Offset_0x002F5E
00002F5E 3410                                       move.w  (A0), D2
00002F60 0C42 0EEE                                  cmpi.w  #$0EEE, D2
00002F64 6700                                       beq.s   Pal_NoAdd_2                            ; Offset_0x002F9A
00002F66                            Pal_AddRed_2:                
00002F66 3202                                       move.w  D2, D1
00002F68 0241 000E                                  andi.w  #$000E, D1
00002F6C 0C41 000E                                  cmpi.w  #$000E, D1
00002F70 6700                                       beq.s   Pal_AddGreen_2                         ; Offset_0x002F76
00002F72 5458                                       addq.w  #$02, (A0)+
00002F74 4E75                                       rts
00002F76                            Pal_AddGreen_2:                                                ; Offset_0x002F76
00002F76 3202                                       move.w  D2, D1
00002F78 0241 00E0                                  andi.w  #$00E0, D1
00002F7C 0C41 00E0                                  cmpi.w  #$00E0, D1
00002F80 6700                                       beq.s   Pal_AddBlue_2                          ; Offset_0x002F88
00002F82 0658 0020                                  addi.w  #$0020, (A0)+
00002F86 4E75                                       rts
00002F88                            Pal_AddBlue_2:                                                 ; Offset_0x002F88
00002F88 3202                                       move.w  D2, D1
00002F8A 0241 0E00                                  andi.w  #$0E00, D1
00002F8E 0C41 0E00                                  cmpi.w  #$0E00, D1
00002F92 6700                                       beq.s   Pal_NoAdd_2                            ; Offset_0x002F9A
00002F94 0658 0200                                  addi.w  #$0200, (A0)+
00002F98 4E75                                       rts
00002F9A                            Pal_NoAdd_2:                                                   ; Offset_0x002F9A
00002F9A 5448                                       addq.w  #$02, A0
00002F9C 4E75                                       rts                                                                              
00002F9E                            ;===============================================================================
00002F9E                            ; Rotinas para escurecer / clarear a tela progressivamente
00002F9E                            ; <<<-
00002F9E                            ;===============================================================================
00002F9E                            
00002F9E                            ;===============================================================================
00002F9E                            ; Rotinas para carga da paleta selecionada em D0 no buffer de paletas
00002F9E                            ; ->>>
00002F9E                            ;===============================================================================
00002F9E                            PalLoad1:                                                      ; Offset_0x002F9E
00002F9E 43F9 0000 0000                             lea     (PalPointers), A1                      ; Offset_0x1E94F4
00002FA4 E748                                       lsl.w   #$03, D0
00002FA6 D2C0                                       adda.w  D0, A1
00002FA8 2459                                       move.l  (A1)+, A2               ; Localiza__o da paleta no ROM  
00002FAA 3659                                       move.w  (A1)+, A3               ; Destino da paleta na RAM
00002FAC D6FC 0080                                  adda.w  #$0080, A3              ; Adiciona $80 no Destino da RAM
00002FB0 3E19                                       move.w  (A1)+, D7               ; Quantidade de cores a ser lido
00002FB2                            PalLoad1_Loop:                                                 ; Offset_0x002FB2
00002FB2 26DA                                       move.l  (A2)+, (A3)+
00002FB4 51CF FFFC                                  dbra    D7, PalLoad1_Loop                      ; Offset_0x002FB2
00002FB8 4E75                                       rts 
00002FBA                            ;-------------------------------------------------------------------------------    
00002FBA                            PalLoad2:                                                      ; Offset_0x002FBA
00002FBA 43F9 0000 0000                             lea     (PalPointers), A1                      ; Offset_0x1E94F4
00002FC0 E748                                       lsl.w   #$03, D0
00002FC2 D2C0                                       adda.w  D0, A1
00002FC4 2459                                       move.l  (A1)+, A2               ; Localiza__o da paleta no ROM
00002FC6 3659                                       move.w  (A1)+, A3               ; Destino da paleta na RAM 
00002FC8 3E19                                       move.w  (A1)+, D7               ; Quantidade de cores a ser lido
00002FCA                            PalLoad2_Loop:                                                 ; Offset_0x002FCA
00002FCA 26DA                                       move.l  (A2)+, (A3)+
00002FCC 51CF FFFC                                  dbra    D7, PalLoad2_Loop                      ; Offset_0x002FCA
00002FD0 4E75                                       rts         
00002FD2                            ;-------------------------------------------------------------------------------  
00002FD2                            PalLoad3_Water:                                                ; Offset_0x002FD2
00002FD2 43F9 0000 0000                             lea     (PalPointers), A1                      ; Offset_0x1E94F4
00002FD8 E748                                       lsl.w   #$03, D0
00002FDA D2C0                                       adda.w  D0, A1
00002FDC 2459                                       move.l  (A1)+, A2              ; Localiza__o da paleta no ROM
00002FDE 3659                                       move.w  (A1)+, A3              ; Destino da paleta na RAM 
00002FE0 D6FC 0380                                  adda.w  #$0380, A3             ; Subtrai $0380 no Destino da RAM    
00002FE4 3E19                                       move.w  (A1)+, D7              ; Quantidade de cores a ser lido
00002FE6                            PalLoad3_Loop:                                                 ; Offset_0x002FE6
00002FE6 26DA                                       move.l  (A2)+, (A3)+
00002FE8 51CF FFFC                                  dbra    D7, PalLoad3_Loop                      ; Offset_0x002FE6
00002FEC 4E75                                       rts            
00002FEE                            ;-------------------------------------------------------------------------------
00002FEE                            PalLoad4_Water:                                                ; Offset_0x002FEE
00002FEE 43F9 0000 0000                             lea     (PalPointers), A1                      ; Offset_0x1E94F4
00002FF4 E748                                       lsl.w   #$03, D0
00002FF6 D2C0                                       adda.w  D0, A1
00002FF8 2459                                       move.l  (A1)+, A2              ; Localiza__o da paleta no ROM
00002FFA 3659                                       move.w  (A1)+, A3              ; Destino da paleta na RAM 
00002FFC D6FC 0300                                  adda.w  #$0300, A3             ; Subtrai $0300 no Destino da RAM 
00003000 3E19                                       move.w  (A1)+, D7              ; Quantidade de cores a ser lido
00003002                            PalLoad4_Loop:                                                 ; Offset_0x003002
00003002 26DA                                       move.l  (A2)+, (A3)+
00003004 51CF FFFC                                  dbra    D7, PalLoad4_Loop                      ; Offset_0x003002
00003008 4E75                                       rts                        
0000300A                            ;===============================================================================
0000300A                            ; Rotinas para carga da paleta selecionada em D0 no buffer de paletas
0000300A                            ; <<<-
0000300A                            ;===============================================================================  
0000300A                            
0000300A                            ;===============================================================================
0000300A                            ; Logo da SEGA
0000300A                            ; ->>>
0000300A                            ;=============================================================================== 
0000300A                            Sega_Screen:                                                   ; Offset_0x00300A
0000300A 70E1                                       moveq   #Stop_Sound, D0                                   ; -$1F
0000300C 6100 E168                                  bsr     Play_Music                             ; Offset_0x001176
00003010 6100 E536                                  bsr     ClearPLC                               ; Offset_0x001548
00003014 6100 FDD2                                  bsr     Pal_FadeFrom                           ; Offset_0x002DE8
00003018 43F8 F700                                  lea     (Miles_Control_Vars).w, A1                   ; $FFFFF700
0000301C 7000                                       moveq   #$00, D0
0000301E 323C 003F                                  move.w  #$003F, D1
00003022                            Offset_0x003022:
00003022 22C0                                       move.l  D0, (A1)+
00003024 51C9 FFFC                                  dbra    D1, Offset_0x003022
00003028 43F8 B000                                  lea     (Obj_Memory_Address).w, A1                   ; $FFFFB000
0000302C 7000                                       moveq   #$00, D0
0000302E 323C 07FF                                  move.w  #$07FF, D1
00003032                            Offset_0x003032:
00003032 22C0                                       move.l  D0, (A1)+
00003034 51C9 FFFC                                  dbra    D1, Offset_0x003032
00003038 4DF9 00C0 0004                             lea     (VDP_Control_Port), A6                       ; $00C00004
0000303E 3CBC 8004                                  move.w  #$8004, (A6)
00003042 3CBC 8230                                  move.w  #$8230, (A6)
00003046 3CBC 8405                                  move.w  #$8405, (A6)
0000304A 3CBC 8700                                  move.w  #$8700, (A6)
0000304E 3CBC 8B03                                  move.w  #$8B03, (A6)
00003052 3CBC 8C81                                  move.w  #$8C81, (A6)
00003056 3CBC 9003                                  move.w  #$9003, (A6)
0000305A 4238 F64E                                  clr.b   (Underwater_Flag).w                          ; $FFFFF64E
0000305E 4278 FFD8                                  clr.w   (Two_Player_Flag).w                          ; $FFFFFFD8
00003062 46FC 2700                                  move    #$2700, SR
00003066 3038 F60E                                  move.w  (VDP_Register_1_Command).w, D0               ; $FFFFF60E
0000306A 0200 00BF                                  andi.b  #$BF, D0
0000306E 33C0 00C0 0004                             move.w  D0, (VDP_Control_Port)                       ; $00C00004
00003074 6100 DF8C                                  bsr     ClearScreen                            ; Offset_0x001002
00003078 4BF9 00C0 0004                             lea     (VDP_Control_Port), A5                       ; $00C00004
0000307E 3ABC 8F01                                  move.w  #$8F01, (A5)
00003082 2ABC 941F 93FF                             move.l  #$941F93FF, (A5)
00003088 3ABC 9780                                  move.w  #$9780, (A5)
0000308C 2ABC 4000 0083                             move.l  #$40000083, (A5)
00003092 33FC 0000 00C0 0000                        move.w  #$0000, (VDP_Data_Port)                      ; $00C00000
0000309A                            Offset_0x00309A:
0000309A 3215                                       move.w  (A5), D1
0000309C 0801 0001                                  btst    #$01, D1
000030A0 66F8                                       bne.s   Offset_0x00309A
000030A2 3ABC 8F02                                  move.w  #$8F02, (A5)
000030A6 23FC 4020 0000 00C0 0004                   move.l  #$40200000, (VDP_Control_Port)               ; $00C00004
000030B0 41F9 0000 0000                             lea     (Art_SEGA), A0                         ; Offset_0x10417A
000030B6 6100 E2D8                                  bsr     NemesisDec                             ; Offset_0x001390
000030BA 23FC 5000 0000 00C0 0004                   move.l  #$50000000, (VDP_Control_Port)               ; $00C00004
000030C4 41F9 0000 0000                             lea     (Art_SEGA_Some_Blocks), A0             ; Offset_0x1045FA
000030CA 6100 E2C4                                  bsr     NemesisDec                             ; Offset_0x001390
000030CE 43F9 FFFF 0000                             lea     (M68K_RAM_Start), A1                         ; $FFFF0000
000030D4 41F9 0000 0000                             lea     (SEGA_Mappings), A0                    ; Offset_0x104612
000030DA 303C 0000                                  move.w  #$0000, D0
000030DE 6100 E5AA                                  bsr     EnigmaDec                              ; Offset_0x00168A
000030E2 43F9 FFFF 0000                             lea     (M68K_RAM_Start), A1                         ; $FFFF0000
000030E8 203C 6000 0002                             move.l  #$60000002, D0
000030EE 7227                                       moveq   #$27, D1
000030F0 741B                                       moveq   #$1B, D2
000030F2 6100 0000                                  bsr     Offset_0x0031B4
000030F6 4A38 FFF8                                  tst.b   (Hardware_Id).w                              ; $FFFFFFF8
000030FA 6B00                                       bmi.s   Offset_0x00310C
000030FC 43F8 B094                                  lea     (Obj_02_Mem_Address).w, A1                   ; $FFFFB094
00003100 22BC 0000 0000                             move.l  #Obj_S2_0xB1_Sonic_Sega_Logo, (A1)     ; Offset_0x0346BC
00003106 137C 004E 002C                             move.b  #$4E, Obj_Subtype(A1)                            ; $002C
0000310C                            Offset_0x00310C:
0000310C 7000                                       moveq   #$00, D0
0000310E 6100 FEAA                                  bsr     PalLoad2                               ; Offset_0x002FBA
00003112 31FC FFF6 F632                             move.w  #$FFF6, (Palette_Cycle_Count_0).w            ; $FFFFF632
00003118 31FC 0000 F634                             move.w  #$0000, (Palette_Cycle_Count_1).w            ; $FFFFF634
0000311E 31FC 0000 F662                             move.w  #$0000, (VBlank_Subroutine).w                ; $FFFFF662
00003124 31FC 0000 F660                             move.w  #$0000, (PalCycle_Done_Flag).w               ; $FFFFF660
0000312A 43F8 B04A                                  lea     (Obj_Player_Two).w, A1                       ; $FFFFB04A
0000312E 22BC 0000 0000                             move.l  #Obj_S2_0xB0_Sonic_Sega_Logo, (A1)     ; Offset_0x034488
00003134 137C 004C 002C                             move.b  #$4C, Obj_Subtype(A1)                            ; $002C
0000313A 31FC 00F0 F614                             move.w  #$00F0, (Demo_Timer).w                       ; $FFFFF614
00003140 4EB9 0000 0000                             jsr     (Init_Sprite_Table)                    ; Offset_0x011042
00003146 3038 F60E                                  move.w  (VDP_Register_1_Command).w, D0               ; $FFFFF60E
0000314A 0000 0040                                  ori.b   #$40, D0
0000314E 33C0 00C0 0004                             move.w  D0, (VDP_Control_Port)                       ; $00C00004
00003154                            Offset_0x003154:
00003154 11FC 0002 F62A                             move.b  #$02, (VBlank_Index).w                       ; $FFFFF62A
0000315A 6100 E992                                  bsr     Wait_For_VSync                         ; Offset_0x001AEE
0000315E 4EB9 0000 0000                             jsr     (Load_Objects)                         ; Offset_0x0110AE
00003164 4EB9 0000 0000                             jsr     (Build_Sprites)                        ; Offset_0x011296
0000316A 4A38 F660                                  tst.b   (PalCycle_Done_Flag).w                       ; $FFFFF660
0000316E 67E4                                       beq.s   Offset_0x003154
00003170 70FF                                       moveq   #Sega_PCM, D0                                     ; -$01
00003172 6100 E002                                  bsr     Play_Music                             ; Offset_0x001176
00003176 11FC 0002 F62A                             move.b  #$02, (VBlank_Index).w                       ; $FFFFF62A
0000317C 6100 E970                                  bsr     Wait_For_VSync                         ; Offset_0x001AEE
00003180 31FC 00B4 F614                             move.w  #$00B4, (Demo_Timer).w                       ; $FFFFF614
00003186                            Offset_0x003186:
00003186 11FC 0014 F62A                             move.b  #$14, (VBlank_Index).w                       ; $FFFFF62A
0000318C 6100 E960                                  bsr     Wait_For_VSync                         ; Offset_0x001AEE
00003190 4A78 F614                                  tst.w   (Demo_Timer).w                               ; $FFFFF614
00003194 6700                                       beq.s   Offset_0x0031A4
00003196 1038 F605                                  move.b  (Control_Ports_Buffer_Data+$0001).w, D0      ; $FFFFF605
0000319A 8038 F607                                  or.b    (Control_Ports_Buffer_Data+$0003).w, D0      ; $FFFFF607
0000319E 0200 0080                                  andi.b  #$80, D0
000031A2 67E2                                       beq.s   Offset_0x003186
000031A4                            Offset_0x0031A4:
000031A4 4278 F660                                  clr.w   (PalCycle_Done_Flag).w                       ; $FFFFF660
000031A8 4278 F662                                  clr.w   (VBlank_Subroutine).w                        ; $FFFFF662
000031AC 11FC 0004 F600                             move.b  #gm_TitleScreen, (Game_Mode).w          ; $04, $FFFFF600
000031B2 4E75                                       rts
000031B4                            Offset_0x0031B4:
000031B4 4DF9 00C0 0000                             lea     (VDP_Data_Port), A6                          ; $00C00000
000031BA 283C 0100 0000                             move.l  #$01000000, D4
000031C0                            Offset_0x0031C0:
000031C0 2D40 0004                                  move.l  D0, $0004(A6)
000031C4 3601                                       move.w  D1, D3
000031C6                            Offset_0x0031C6:
000031C6 3C99                                       move.w  (A1)+, (A6)
000031C8 51CB FFFC                                  dbra    D3, Offset_0x0031C6
000031CC D084                                       add.l   D4, D0
000031CE 51CA FFF0                                  dbra    D2, Offset_0x0031C0
000031D2 4E75                                       rts    
000031D4                            ;===============================================================================
000031D4                            ; Logo da SEGA
000031D4                            ; <<<-
000031D4                            ;===============================================================================
000031D4                            
000031D4                            ;===============================================================================
000031D4                            ; Tela t_tulo
000031D4                            ; ->>>
000031D4                            ;===============================================================================   
000031D4                            Title_Screen:                                                  ; Offset_0x0031D4
000031D4 70E0                                       moveq   #Volume_Down, D0                                  ; -$20
000031D6 6100 DF9E                                  bsr     Play_Music                             ; Offset_0x001176
000031DA 6100 E36C                                  bsr     ClearPLC                               ; Offset_0x001548
000031DE 6100 FC08                                  bsr     Pal_FadeFrom                           ; Offset_0x002DE8
000031E2 46FC 2700                                  move    #$2700, SR
000031E6 4DF9 00C0 0004                             lea     (VDP_Control_Port), A6                       ; $00C00004
000031EC 3CBC 8004                                  move.w  #$8004, (A6)
000031F0 3CBC 8230                                  move.w  #$8230, (A6)
000031F4 3CBC 8407                                  move.w  #$8407, (A6)
000031F8 3CBC 9011                                  move.w  #$9011, (A6)
000031FC 3CBC 9200                                  move.w  #$9200, (A6)
00003200 3CBC 8B03                                  move.w  #$8B03, (A6)
00003204 3CBC 8720                                  move.w  #$8720, (A6)
00003208 4238 F64E                                  clr.b   (Underwater_Flag).w                          ; $FFFFF64E
0000320C 3CBC 8C81                                  move.w  #$8C81, (A6)
00003210 6100 DDF0                                  bsr     ClearScreen                            ; Offset_0x001002
00003214 43F8 AC00                                  lea     (Sprite_Table_Input).w, A1                   ; $FFFFAC00
00003218 7000                                       moveq   #$00, D0
0000321A 323C 00FF                                  move.w  #$00FF, D1
0000321E                            Offset_0x00321E:
0000321E 22C0                                       move.l  D0, (A1)+
00003220 51C9 FFFC                                  dbra    D1, Offset_0x00321E
00003224 43F8 B000                                  lea     (Obj_Memory_Address).w, A1                   ; $FFFFB000
00003228 7000                                       moveq   #$00, D0
0000322A 323C 07FF                                  move.w  #$07FF, D1
0000322E                            Offset_0x00322E:
0000322E 22C0                                       move.l  D0, (A1)+
00003230 51C9 FFFC                                  dbra    D1, Offset_0x00322E
00003234 43F8 F700                                  lea     (Miles_Control_Vars).w, A1                   ; $FFFFF700
00003238 7000                                       moveq   #$00, D0
0000323A 323C 003F                                  move.w  #$003F, D1
0000323E                            Offset_0x00323E:
0000323E 22C0                                       move.l  D0, (A1)+
00003240 51C9 FFFC                                  dbra    D1, Offset_0x00323E
00003244 43F8 EE00                                  lea     (Camera_RAM).w, A1                           ; $FFFFEE00
00003248 7000                                       moveq   #$00, D0
0000324A 323C 003F                                  move.w  #$003F, D1
0000324E                            Offset_0x00324E:
0000324E 22C0                                       move.l  D0, (A1)+
00003250 51C9 FFFC                                  dbra    D1, Offset_0x00324E
00003254 4EB9 0000 0000                             jsr     (Init_Sprite_Table)                    ; Offset_0x011042
0000325A 43F8 ED00                                  lea     (Palette_Buffer).w, A1                       ; $FFFFED00
0000325E 7000                                       moveq   #$00, D0
00003260 323C 003F                                  move.w  #$003F, D1
00003264                            Offset_0x003264:
00003264 22C0                                       move.l  D0, (A1)+
00003266 51C9 FFFC                                  dbra    D1, Offset_0x003264
0000326A 11FC 0000 FE30                             move.b  #$00, (Saved_Level_Flag).w                   ; $FFFFFE30
00003270 11FC 0000 FEE0                             move.b  #$00, (Saved_Level_Flag_P2).w                ; $FFFFFEE0
00003276 31FC 0000 FE08                             move.w  #$0000, (Debug_Mode_Flag_Index).w            ; $FFFFFE08
0000327C 31FC 0000 FFF0                             move.w  #$0000, (Auto_Control_Player_Flag).w         ; $FFFFFFF0
00003282 31FC 0000 F634                             move.w  #$0000, (Palette_Cycle_Count_1).w            ; $FFFFF634
00003288 31FC 0000 FFD8                             move.w  #$0000, (Two_Player_Flag).w                  ; $FFFFFFD8
0000328E 11FC 0000 F711                             move.b  #$00, (Title_Card_Flag).w                    ; $FFFFF711
00003294 11FC 0000 FFFA                             move.b  #$00, (Debug_Mode_Active).w                  ; $FFFFFFFA
0000329A 31FC 0000 FFD8                             move.w  #$0000, (Two_Player_Flag).w                  ; $FFFFFFD8
000032A0 31FC 0167 F614                             move.w  #$0167, (Demo_Timer).w                       ; $FFFFF614
000032A6 4278 E700                                  clr.w   (DMA_Buffer_List).w                          ; $FFFFE700
000032AA 21FC FFFF E700 E8F8                        move.l  #DMA_Buffer_List, (DMA_Buffer_List_End).w    ; $FFFFE700, $FFFFE8F8
000032B2 45F9 0000 0000                             lea     (Title_Screen_Sonic_3_Data), A2        ; Offset_0x00375E
000032B8 201A                                       move.l  (A2)+, D0
000032BA 0280 00FF FFFF                             andi.l  #$00FFFFFF, D0
000032C0 2040                                       move.l  D0, A0
000032C2 43F9 FFFF 0000                             lea     (M68K_RAM_Start), A1                         ; $FFFF0000
000032C8 6100 E53E                                  bsr     KosinskiDec                            ; Offset_0x001808
000032CC 3609                                       move.w  A1, D3
000032CE E24B                                       lsr.w   #$01, D3
000032D0 223C FFFF 0000                             move.l  #M68K_RAM_Start, D1                          ; $FFFF0000
000032D6 343C 8000                                  move.w  #$8000, D2
000032DA 0281 00FF FFFF                             andi.l  #$00FFFFFF, D1
000032E0 4EB9 0000 12FC                             jsr     (DMA_68KtoVRAM)                        ; Offset_0x0012FC
000032E6 205A                                       move.l  (A2)+, A0
000032E8 43F8 ED60                                  lea     (Palette_Row_3_Offset).w, A1                 ; $FFFFED60
000032EC 7007                                       moveq   #$07, D0
000032EE                            Offset_0x0032EE:
000032EE 22D8                                       move.l  (A0)+, (A1)+
000032F0 51C8 FFFC                                  dbra    D0, Offset_0x0032EE
000032F4 43F9 FFFF 4000                             lea     (M68K_RAM_Start+$4000), A1                   ; $FFFF4000
000032FA 7000                                       moveq   #$00, D0
000032FC 323C 04FF                                  move.w  #$04FF, D1
00003300                            Offset_0x003300:
00003300 22C0                                       move.l  D0, (A1)+
00003302 51C9 FFFC                                  dbra    D1, Offset_0x003300
00003306 43F9 FFFF 4000                             lea     (M68K_RAM_Start+$4000), A1                   ; $FFFF4000
0000330C 205A                                       move.l  (A2)+, A0
0000330E 303C 6400                                  move.w  #$6400, D0
00003312 6100 E376                                  bsr     EnigmaDec                              ; Offset_0x00168A
00003316 43F9 FFFF 4000                             lea     (M68K_RAM_Start+$4000), A1                   ; $FFFF4000
0000331C 203C 4000 0003                             move.l  #$40000003, D0
00003322 7227                                       moveq   #$27, D1
00003324 743F                                       moveq   #$3F, D2
00003326 4EB9 0000 12BC                             jsr     (ShowVDPGraphics)                      ; Offset_0x0012BC
0000332C 11FC 0002 FFBD                             move.b  #$02, (Title_Screen_Animate_Delay).w         ; $FFFFFFBD
00003332 31FC FFA0 F616                             move.w  #$FFA0, (Vertical_Scroll_Value).w            ; $FFFFF616
00003338 31FC 0400 EE02                             move.w  #$0400, (Vertical_Scrolling).w               ; $FFFFEE02
0000333E 21FC FFA0 0000 EE7C                        move.l  #$FFA00000, (Camera_Y).w                     ; $FFFFEE7C
00003346 11FC 0004 F62A                             move.b  #$04, (VBlank_Index).w                       ; $FFFFF62A
0000334C 6100 E7A0                                  bsr     Wait_For_VSync                         ; Offset_0x001AEE
00003350 11FC 00FF FFBC                             move.b  #$FF, (Title_Screen_Animate_Buffer).w        ; $FFFFFFBC
00003356 11FC 0001 FFBD                             move.b  #$01, (Title_Screen_Animate_Delay).w         ; $FFFFFFBD
0000335C 31FC 0001 FFBE                             move.w  #$0001, (Title_Screen_Animate_Frame).w       ; $FFFFFFBE
00003362 7000                                       moveq   #$00, D0
00003364 6100 0000                                  bsr     Offset_0x00369E
00003368 11FC 0004 F62A                             move.b  #$04, (VBlank_Index).w                       ; $FFFFF62A
0000336E 6100 E77E                                  bsr     Wait_For_VSync                         ; Offset_0x001AEE
00003372 7000                                       moveq   #$00, D0
00003374 6100 E1A6                                  bsr     LoadPLC2                               ; Offset_0x00151C
00003378 31FC 0000 FFD4                             move.w  #$0000, (Secret_Code_Input_Entries).w        ; $FFFFFFD4
0000337E 31FC 0000 FFD6                             move.w  #$0000, (Secret_Code_Input_Entries_2).w      ; $FFFFFFD6
00003384 31FC 0101 FFD0                             move.w  #$0101, (Level_Select_Flag).w                ; $FFFFFFD0
0000338A 4E71                                       nop
0000338C 4E71                                       nop
0000338E 4E71                                       nop
00003390 7025                                       moveq   #Title_Screen_Snd, D0                              ; $25
00003392 6100 DDE2                                  bsr     Play_Music                             ; Offset_0x001176
00003396 3038 F60E                                  move.w  (VDP_Register_1_Command).w, D0               ; $FFFFF60E
0000339A 0000 0040                                  ori.b   #$40, D0
0000339E 33C0 00C0 0004                             move.w  D0, (VDP_Control_Port)                       ; $00C00004
000033A4                            Offset_0x0033A4:
000033A4 11FC 0004 F62A                             move.b  #$04, (VBlank_Index).w                       ; $FFFFF62A
000033AA 6100 E742                                  bsr     Wait_For_VSync                         ; Offset_0x001AEE
000033AE 6100 0000                                  bsr     Offset_0x0035EA
000033B2 4EB9 0000 0000                             jsr     (Load_Objects)                         ; Offset_0x0110AE
000033B8 4EB9 0000 0000                             jsr     (Build_Sprites)                        ; Offset_0x011296
000033BE 6100 E196                                  bsr     RunPLC                                 ; Offset_0x001556
000033C2 6100 0000                                  bsr     Secret_Codes_Test                      ; Offset_0x003554
000033C6 4A78 F614                                  tst.w   (Demo_Timer).w                               ; $FFFFF614
000033CA 6700 0000                                  beq     Offset_0x0034D2
000033CE 1038 F605                                  move.b  (Control_Ports_Buffer_Data+$0001).w, D0      ; $FFFFF605
000033D2 8038 F607                                  or.b    (Control_Ports_Buffer_Data+$0003).w, D0      ; $FFFFF607
000033D6 0200 0080                                  andi.b  #$80, D0
000033DA 6700 FFC8                                  beq     Offset_0x0033A4
000033DE 11FC 000C F600                             move.b  #gm_PlayMode, (Game_Mode).w             ; $0C, $FFFFF600
000033E4 11FC 0003 FE12                             move.b  #$03, (Life_Count).w                         ; $FFFFFE12
000033EA 11FC 0003 FEC6                             move.b  #$03, (Life_Count_P2).w                      ; $FFFFFEC6
000033F0 7000                                       moveq   #$00, D0
000033F2 31C0 FE20                                  move.w  D0, (Ring_Count_Address).w                   ; $FFFFFE20
000033F6 21C0 FE22                                  move.l  D0, (Time_Count_Address).w                   ; $FFFFFE22
000033FA 21C0 FE26                                  move.l  D0, (Score_Count_Address).w                  ; $FFFFFE26
000033FE 31C0 FED0                                  move.w  D0, (Ring_Count_Address_P2).w                ; $FFFFFED0
00003402 21C0 FED2                                  move.l  D0, (Time_Count_Address_P2).w                ; $FFFFFED2
00003406 21C0 FED6                                  move.l  D0, (Score_Count_Address_P2).w               ; $FFFFFED6
0000340A 11C0 FE18                                  move.b  D0, (Continue_Count).w                       ; $FFFFFE18
0000340E 21FC 0000 1388 FFC0                        move.l  #$00001388, (Next_Extra_Life_Score).w        ; $FFFFFFC0
00003416 21FC 0000 1388 FFC4                        move.l  #$00001388, (Next_Extra_Life_Score_P2).w     ; $FFFFFFC4
0000341E 70E0                                       moveq   #Volume_Down, D0                                  ; -$20
00003420 6100 DD54                                  bsr     Play_Music                             ; Offset_0x001176
00003424 7000                                       moveq   #$00, D0
00003426 1038 FF86                                  move.b  (Title_Screen_Menu_Cursor).w, D0             ; $FFFFFF86
0000342A 6600                                       bne.s   Title_Screen_Check_2_Player_Vs         ; Offset_0x00349A
0000342C 7000                                       moveq   #$00, D0
0000342E 31C0 FF8A                                  move.w  D0, (Two_Player_Flag_2).w                    ; $FFFFFF8A
00003432 31C0 FFD8                                  move.w  D0, (Two_Player_Flag).w                      ; $FFFFFFD8
00003436 31C0 FE10                                  move.w  D0, (Level_Id).w                             ; $FFFFFE10
0000343A 31C0 EE54                                  move.w  D0, (Level_Id_2).w                           ; $FFFFEE54
0000343E 31FC 0000 FE10                             move.w  #AIz_Act_1, (Level_Id).w              ; $0000, $FFFFFE10
00003444 31FC 0000 EE54                             move.w  #AIz_Act_1, (Level_Id_2).w            ; $0000, $FFFFEE54
0000344A 4A38 FFD0                                  tst.b   (Level_Select_Flag).w                        ; $FFFFFFD0
0000344E 6700                                       beq.s   Offset_0x003488
00003450 11FC 0028 F600                             move.b  #gm_Level_Select_Menu, (Game_Mode).w    ; $28, $FFFFF600
00003456 0838 0006 F604                             btst    #Btn_A, (Control_Ports_Buffer_Data).w   ; $06, $FFFFF604
0000345C 6700                                       beq.s   Offset_0x003466
0000345E 31FC 0000 FF0A                             move.w  #Sonic_And_Miles, (Player_Select_Flag).w ; $0000, $FFFFFF0A
00003464 4E75                                       rts
00003466                            Offset_0x003466:
00003466 0838 0004 F604                             btst    #Btn_B, (Control_Ports_Buffer_Data).w   ; $04, $FFFFF604
0000346C 6700                                       beq.s   Offset_0x003476
0000346E 31FC 0001 FF0A                             move.w  #Sonic_Alone, (Player_Select_Flag).w  ; $0001, $FFFFFF0A
00003474 4E75                                       rts
00003476                            Offset_0x003476:
00003476 0838 0005 F604                             btst    #Btn_C, (Control_Ports_Buffer_Data).w   ; $05, $FFFFF604
0000347C 6700                                       beq.s   Offset_0x003486
0000347E 31FC 0002 FF0A                             move.w  #Miles_Alone, (Player_Select_Flag).w  ; $0002, $FFFFFF0A
00003484 4E75                                       rts
00003486                            Offset_0x003486:
00003486 4E75                                       rts
00003488                            Offset_0x003488:
00003488 31C0 FE16                                  move.w  D0, (Special_Stage_Id).w                     ; $FFFFFE16
0000348C 31C0 FFB0                                  move.w  D0, (SS_Completed_Flag).w                    ; $FFFFFFB0
00003490 21C0 FFB2                                  move.l  D0, (Emerald_Collected_Flag_List).w          ; $FFFFFFB2
00003494 21C0 FFB6                                  move.l  D0, (Emerald_Collected_Flag_List+$04).w      ; $FFFFFFB6
00003498 4E75                                       rts
0000349A                            Title_Screen_Check_2_Player_Vs:                                ; Offset_0x00349A
0000349A 5300                                       subq.b  #$01, D0
0000349C 6600                                       bne.s   Title_Screen_Load_Options_Menu         ; Offset_0x0034C4
0000349E 7201                                       moveq   #$01, D1
000034A0 31C1 FF8A                                  move.w  D1, (Two_Player_Flag_2).w                    ; $FFFFFF8A
000034A4 31C1 FFD8                                  move.w  D1, (Two_Player_Flag).w                      ; $FFFFFFD8
000034A8 7000                                       moveq   #$00, D0
000034AA 31C0 FFB0                                  move.w  D0, (SS_Completed_Flag).w                    ; $FFFFFFB0
000034AE 21C0 FFB2                                  move.l  D0, (Emerald_Collected_Flag_List).w          ; $FFFFFFB2
000034B2 21C0 FFB6                                  move.l  D0, (Emerald_Collected_Flag_List+$04).w      ; $FFFFFFB6
000034B6 11FC 001C F600                             move.b  #gm_S2_Versus_Mode_Menu, (Game_Mode).w  ; $1C, $FFFFF600
000034BC 11FC 0000 FF88                             move.b  #$00, (Level_Id_2P).w                        ; $FFFFFF88
000034C2 4E75                                       rts
000034C4                            Title_Screen_Load_Options_Menu:                                ; Offset_0x0034C4
000034C4 11FC 0024 F600                             move.b  #gm_S2_Options_Menu, (Game_Mode).w      ; $24, $FFFFF600
000034CA 11FC 0000 FF8C                             move.b  #$00, (Options_Menu_Cursor).w                ; $FFFFFF8C
000034D0 4E75                                       rts
000034D2                            Offset_0x0034D2:
000034D2 70E0                                       moveq   #Volume_Down, D0                                  ; -$20
000034D4 6100 DCA0                                  bsr     Play_Music                             ; Offset_0x001176
000034D8 3038 FFF2                                  move.w  (Demo_Sequence_Idx).w, D0                    ; $FFFFFFF2
000034DC 0240 0007                                  andi.w  #$0007, D0
000034E0 D040                                       add.w   D0, D0
000034E2 303B 0000                                  move.w  Demo_Mode_Level_Array(PC, D0), D0      ; Offset_0x003544
000034E6 31C0 FE10                                  move.w  D0, (Level_Id).w                             ; $FFFFFE10
000034EA 31C0 EE54                                  move.w  D0, (Level_Id_2).w                           ; $FFFFEE54
000034EE 5278 FFF2                                  addq.w  #$01, (Demo_Sequence_Idx).w                  ; $FFFFFFF2
000034F2 0C78 0004 FFF2                             cmpi.w  #$0004, (Demo_Sequence_Idx).w                ; $FFFFFFF2
000034F8 6500                                       bcs.s   Offset_0x003500
000034FA 31FC 0000 FFF2                             move.w  #$0000, (Demo_Sequence_Idx).w                ; $FFFFFFF2
00003500                            Offset_0x003500:
00003500 31FC 0001 FFF0                             move.w  #$0001, (Auto_Control_Player_Flag).w         ; $FFFFFFF0
00003506 11FC 0008 F600                             move.b  #gm_DemoMode, (Game_Mode).w             ; $08, $FFFFF600
0000350C 11FC 0003 FE12                             move.b  #$03, (Life_Count).w                         ; $FFFFFE12
00003512 11FC 0003 FEC6                             move.b  #$03, (Life_Count_P2).w                      ; $FFFFFEC6
00003518 7000                                       moveq   #$00, D0
0000351A 31C0 FE20                                  move.w  D0, (Ring_Count_Address).w                   ; $FFFFFE20
0000351E 21C0 FE22                                  move.l  D0, (Time_Count_Address).w                   ; $FFFFFE22
00003522 21C0 FE26                                  move.l  D0, (Score_Count_Address).w                  ; $FFFFFE26
00003526 31C0 FED0                                  move.w  D0, (Ring_Count_Address_P2).w                ; $FFFFFED0
0000352A 21C0 FED2                                  move.l  D0, (Time_Count_Address_P2).w                ; $FFFFFED2
0000352E 21C0 FED6                                  move.l  D0, (Score_Count_Address_P2).w               ; $FFFFFED6
00003532 21FC 0000 1388 FFC0                        move.l  #$00001388, (Next_Extra_Life_Score).w        ; $FFFFFFC0
0000353A 21FC 0000 1388 FFC4                        move.l  #$00001388, (Next_Extra_Life_Score_P2).w     ; $FFFFFFC4
00003542 4E75                                       rts 
00003544                            ;-------------------------------------------------------------------------------
00003544                            Demo_Mode_Level_Array:                                         ; Offset_0x003544
00003544 0000                                       dc.w    AIz_Act_1                                        ; $0000
00003546 0000                                       dc.w    AIz_Act_1                                        ; $0000
00003548 0000                                       dc.w    AIz_Act_1                                        ; $0000
0000354A 0000                                       dc.w    AIz_Act_1                                        ; $0000
0000354C                            ;-------------------------------------------------------------------------------                
0000354C                            S2_Demo_Mode_Level_Array:                                      ; Offset_0x00354C
0000354C 0000                                       dc.w    S2_EHz_Act_1  ; Emerald Hill S2 Left over        ; $0000
0000354E 0D00                                       dc.w    S2_CPz_Act_1  ; Chemical Plant S2 Left over      ; $0D00
00003550 0F00                                       dc.w    S2_ARz_Act_1  ; Aquatic Ruin Left over           ; $0F00 
00003552 0C00                                       dc.w    S2_CNz_Act_1  ; Casino Night S2 Left over        ; $0C00     
00003554                            ;-------------------------------------------------------------------------------
00003554                            Secret_Codes_Test:                                             ; Offset_0x003554
00003554 41F9 0000 0000                             lea     (Secret_Code_Sequence), A0             ; Offset_0x003592
0000355A 3038 FFD4                                  move.w  (Secret_Code_Input_Entries).w, D0            ; $FFFFFFD4
0000355E D0C0                                       adda.w  D0, A0
00003560 1038 F605                                  move.b  (Control_Ports_Buffer_Data+$0001).w, D0      ; $FFFFF605
00003564 0200 000F                                  andi.b  #$0F, D0
00003568 6700                                       beq.s   Offset_0x003590
0000356A B010                                       cmp.b   (A0), D0
0000356C 6600                                       bne.s   Code_NoMatch                           ; Offset_0x00358A
0000356E 5278 FFD4                                  addq.w  #$01, (Secret_Code_Input_Entries).w          ; $FFFFFFD4
00003572 4A28 0001                                  tst.b   $0001(A0)
00003576 6600                                       bne.s   Offset_0x003590
00003578 31FC 0101 FFD0                             move.w  #$0101, (Level_Select_Flag).w                ; $FFFFFFD0
0000357E 31FC 0101 FFD2                             move.w  #$0101, (Debug_Mode_Flag).w                  ; $FFFFFFD2
00003584 7032                                       moveq   #Ring_Sfx, D0                                      ; $32
00003586 6100 DBEE                                  bsr     Play_Music                             ; Offset_0x001176
0000358A                            Code_NoMatch:                                                  ; Offset_0x00358A
0000358A 31FC 0000 FFD4                             move.w  #$0000, (Secret_Code_Input_Entries).w        ; $FFFFFFD4
00003590                            Offset_0x003590:
00003590 4E75                                       rts   
00003592                            ;-------------------------------------------------------------------------------                    
00003592                            Secret_Code_Sequence:                                          ; Offset_0x003592
00003592 01                                         dc.b    Btn_Up+$01                                         ; $01
00003593 01                                         dc.b    Btn_Up+$01                                         ; $01
00003594 02                                         dc.b    Btn_Down+$01                                       ; $02
00003595 02                                         dc.b    Btn_Down+$01                                       ; $02
00003596 01                                         dc.b    Btn_Up+$01                                         ; $01
00003597 01                                         dc.b    Btn_Up+$01                                         ; $01
00003598 0000                                       dc.b    $00, $00          
0000359A                            ;-------------------------------------------------------------------------------
0000359A                            VInt_Title_Screen:                                             ; Offset_0x00359A
0000359A 4A38 FFBD                                  tst.b   (Title_Screen_Animate_Delay).w               ; $FFFFFFBD
0000359E 6600                                       bne.s   Offset_0x0035E4
000035A0 11FC 0002 FFBD                             move.b  #$02, (Title_Screen_Animate_Delay).w         ; $FFFFFFBD
000035A6 0C78 0010 FFBE                             cmpi.w  #$0010, (Title_Screen_Animate_Frame).w       ; $FFFFFFBE
000035AC 6500                                       bcs.s   Offset_0x0035B4
000035AE 11FC 0002 FFBD                             move.b  #$02, (Title_Screen_Animate_Delay).w         ; $FFFFFFBD
000035B4                            Offset_0x0035B4:
000035B4 41F8 EDC0                                  lea     (Palette_Data_Target+$40).w, A0              ; $FFFFEDC0
000035B8 43F8 ED40                                  lea     (Palette_Row_2_Offset).w, A1                 ; $FFFFED40
000035BC 7007                                       moveq   #$07, D0
000035BE                            Offset_0x0035BE:
000035BE 22D8                                       move.l  (A0)+, (A1)+
000035C0 51C8 FFFC                                  dbra    D0, Offset_0x0035BE
000035C4 0A38 00FF FFBC                             eori.b  #$FF, (Title_Screen_Animate_Buffer).w        ; $FFFFFFBC
000035CA 4A38 FFBC                                  tst.b   (Title_Screen_Animate_Buffer).w              ; $FFFFFFBC
000035CE 6700                                       beq.s   Offset_0x0035DA
000035D0 33FC 8407 00C0 0004                        move.w  #$8407, (VDP_Control_Port)                   ; $00C00004
000035D8 4E75                                       rts
000035DA                            Offset_0x0035DA:
000035DA 33FC 8405 00C0 0004                        move.w  #$8405, (VDP_Control_Port)                   ; $00C00004
000035E2 4E75                                       rts
000035E4                            Offset_0x0035E4:
000035E4 5338 FFBD                                  subq.b  #$01, (Title_Screen_Animate_Delay).w         ; $FFFFFFBD
000035E8 4E75                                       rts   
000035EA                            ;-------------------------------------------------------------------------------
000035EA                            Offset_0x0035EA:
000035EA 0C38 0001 FFBD                             cmpi.b  #$01, (Title_Screen_Animate_Delay).w         ; $FFFFFFBD
000035F0 6600                                       bne.s   Offset_0x003606
000035F2 3038 FFBE                                  move.w  (Title_Screen_Animate_Frame).w, D0           ; $FFFFFFBE
000035F6 103B 0000                                  move.b  Offset_0x003612(PC, D0), D0
000035FA 4880                                       ext.w   D0
000035FC 6B00                                       bmi.s   Offset_0x003608
000035FE 6100 0000                                  bsr     Offset_0x00369E
00003602 5278 FFBE                                  addq.w  #$01, (Title_Screen_Animate_Frame).w         ; $FFFFFFBE
00003606                            Offset_0x003606:
00003606 4E75                                       rts
00003608                            Offset_0x003608:
00003608 11FC 0002 FFBD                             move.b  #$02, (Title_Screen_Animate_Delay).w         ; $FFFFFFBD
0000360E 6000 0000                                  bra     Offset_0x003644    
00003612                            ;-------------------------------------------------------------------------------
00003612                            Offset_0x003612:
00003612 2AFF 0001 0203 0001                        dc.b    $2A, $FF, $00, $01, $02, $03, $00, $01
0000361A 0203 0405 0607 0809                        dc.b    $02, $03, $04, $05, $06, $07, $08, $09
00003622 0A0B 0C0D 0E0F 1011                        dc.b    $0A, $0B, $0C, $0D, $0E, $0F, $10, $11
0000362A 1213 1415 1617 1819                        dc.b    $12, $13, $14, $15, $16, $17, $18, $19
00003632 1A1B 1C1D 1E1F 2021                        dc.b    $1A, $1B, $1C, $1D, $1E, $1F, $20, $21
0000363A 2223 2425 2627 2829                        dc.b    $22, $23, $24, $25, $26, $27, $28, $29
00003642 2AFF                                       dc.b    $2A, $FF      
00003644                            ;-------------------------------------------------------------------------------
00003644                            Offset_0x003644:
00003644 1438 FFBC                                  move.b  (Title_Screen_Animate_Buffer).w, D2          ; $FFFFFFBC
00003648 0C02 0001                                  cmpi.b  #$01, D2
0000364C 6700                                       beq.s   Offset_0x00369C
0000364E 3038 EE02                                  move.w  (Vertical_Scrolling).w, D0                   ; $FFFFEE02
00003652 48C0                                       ext.l   D0
00003654 E188                                       lsl.l   #$08, D0
00003656 D1B8 EE7C                                  add.l   D0, (Camera_Y).w                             ; $FFFFEE7C
0000365A 3038 EE7C                                  move.w  (Camera_Y).w, D0                             ; $FFFFEE7C
0000365E 31C0 F616                                  move.w  D0, (Vertical_Scroll_Value).w                ; $FFFFF616
00003662 11FC 0000 FFBC                             move.b  #$00, (Title_Screen_Animate_Buffer).w        ; $FFFFFFBC
00003668 323C 0040                                  move.w  #$0040, D1
0000366C 0C40 0000                                  cmpi.w  #$0000, D0
00003670 6D00                                       blt.s   Offset_0x00368E
00003672 6600                                       bne.s   Offset_0x003684
00003674 0C78 FFA5 EE02                             cmpi.w  #$FFA5, (Vertical_Scrolling).w               ; $FFFFEE02
0000367A 6600                                       bne.s   Offset_0x003684
0000367C 11FC 0001 FFBC                             move.b  #$01, (Title_Screen_Animate_Buffer).w        ; $FFFFFFBC
00003682 6000                                       bra.s   Offset_0x00369C
00003684                            Offset_0x003684:
00003684 11FC 00FF FFBC                             move.b  #$FF, (Title_Screen_Animate_Buffer).w        ; $FFFFFFBC
0000368A 323C FFC0                                  move.w  #$FFC0, D1
0000368E                            Offset_0x00368E:
0000368E D378 EE02                                  add.w   D1, (Vertical_Scrolling).w                   ; $FFFFEE02
00003692 B438 FFBC                                  cmp.b   (Title_Screen_Animate_Buffer).w, D2          ; $FFFFFFBC
00003696 6700                                       beq.s   Offset_0x00369C
00003698 E0F8 EE02                                  asr.w   (Vertical_Scrolling).w                       ; $FFFFEE02
0000369C                            Offset_0x00369C:
0000369C 4E75                                       rts
0000369E                            Offset_0x00369E:
0000369E D040                                       add.w   D0, D0
000036A0 D040                                       add.w   D0, D0
000036A2 3200                                       move.w  D0, D1
000036A4 D040                                       add.w   D0, D0
000036A6 D041                                       add.w   D1, D0
000036A8 45F9 0000 0000                             lea     (Title_Screen_Sonic_Data), A2          ; Offset_0x00376A
000036AE 45F2 0000                                  lea     $00(A2, D0), A2
000036B2 201A                                       move.l  (A2)+, D0
000036B4 0280 00FF FFFF                             andi.l  #$00FFFFFF, D0
000036BA 2040                                       move.l  D0, A0
000036BC 43F9 FFFF 0000                             lea     (M68K_RAM_Start), A1                         ; $FFFF0000
000036C2 6100 E144                                  bsr     KosinskiDec                            ; Offset_0x001808
000036C6 3609                                       move.w  A1, D3
000036C8 E24B                                       lsr.w   #$01, D3
000036CA 223C FFFF 0000                             move.l  #M68K_RAM_Start, D1                          ; $FFFF0000
000036D0 343C 0000                                  move.w  #$0000, D2
000036D4 4A38 FFBC                                  tst.b   (Title_Screen_Animate_Buffer).w              ; $FFFFFFBC
000036D8 6700                                       beq.s   Offset_0x0036DE
000036DA 343C 4000                                  move.w  #$4000, D2
000036DE                            Offset_0x0036DE:
000036DE 0281 00FF FFFF                             andi.l  #$00FFFFFF, D1
000036E4 4EB9 0000 12FC                             jsr     (DMA_68KtoVRAM)                        ; Offset_0x0012FC
000036EA 205A                                       move.l  (A2)+, A0
000036EC 43F8 EDC0                                  lea     (Palette_Data_Target+$40).w, A1              ; $FFFFEDC0
000036F0 7007                                       moveq   #$07, D0
000036F2                            Offset_0x0036F2:
000036F2 22D8                                       move.l  (A0)+, (A1)+
000036F4 51C8 FFFC                                  dbra    D0, Offset_0x0036F2
000036F8 4A38 FFBC                                  tst.b   (Title_Screen_Animate_Buffer).w              ; $FFFFFFBC
000036FC 6600                                       bne.s   Offset_0x00372E
000036FE 43F9 FFFF 4000                             lea     (M68K_RAM_Start+$4000), A1                   ; $FFFF4000
00003704 205A                                       move.l  (A2)+, A0
00003706 303C 4000                                  move.w  #$4000, D0
0000370A 6100 DF7E                                  bsr     EnigmaDec                              ; Offset_0x00168A
0000370E 46FC 2700                                  move    #$2700, SR
00003712 43F9 FFFF 4000                             lea     (M68K_RAM_Start+$4000), A1                   ; $FFFF4000
00003718 203C 6000 0003                             move.l  #$60000003, D0
0000371E 7227                                       moveq   #$27, D1
00003720 741B                                       moveq   #$1B, D2
00003722 4EB9 0000 12BC                             jsr     (ShowVDPGraphics)                      ; Offset_0x0012BC
00003728 46FC 2300                                  move    #$2300, SR
0000372C 4E75                                       rts
0000372E                            Offset_0x00372E:
0000372E 43F9 FFFF 4000                             lea     (M68K_RAM_Start+$4000), A1                   ; $FFFF4000
00003734 205A                                       move.l  (A2)+, A0
00003736 303C 4200                                  move.w  #$4200, D0
0000373A 6100 DF4E                                  bsr     EnigmaDec                              ; Offset_0x00168A
0000373E 46FC 2700                                  move    #$2700, SR
00003742 43F9 FFFF 4000                             lea     (M68K_RAM_Start+$4000), A1                   ; $FFFF4000
00003748 203C 6000 0002                             move.l  #$60000002, D0
0000374E 7227                                       moveq   #$27, D1
00003750 741B                                       moveq   #$1B, D2
00003752 4EB9 0000 12BC                             jsr     (ShowVDPGraphics)                      ; Offset_0x0012BC
00003758 46FC 2300                                  move    #$2300, SR
0000375C 4E75                                       rts       
0000375E                            ;-------------------------------------------------------------------------------
0000375E                            Title_Screen_Sonic_3_Data:                                     ; Offset_0x00375E
0000375E 0000 0000                                  dc.l    Art_Title_Screen_Sonic_3               ; Offset_0x1046CA
00003762 0000 0000                                  dc.l    Pal_Title_Screen_Sonic_3               ; Offset_0x1066F6
00003766 0000 0000                                  dc.l    Map_Title_Screen_Sonic_3               ; Offset_0x1065DA
0000376A                            Title_Screen_Sonic_Data:                                       ; Offset_0x00376A                
0000376A 0000 0000                                  dc.l    Art_Title_Screen_Sonic                 ; Offset_0x1051AA
0000376E 0000 0000                                  dc.l    Pal_Title_Screen_Sonic                 ; Offset_0x106776
00003772 0000 0000                                  dc.l    Map_Title_Screen_Sonic                 ; Offset_0x106650
00003776 0000 0000                                  dc.l    Art_Title_Screen_Sonic                 ; Offset_0x1051AA
0000377A 0000 0000                                  dc.l    Pal_Title_Screen_Sonic                 ; Offset_0x106776
0000377E 0000 0000                                  dc.l    Map_Title_Screen_Sonic                 ; Offset_0x106650
00003782 0000 0000                                  dc.l    Art_Title_Screen_Sonic                 ; Offset_0x1051AA
00003786 0000 0000                                  dc.l    Pal_Title_Screen_Sonic                 ; Offset_0x106776
0000378A 0000 0000                                  dc.l    Map_Title_Screen_Sonic                 ; Offset_0x106650
0000378E 0000 0000                                  dc.l    Art_Title_Screen_Sonic                 ; Offset_0x1051AA
00003792 0000 0000                                  dc.l    Pal_Title_Screen_Sonic                 ; Offset_0x106776
00003796 0000 0000                                  dc.l    Map_Title_Screen_Sonic                 ; Offset_0x106650
0000379A 0000 0000                                  dc.l    Art_Title_Screen_Sonic                 ; Offset_0x1051AA
0000379E 0000 0000                                  dc.l    Pal_Title_Screen_Sonic                 ; Offset_0x106776
000037A2 0000 0000                                  dc.l    Map_Title_Screen_Sonic                 ; Offset_0x106650
000037A6 0000 0000                                  dc.l    Art_Title_Screen_Sonic                 ; Offset_0x1051AA
000037AA 0000 0000                                  dc.l    Pal_Title_Screen_Sonic                 ; Offset_0x106776
000037AE 0000 0000                                  dc.l    Map_Title_Screen_Sonic                 ; Offset_0x106650
000037B2 0000 0000                                  dc.l    Art_Title_Screen_Sonic                 ; Offset_0x1051AA
000037B6 0000 0000                                  dc.l    Pal_Title_Screen_Sonic                 ; Offset_0x106776
000037BA 0000 0000                                  dc.l    Map_Title_Screen_Sonic                 ; Offset_0x106650
000037BE 0000 0000                                  dc.l    Art_Title_Screen_Sonic                 ; Offset_0x1051AA
000037C2 0000 0000                                  dc.l    Pal_Title_Screen_Sonic                 ; Offset_0x106776
000037C6 0000 0000                                  dc.l    Map_Title_Screen_Sonic                 ; Offset_0x106650
000037CA 0000 0000                                  dc.l    Art_Title_Screen_Sonic                 ; Offset_0x1051AA
000037CE 0000 0000                                  dc.l    Pal_Title_Screen_Sonic                 ; Offset_0x106776
000037D2 0000 0000                                  dc.l    Map_Title_Screen_Sonic                 ; Offset_0x106650
000037D6 0000 0000                                  dc.l    Art_Title_Screen_Sonic                 ; Offset_0x1051AA
000037DA 0000 0000                                  dc.l    Pal_Title_Screen_Sonic                 ; Offset_0x106776
000037DE 0000 0000                                  dc.l    Map_Title_Screen_Sonic                 ; Offset_0x106650
000037E2 0000 0000                                  dc.l    Art_Title_Screen_Sonic                 ; Offset_0x1051AA
000037E6 0000 0000                                  dc.l    Pal_Title_Screen_Sonic                 ; Offset_0x106776
000037EA 0000 0000                                  dc.l    Map_Title_Screen_Sonic                 ; Offset_0x106650
000037EE 0000 0000                                  dc.l    Art_Title_Screen_Sonic                 ; Offset_0x1051AA
000037F2 0000 0000                                  dc.l    Pal_Title_Screen_Sonic                 ; Offset_0x106776
000037F6 0000 0000                                  dc.l    Map_Title_Screen_Sonic                 ; Offset_0x106650
000037FA 0000 0000                                  dc.l    Art_Title_Screen_Sonic                 ; Offset_0x1051AA
000037FE 0000 0000                                  dc.l    Pal_Title_Screen_Sonic                 ; Offset_0x106776
00003802 0000 0000                                  dc.l    Map_Title_Screen_Sonic                 ; Offset_0x106650
00003806 0000 0000                                  dc.l    Art_Title_Screen_Sonic                 ; Offset_0x1051AA
0000380A 0000 0000                                  dc.l    Pal_Title_Screen_Sonic                 ; Offset_0x106776
0000380E 0000 0000                                  dc.l    Map_Title_Screen_Sonic                 ; Offset_0x106650
00003812 0000 0000                                  dc.l    Art_Title_Screen_Sonic                 ; Offset_0x1051AA
00003816 0000 0000                                  dc.l    Pal_Title_Screen_Sonic                 ; Offset_0x106776
0000381A 0000 0000                                  dc.l    Map_Title_Screen_Sonic                 ; Offset_0x106650
0000381E 0000 0000                                  dc.l    Art_Title_Screen_Sonic                 ; Offset_0x1051AA
00003822 0000 0000                                  dc.l    Pal_Title_Screen_Sonic                 ; Offset_0x106776
00003826 0000 0000                                  dc.l    Map_Title_Screen_Sonic                 ; Offset_0x106650
0000382A 0000 0000                                  dc.l    Art_Title_Screen_Sonic                 ; Offset_0x1051AA
0000382E 0000 0000                                  dc.l    Pal_Title_Screen_Sonic                 ; Offset_0x106776
00003832 0000 0000                                  dc.l    Map_Title_Screen_Sonic                 ; Offset_0x106650
00003836 0000 0000                                  dc.l    Art_Title_Screen_Sonic                 ; Offset_0x1051AA
0000383A 0000 0000                                  dc.l    Pal_Title_Screen_Sonic                 ; Offset_0x106776
0000383E 0000 0000                                  dc.l    Map_Title_Screen_Sonic                 ; Offset_0x106650
00003842 0000 0000                                  dc.l    Art_Title_Screen_Sonic                 ; Offset_0x1051AA
00003846 0000 0000                                  dc.l    Pal_Title_Screen_Sonic                 ; Offset_0x106776
0000384A 0000 0000                                  dc.l    Map_Title_Screen_Sonic                 ; Offset_0x106650
0000384E 0000 0000                                  dc.l    Art_Title_Screen_Sonic                 ; Offset_0x1051AA
00003852 0000 0000                                  dc.l    Pal_Title_Screen_Sonic                 ; Offset_0x106776
00003856 0000 0000                                  dc.l    Map_Title_Screen_Sonic                 ; Offset_0x106650
0000385A 0000 0000                                  dc.l    Art_Title_Screen_Sonic                 ; Offset_0x1051AA
0000385E 0000 0000                                  dc.l    Pal_Title_Screen_Sonic                 ; Offset_0x106776
00003862 0000 0000                                  dc.l    Map_Title_Screen_Sonic                 ; Offset_0x106650
00003866 0000 0000                                  dc.l    Art_Title_Screen_Sonic                 ; Offset_0x1051AA
0000386A 0000 0000                                  dc.l    Pal_Title_Screen_Sonic                 ; Offset_0x106776
0000386E 0000 0000                                  dc.l    Map_Title_Screen_Sonic                 ; Offset_0x106650
00003872 0000 0000                                  dc.l    Art_Title_Screen_Sonic                 ; Offset_0x1051AA
00003876 0000 0000                                  dc.l    Pal_Title_Screen_Sonic                 ; Offset_0x106776
0000387A 0000 0000                                  dc.l    Map_Title_Screen_Sonic                 ; Offset_0x106650
0000387E 0000 0000                                  dc.l    Art_Title_Screen_Sonic                 ; Offset_0x1051AA
00003882 0000 0000                                  dc.l    Pal_Title_Screen_Sonic                 ; Offset_0x106776
00003886 0000 0000                                  dc.l    Map_Title_Screen_Sonic                 ; Offset_0x106650
0000388A 0000 0000                                  dc.l    Art_Title_Screen_Sonic                 ; Offset_0x1051AA
0000388E 0000 0000                                  dc.l    Pal_Title_Screen_Sonic                 ; Offset_0x106776
00003892 0000 0000                                  dc.l    Map_Title_Screen_Sonic                 ; Offset_0x106650
00003896 0000 0000                                  dc.l    Art_Title_Screen_Sonic                 ; Offset_0x1051AA
0000389A 0000 0000                                  dc.l    Pal_Title_Screen_Sonic                 ; Offset_0x106776
0000389E 0000 0000                                  dc.l    Map_Title_Screen_Sonic                 ; Offset_0x106650
000038A2 0000 0000                                  dc.l    Art_Title_Screen_Sonic                 ; Offset_0x1051AA
000038A6 0000 0000                                  dc.l    Pal_Title_Screen_Sonic                 ; Offset_0x106776
000038AA 0000 0000                                  dc.l    Map_Title_Screen_Sonic                 ; Offset_0x106650
000038AE 0000 0000                                  dc.l    Art_Title_Screen_Sonic                 ; Offset_0x1051AA
000038B2 0000 0000                                  dc.l    Pal_Title_Screen_Sonic                 ; Offset_0x106776
000038B6 0000 0000                                  dc.l    Map_Title_Screen_Sonic                 ; Offset_0x106650
000038BA 0000 0000                                  dc.l    Art_Title_Screen_Sonic                 ; Offset_0x1051AA
000038BE 0000 0000                                  dc.l    Pal_Title_Screen_Sonic                 ; Offset_0x106776
000038C2 0000 0000                                  dc.l    Map_Title_Screen_Sonic                 ; Offset_0x106650
000038C6 0000 0000                                  dc.l    Art_Title_Screen_Sonic                 ; Offset_0x1051AA
000038CA 0000 0000                                  dc.l    Pal_Title_Screen_Sonic                 ; Offset_0x106776
000038CE 0000 0000                                  dc.l    Map_Title_Screen_Sonic                 ; Offset_0x106650
000038D2 0000 0000                                  dc.l    Art_Title_Screen_Sonic                 ; Offset_0x1051AA
000038D6 0000 0000                                  dc.l    Pal_Title_Screen_Sonic                 ; Offset_0x106776
000038DA 0000 0000                                  dc.l    Map_Title_Screen_Sonic                 ; Offset_0x106650
000038DE 0000 0000                                  dc.l    Art_Title_Screen_Sonic                 ; Offset_0x1051AA
000038E2 0000 0000                                  dc.l    Pal_Title_Screen_Sonic                 ; Offset_0x106776
000038E6 0000 0000                                  dc.l    Map_Title_Screen_Sonic                 ; Offset_0x106650
000038EA 0000 0000                                  dc.l    Art_Title_Screen_Sonic                 ; Offset_0x1051AA
000038EE 0000 0000                                  dc.l    Pal_Title_Screen_Sonic                 ; Offset_0x106776
000038F2 0000 0000                                  dc.l    Map_Title_Screen_Sonic                 ; Offset_0x106650
000038F6 0000 0000                                  dc.l    Art_Title_Screen_Sonic                 ; Offset_0x1051AA
000038FA 0000 0000                                  dc.l    Pal_Title_Screen_Sonic                 ; Offset_0x106776
000038FE 0000 0000                                  dc.l    Map_Title_Screen_Sonic                 ; Offset_0x106650
00003902 0000 0000                                  dc.l    Art_Title_Screen_Sonic                 ; Offset_0x1051AA
00003906 0000 0000                                  dc.l    Pal_Title_Screen_Sonic                 ; Offset_0x106776
0000390A 0000 0000                                  dc.l    Map_Title_Screen_Sonic                 ; Offset_0x106650
0000390E 0000 0000                                  dc.l    Art_Title_Screen_Sonic                 ; Offset_0x1051AA
00003912 0000 0000                                  dc.l    Pal_Title_Screen_Sonic                 ; Offset_0x106776
00003916 0000 0000                                  dc.l    Map_Title_Screen_Sonic                 ; Offset_0x106650
0000391A 0000 0000                                  dc.l    Art_Title_Screen_Sonic                 ; Offset_0x1051AA
0000391E 0000 0000                                  dc.l    Pal_Title_Screen_Sonic                 ; Offset_0x106776
00003922 0000 0000                                  dc.l    Map_Title_Screen_Sonic                 ; Offset_0x106650
00003926 0000 0000                                  dc.l    Art_Title_Screen_Sonic                 ; Offset_0x1051AA
0000392A 0000 0000                                  dc.l    Pal_Title_Screen_Sonic                 ; Offset_0x106776
0000392E 0000 0000                                  dc.l    Map_Title_Screen_Sonic                 ; Offset_0x106650
00003932 0000 0000                                  dc.l    Art_Title_Screen_Sonic                 ; Offset_0x1051AA
00003936 0000 0000                                  dc.l    Pal_Title_Screen_Sonic                 ; Offset_0x106776
0000393A 0000 0000                                  dc.l    Map_Title_Screen_Sonic                 ; Offset_0x106650
0000393E 0000 0000                                  dc.l    Art_Title_Screen_Sonic                 ; Offset_0x1051AA
00003942 0000 0000                                  dc.l    Pal_Title_Screen_Sonic                 ; Offset_0x106776
00003946 0000 0000                                  dc.l    Map_Title_Screen_Sonic                 ; Offset_0x106650
0000394A 0000 0000                                  dc.l    Art_Title_Screen_Sonic                 ; Offset_0x1051AA
0000394E 0000 0000                                  dc.l    Pal_Title_Screen_Sonic                 ; Offset_0x106776
00003952 0000 0000                                  dc.l    Map_Title_Screen_Sonic                 ; Offset_0x106650
00003956 0000 0000                                  dc.l    Art_Title_Screen_Sonic                 ; Offset_0x1051AA
0000395A 0000 0000                                  dc.l    Pal_Title_Screen_Sonic                 ; Offset_0x106776
0000395E 0000 0000                                  dc.l    Map_Title_Screen_Sonic                 ; Offset_0x106650
00003962 0000 0000                                  dc.l    Art_Title_Screen_Sonic                 ; Offset_0x1051AA
00003966 0000 0000                                  dc.l    Pal_Title_Screen_Sonic                 ; Offset_0x106776
0000396A 0000 0000                                  dc.l    Map_Title_Screen_Sonic                 ; Offset_0x106650                                                                                       
0000396E                            ;===============================================================================
0000396E                            ; Tela t_tulo
0000396E                            ; <<<-
0000396E                            ;===============================================================================
0000396E                            
0000396E                            ;===============================================================================
0000396E                            ; Modo de jogo ou demonstra__o das fases 
0000396E                            ; ->>>
0000396E                            ;===============================================================================
0000396E                            PlayList:                                                      ; Offset_0x00396E
0000396E 01                                         dc.b    Angel_Island_1_Snd                                 ; $01
0000396F 02                                         dc.b    Angel_Island_2_Snd                                 ; $02
00003970 03                                         dc.b    Hydrocity_1_Snd                                    ; $03
00003971 04                                         dc.b    Hydrocity_2_Snd                                    ; $04
00003972 05                                         dc.b    Marble_Garden_1_Snd                                ; $05
00003973 06                                         dc.b    Marble_Garden_2_Snd                                ; $06
00003974 07                                         dc.b    Carnival_Night_1_Snd                               ; $07
00003975 08                                         dc.b    Carnival_Night_2_Snd                               ; $08
00003976 09                                         dc.b    Flying_Battery_1_Snd                               ; $09
00003977 0A                                         dc.b    Flying_Battery_2_Snd                               ; $0A
00003978 0B                                         dc.b    Icecap_1_Snd                                       ; $0B
00003979 0C                                         dc.b    Icecap_2_Snd                                       ; $0C
0000397A 0D                                         dc.b    Launch_Base_1_Snd                                  ; $0D
0000397B 0E                                         dc.b    Launch_Base_2_Snd                                  ; $0E
0000397C 0F                                         dc.b    Mushroom_Valley_1_Snd                              ; $0F
0000397D 10                                         dc.b    Mushroom_Valley_2_Snd                              ; $10
0000397E 11                                         dc.b    Sandopolis_1_Snd                                   ; $11
0000397F 12                                         dc.b    Sandopolis_2_Snd                                   ; $12
00003980 13                                         dc.b    Lava_Reef_1_Snd                                    ; $13
00003981 14                                         dc.b    Lava_Reef_2_Snd                                    ; $14
00003982 15                                         dc.b    Sky_Sanctuary_Snd                                  ; $15
00003983 16                                         dc.b    Death_Egg_1_Snd                                    ; $16
00003984 17                                         dc.b    Death_Egg_2_Snd                                    ; $17
00003985 17                                         dc.b    Death_Egg_2_Snd                                    ; $17
00003986 1A                                         dc.b    The_Doomsday_Snd                                   ; $1A
00003987 1A                                         dc.b    The_Doomsday_Snd                                   ; $1A
00003988 1C                                         dc.b    Special_Stage_Snd                                  ; $1C
00003989 1C                                         dc.b    Special_Stage_Snd                                  ; $1C
0000398A 20                                         dc.b    Azure_Lake_Snd                                     ; $20
0000398B 20                                         dc.b    Azure_Lake_Snd                                     ; $20
0000398C 21                                         dc.b    Balloon_Park_Snd                                   ; $21
0000398D 21                                         dc.b    Balloon_Park_Snd                                   ; $21
0000398E 22                                         dc.b    Desert_Palace_Snd                                  ; $22
0000398F 22                                         dc.b    Desert_Palace_Snd                                  ; $22
00003990 23                                         dc.b    Chrome_Gadget_Snd                                  ; $23
00003991 23                                         dc.b    Chrome_Gadget_Snd                                  ; $23
00003992 24                                         dc.b    Endless_Mine_Snd                                   ; $24
00003993 24                                         dc.b    Endless_Mine_Snd                                   ; $24
00003994 1C                                         dc.b    Special_Stage_Snd                                  ; $1C
00003995 1C                                         dc.b    Special_Stage_Snd                                  ; $1C
00003996 1D                                         dc.b    BS_Slot_Machine_Snd                                ; $1D
00003997 1D                                         dc.b    BS_Slot_Machine_Snd                                ; $1D
00003998 1E                                         dc.b    BS_Gumball_Machine_Snd                             ; $1E
00003999 1E                                         dc.b    BS_Gumball_Machine_Snd                             ; $1E
0000399A 1C                                         dc.b    Special_Stage_Snd                                  ; $1C
0000399B 1C                                         dc.b    Special_Stage_Snd                                  ; $1C
0000399C 1C                                         dc.b    Special_Stage_Snd                                  ; $1C
0000399D 1C                                         dc.b    Special_Stage_Snd                                  ; $1C 
0000399E                            ;-------------------------------------------------------------------------------                
0000399E                            Level:                                                         ; Offset_0x00399E
0000399E 08F8 0007 F600                             bset    #$07, (Game_Mode).w                          ; $FFFFF600
000039A4 4A78 FFF0                                  tst.w   (Auto_Control_Player_Flag).w                 ; $FFFFFFF0
000039A8 6B00                                       bmi.s   Offset_0x0039B2
000039AA 103C 00E1                                  move.b  #Stop_Sound, D0                                    ; $E1
000039AE 6100 D7C6                                  bsr     Play_Music                             ; Offset_0x001176
000039B2                            Offset_0x0039B2:
000039B2 4278 FF0E                                  clr.w   (Kosinski_Mod_Queue_Count).w                 ; $FFFFFF0E
000039B6 43F8 FF10                                  lea     (Kosinski_Saved_Registers).w, A1             ; $FFFFFF10
000039BA 7000                                       moveq   #$00, D0
000039BC 323C 001A                                  move.w  #$001A, D1
000039C0                            Offset_0x0039C0:
000039C0 22C0                                       move.l  D0, (A1)+
000039C2 51C9 FFFC                                  dbra    D1, Offset_0x0039C0
000039C6 6100 DB80                                  bsr     ClearPLC                               ; Offset_0x001548
000039CA 6100 F41C                                  bsr     Pal_FadeFrom                           ; Offset_0x002DE8
000039CE 4A78 FFF0                                  tst.w   (Auto_Control_Player_Flag).w                 ; $FFFFFFF0
000039D2 6B00                                       bmi.s   Offset_0x003A32
000039D4 46FC 2700                                  move    #$2700, SR
000039D8 6100 D628                                  bsr     ClearScreen                            ; Offset_0x001002
000039DC 46FC 2300                                  move    #$2300, SR
000039E0 7000                                       moveq   #$00, D0
000039E2 31C0 FE04                                  move.w  D0, (Level_Frame_Count).w                    ; $FFFFFE04
000039E6 3038 FE10                                  move.w  (Level_Id).w, D0                             ; $FFFFFE10
000039EA E218                                       ror.b   #$01, D0
000039EC E848                                       lsr.w   #$04, D0
000039EE 0240 01F8                                  andi.w  #$01F8, D0
000039F2 3200                                       move.w  D0, D1
000039F4 D040                                       add.w   D0, D0
000039F6 D240                                       add.w   D0, D1
000039F8 45F9 0000 0000                             lea     (TilesMainTable), A2                   ; Offset_0x04A77E
000039FE 7000                                       moveq   #$00, D0
00003A00 1032 1000                                  move.b  $00(A2, D1), D0
00003A04 6700                                       beq.s   Offset_0x003A0A
00003A06 6100 DAC8                                  bsr     LoadPLC                                ; Offset_0x0014D0
00003A0A                            Offset_0x003A0A:
00003A0A 6100 0000                                  bsr     Init_Player_Selected                   ; Offset_0x004058
00003A0E 7006                                       moveq   #$06, D0
00003A10 4A78 FFD8                                  tst.w   (Two_Player_Flag).w                          ; $FFFFFFD8
00003A14 6600                                       bne.s   Offset_0x003A2E
00003A16 7001                                       moveq   #$01, D0
00003A18 6100 DAB6                                  bsr     LoadPLC                                ; Offset_0x0014D0
00003A1C 0C78 0002 FF08                             cmpi.w  #$0002, (Player_Selected_Flag).w             ; $FFFFFF08
00003A22 6600                                       bne.s   Offset_0x003A32
00003A24 5240                                       addq.w  #$01, D0
00003A26 4A38 FFF8                                  tst.b   (Hardware_Id).w                              ; $FFFFFFF8
00003A2A 6A00                                       bpl.s   Offset_0x003A2E
00003A2C 5440                                       addq.w  #$02, D0
00003A2E                            Offset_0x003A2E:
00003A2E 6100 DAA0                                  bsr     LoadPLC                                ; Offset_0x0014D0
00003A32                            Offset_0x003A32:
00003A32 43F8 AC00                                  lea     (Sprite_Table_Input).w, A1                   ; $FFFFAC00
00003A36 7000                                       moveq   #$00, D0
00003A38 323C 00FF                                  move.w  #$00FF, D1
00003A3C                            Offset_0x003A3C:
00003A3C 22C0                                       move.l  D0, (A1)+
00003A3E 51C9 FFFC                                  dbra    D1, Offset_0x003A3C
00003A42 43F8 B000                                  lea     (Obj_Player_One).w, A1                       ; $FFFFB000
00003A46 7000                                       moveq   #$00, D0
00003A48 323C 07FF                                  move.w  #$07FF, D1
00003A4C                            Offset_0x003A4C:
00003A4C 22C0                                       move.l  D0, (A1)+
00003A4E 51C9 FFFC                                  dbra    D1, Offset_0x003A4C
00003A52 43F8 F628                                  lea     (VBlank_0_Run_Count).w, A1                   ; $FFFFF628
00003A56 7000                                       moveq   #$00, D0
00003A58 323C 0015                                  move.w  #$0015, D1
00003A5C                            Offset_0x003A5C:
00003A5C 22C0                                       move.l  D0, (A1)+
00003A5E 51C9 FFFC                                  dbra    D1, Offset_0x003A5C
00003A62 43F8 F700                                  lea     (Miles_Control_Vars).w, A1                   ; $FFFFF700
00003A66 7000                                       moveq   #$00, D0
00003A68 323C 003F                                  move.w  #$003F, D1
00003A6C                            Offset_0x003A6C:
00003A6C 22C0                                       move.l  D0, (A1)+
00003A6E 51C9 FFFC                                  dbra    D1, Offset_0x003A6C
00003A72 43F8 FE60                                  lea     (Oscillate_Data_Buffer+$02).w, A1            ; $FFFFFE60
00003A76 7000                                       moveq   #$00, D0
00003A78 323C 0013                                  move.w  #$0013, D1
00003A7C                            Offset_0x003A7C:
00003A7C 22C0                                       move.l  D0, (A1)+
00003A7E 51C9 FFFC                                  dbra    D1, Offset_0x003A7C
00003A82 43F8 FA80                                  lea     (Boss_Data_Buffer).w, A1                     ; $FFFFFA80
00003A86 7000                                       moveq   #$00, D0
00003A88 323C 001F                                  move.w  #$001F, D1
00003A8C                            Offset_0x003A8C:
00003A8C 22C0                                       move.l  D0, (A1)+
00003A8E 51C9 FFFC                                  dbra    D1, Offset_0x003A8C
00003A92 4EB9 0000 0000                             jsr     (Init_Sprite_Table)                    ; Offset_0x011042
00003A98 4DF9 00C0 0004                             lea     (VDP_Control_Port), A6                       ; $00C00004
00003A9E 3CBC 8B03                                  move.w  #$8B03, (A6)
00003AA2 3CBC 8230                                  move.w  #$8230, (A6)
00003AA6 3CBC 8407                                  move.w  #$8407, (A6)
00003AAA 3CBC 857C                                  move.w  #$857C, (A6)
00003AAE 3CBC 9001                                  move.w  #$9001, (A6)
00003AB2 3CBC 8004                                  move.w  #$8004, (A6)
00003AB6 3CBC 8720                                  move.w  #$8720, (A6)
00003ABA 3CBC 8C81                                  move.w  #$8C81, (A6)
00003ABE 4A38 FFD2                                  tst.b   (Debug_Mode_Flag).w                          ; $FFFFFFD2
00003AC2 6700                                       beq.s   Offset_0x003ADE
00003AC4 0838 0005 F604                             btst    #$05, (Control_Ports_Buffer_Data).w          ; $FFFFF604
00003ACA 6700                                       beq.s   Offset_0x003AD0
00003ACC 3CBC 8C89                                  move.w  #$8C89, (A6)
00003AD0                            Offset_0x003AD0:
00003AD0 0838 0006 F604                             btst    #$06, (Control_Ports_Buffer_Data).w          ; $FFFFF604
00003AD6 6700                                       beq.s   Offset_0x003ADE
00003AD8 11FC 0001 FFFA                             move.b  #$01, (Debug_Mode_Active).w                  ; $FFFFFFFA
00003ADE                            Offset_0x003ADE:
00003ADE 31FC 8AFF F624                             move.w  #$8AFF, (Horizontal_Int_Count_Cmd).w         ; $FFFFF624
00003AE4 4A78 FFD8                                  tst.w   (Two_Player_Flag).w                          ; $FFFFFFD8
00003AE8 6700                                       beq.s   Offset_0x003B1A
00003AEA 31FC 4EF9 F608                             move.w  #$4EF9, (HBlank_Ptr).w                       ; $FFFFF608
00003AF0 21FC 0000 0C44 F60A                        move.l  #HBlank_00, (HBlank_Ptr+$02).w ; Offset_0x000C44, $FFFFF60A
00003AF8 3CBC 8014                                  move.w  #$8014, (A6)
00003AFC 3CBC 8220                                  move.w  #$8220, (A6)
00003B00 3CBC 8405                                  move.w  #$8405, (A6)
00003B04 31FC 8A6B F624                             move.w  #$8A6B, (Horizontal_Int_Count_Cmd).w         ; $FFFFF624
00003B0A 3CBC 9003                                  move.w  #$9003, (A6)
00003B0E 0C38 000F FE10                             cmpi.b  #BPz_Id, (Level_Id).w                   ; $0F, $FFFFFE10
00003B14 6600                                       bne.s   Offset_0x003B1A
00003B16 3CBC 9011                                  move.w  #$9011, (A6)
00003B1A                            Offset_0x003B1A:
00003B1A 3CB8 F624                                  move.w  (Horizontal_Int_Count_Cmd).w, (A6)           ; $FFFFF624
00003B1E 4278 E700                                  clr.w   (DMA_Buffer_List).w                          ; $FFFFE700
00003B22 21FC FFFF E700 E8F8                        move.l  #DMA_Buffer_List, (DMA_Buffer_List_End).w  ; $FFFFE700, $FFFFE8F8
00003B2A 7003                                       moveq   #$03, D0
00003B2C 6100 F48C                                  bsr     PalLoad2                               ; Offset_0x002FBA
00003B30 6100 0000                                  bsr     Init_Water_Levels                      ; Offset_0x005056
00003B34 4A38 F730                                  tst.b   (Water_Level_Flag).w                         ; $FFFFF730
00003B38 6700                                       beq.s   Offset_0x003B3E
00003B3A 3CBC 8014                                  move.w  #$8014, (A6)
00003B3E                            Offset_0x003B3E:
00003B3E 4A78 FFF0                                  tst.w   (Auto_Control_Player_Flag).w                 ; $FFFFFFF0
00003B42 6B00                                       bmi.s   Offset_0x003BAE
00003B44 7000                                       moveq   #$00, D0
00003B46 3038 FE10                                  move.w  (Level_Id).w, D0                             ; $FFFFFE10
00003B4A E218                                       ror.b   #$01, D0
00003B4C EE48                                       lsr.w   #$07, D0
00003B4E 43F9 0000 396E                             lea     (PlayList), A1                         ; Offset_0x00396E
00003B54 1031 0000                                  move.b  $00(A1, D0), D0
00003B58 31C0 FF90                                  move.w  D0, (Level_Music_Buffer).w                   ; $FFFFFF90
00003B5C 6100 D618                                  bsr     Play_Music                             ; Offset_0x001176
00003B60 11FC 0000 F711                             move.b  #$00, (Title_Card_Flag).w                    ; $FFFFF711
00003B66 0C38 000C FE10                             cmpi.b  #S2_CNz_Id, (Level_Id).w                ; $0C, $FFFFFE10
00003B6C 6200                                       bhi.s   Offset_0x003BA8
00003B6E 21FC 0000 0000 B250                        move.l  #Obj_Title_Cards, (Obj_08_Mem_Address).w ; Offset_0x024546, $FFFFB250
00003B76                            Offset_0x003B76:
00003B76 11FC 000C F62A                             move.b  #$0C, (VBlank_Index).w                       ; $FFFFF62A
00003B7C 4EB9 0000 19F0                             jsr     (Process_Kosinski_Queue_Main)          ; Offset_0x0019F0
00003B82 6100 DF6A                                  bsr     Wait_For_VSync                         ; Offset_0x001AEE
00003B86 4EB9 0000 0000                             jsr     (Load_Objects)                         ; Offset_0x0110AE
00003B8C 4EB9 0000 0000                             jsr     (Build_Sprites)                        ; Offset_0x011296
00003B92 6100 D9C2                                  bsr     RunPLC                                 ; Offset_0x001556
00003B96 4EB9 0000 18FE                             jsr     (Process_Kosinski_Queue)               ; Offset_0x0018FE
00003B9C 4A78 B298                                  tst.w   (Obj_08_Mem_Address+Obj_Respaw_Ref).w        ; $FFFFB298
00003BA0 67D4                                       beq.s   Offset_0x003B76
00003BA2 4AB8 F680                                  tst.l   (PLC_Data_Buffer).w                          ; $FFFFF680
00003BA6 66CE                                       bne.s   Offset_0x003B76
00003BA8                            Offset_0x003BA8:
00003BA8 4EB9 0000 0000                             jsr     (Head_Up_Display_Base)                 ; Offset_0x007DD4
00003BAE                            Offset_0x003BAE:
00003BAE 7003                                       moveq   #$03, D0
00003BB0 6100 F3EC                                  bsr     PalLoad1                               ; Offset_0x002F9E
00003BB4 4EB9 0000 0000                             jsr     (Level_Size_Load)                      ; Offset_0x011E64
00003BBA 4EB9 0000 0000                             jsr     (Background_Scroll_Speed)              ; Offset_0x0120D4
00003BC0 6100 0000                                  bsr     Main_Level_Load_8x8_Tiles              ; Offset_0x004FEA
00003BC4 4EB9 0000 0000                             jsr     (Main_Level_Load_16_128_Blocks)        ; Offset_0x0123DE
00003BCA 4EB9 0000 0000                             jsr     (Animate_Counters_Init)                ; Offset_0x01F55A
00003BD0 46FC 2700                                  move    #$2700, SR
00003BD4 4EB9 0000 0000                             jsr     (Load_Tiles_From_Start_Ptr)            ; Offset_0x0123D8
00003BDA 46FC 2300                                  move    #$2300, SR
00003BDE 4EB9 0000 0000                             jsr     (S2_FloorLog_Unk)                      ; Offset_0x009B18
00003BE4 6100 0000                                  bsr     Load_Collision_Index                   ; Offset_0x0049B2
00003BE8 6100 0000                                  bsr     Water_Effects                          ; Offset_0x0041B0
00003BEC 6100 0000                                  bsr     Load_Player_Selected                   ; Offset_0x004076
00003BF0 31F8 F606 FF7C                             move.w  (Control_Ports_Buffer_Data+$02).w, (Tmp_FF7C).w ; $FFFFF606, $FFFFFF7C
00003BF6 31FC 0000 F602                             move.w  #$0000, (Control_Ports_Logical_Data).w       ; $FFFFF602
00003BFC 31FC 0000 F66A                             move.w  #$0000, (Control_Ports_Logical_Data_2).w     ; $FFFFF66A
00003C02 31FC 0000 F604                             move.w  #$0000, (Control_Ports_Buffer_Data).w        ; $FFFFF604
00003C08 31FC 0000 F606                             move.w  #$0000, (Control_Ports_Buffer_Data+$02).w    ; $FFFFF606
00003C0E 11FC 0001 F7CC                             move.b  #$01, (Control_Locked_Flag_P1).w             ; $FFFFF7CC
00003C14 11FC 0001 F7CF                             move.b  #$01, (Control_Locked_Flag_P2).w             ; $FFFFF7CF
00003C1A 11FC 0000 F711                             move.b  #$00, (Title_Card_Flag).w                    ; $FFFFF711
00003C20 4A38 F730                                  tst.b   (Water_Level_Flag).w                         ; $FFFFF730
00003C24 6700                                       beq.s   Offset_0x003C4C
00003C26 0C38 0001 FE10                             cmpi.b  #Hz_Id, (Level_Id).w                    ; $01, $FFFFFE10
00003C2C 6700                                       beq.s   Offset_0x003C36
00003C2E 0C38 0001 FE10                             cmpi.b  #Hz_Id, (Level_Id).w                    ; $01, $FFFFFE10
00003C34 6600                                       bne.s   Offset_0x003C4C
00003C36                            Offset_0x003C36:
00003C36 21FC 0000 0000 B128                        move.l  #Obj_Wave_Splash, (Obj_04_Mem_Address).w ; Offset_0x014926, $FFFFB128
00003C3E 21FC 0000 0000 B172                        move.l  #Obj_0x6D_Hz_Water_Splash, (Obj_05_Mem_Address).w ; Offset_0x02E22E, $FFFFB172
00003C46 11FC 0001 B19E                             move.b  #$01, (Obj_05_Mem_Address+Obj_Subtype).w     ; $FFFFB19E
00003C4C                            Offset_0x003C4C:
00003C4C 7000                                       moveq   #$00, D0
00003C4E 4A38 FE30                                  tst.b   (Saved_Level_Flag).w                         ; $FFFFFE30
00003C52 6600                                       bne.s   Offset_0x003C6C
00003C54 31C0 FE20                                  move.w  D0, (Ring_Count_Address).w                   ; $FFFFFE20
00003C58 21C0 FE22                                  move.l  D0, (Time_Count_Address).w                   ; $FFFFFE22
00003C5C 11C0 FE1B                                  move.b  D0, (Ring_Status_Flag).w                     ; $FFFFFE1B
00003C60 31C0 FED0                                  move.w  D0, (Ring_Count_Address_P2).w                ; $FFFFFED0
00003C64 21C0 FED2                                  move.l  D0, (Time_Count_Address_P2).w                ; $FFFFFED2
00003C68 11C0 FEC7                                  move.b  D0, (Ring_Status_Flag_P2).w                  ; $FFFFFEC7
00003C6C                            Offset_0x003C6C:
00003C6C 11C0 FE1A                                  move.b  D0, (Time_Over_Flag).w                       ; $FFFFFE1A
00003C70 11C0 FECC                                  move.b  D0, (Time_Over_Flag_P2).w                    ; $FFFFFECC
00003C74 31C0 FE08                                  move.w  D0, (Debug_Mode_Flag_Index).w                ; $FFFFFE08
00003C78 31C0 FE02                                  move.w  D0, (Restart_Level_Flag).w                   ; $FFFFFE02
00003C7C 11C0 F622                                  move.b  D0, (S2_Teleport_Timer).w                    ; $FFFFF622
00003C80 11C0 F623                                  move.b  D0, (S2_Teleport_Flag).w                     ; $FFFFF623
00003C84 31C0 FEF0                                  move.w  D0, (Total_Ring_Count_Address).w             ; $FFFFFEF0
00003C88 31C0 FEF2                                  move.w  D0, (Total_Ring_Count_Address_P2).w          ; $FFFFFEF2
00003C8C 31C0 FEF4                                  move.w  D0, (Monitors_Broken).w                      ; $FFFFFEF4
00003C90 31C0 FEF6                                  move.w  D0, (Monitors_Broken_P2).w                   ; $FFFFFEF6
00003C94 31C0 FEF8                                  move.w  D0, (Loser_Timer_Left).w                     ; $FFFFFEF8
00003C98 11C0 FEB0                                  move.b  D0, (LRz_Rocks_Routine).w                    ; $FFFFFEB0
00003C9C 6100 0000                                  bsr     Oscillate_Num_Init                     ; Offset_0x0049DE
00003CA0 11FC 0001 FE1F                             move.b  #$01, (HUD_Score_Refresh_Flag).w             ; $FFFFFE1F
00003CA6 11FC 0001 FE1D                             move.b  #$01, (HUD_Rings_Refresh_Flag).w             ; $FFFFFE1D
00003CAC 11FC 0001 FE1E                             move.b  #$01, (HUD_Timer_Refresh_Flag).w             ; $FFFFFE1E
00003CB2 11FC 0001 FECA                             move.b  #$01, (HUD_Timer_Refresh_Flag_P2).w          ; $FFFFFECA
00003CB8 4A78 FFF0                                  tst.w   (Auto_Control_Player_Flag).w                 ; $FFFFFFF0
00003CBC 6700                                       beq.s   Offset_0x003CCC
00003CBE 4A78 FE10                                  tst.w   (Level_Id).w                                 ; $FFFFFE10
00003CC2 6600                                       bne.s   Offset_0x003CCC
00003CC4 21FC 0000 0000 B172                        move.l  #Obj_AIz_Intro_Surfboard, (Obj_05_Mem_Address).w ; Offset_0x0185D6, $FFFFB172
00003CCC                            Offset_0x003CCC:
00003CCC 4EB9 0000 0000                             jsr     (Load_Object_Pos)                      ; Offset_0x011BF8
00003CD2 4EB9 0000 0000                             jsr     (Load_Ring_Pos)                        ; Offset_0x0087DA
00003CD8 4EB9 0000 0000                             jsr     (S2_Load_Triangle_Pos)                 ; Offset_0x008A5E
00003CDE 4EB9 0000 0000                             jsr     (LRz_Load_Rock_Pos)                    ; Offset_0x0129AA
00003CE4 4EB9 0000 0000                             jsr     (Load_Objects)                         ; Offset_0x0110AE
00003CEA 4EB9 0000 0000                             jsr     (Build_Sprites)                        ; Offset_0x011296
00003CF0 4EB9 0000 0000                             jsr     (Dynamic_Art_Cues)                     ; Offset_0x01E85A
00003CF6 6100 0000                                  bsr     Clear_End_Level_Art_Load_Flag          ; Offset_0x004B0A
00003CFA 31FC 0000 F790                             move.w  #$0000, (Demo_Button_Index).w                ; $FFFFF790
00003D00 31FC 0000 F732                             move.w  #$0000, (Demo_Button_Index_2P).w             ; $FFFFF732
00003D06 43F9 0000 0000                             lea     (Demo_Index), A1                       ; Offset_0x00491E
00003D0C 7000                                       moveq   #$00, D0
00003D0E 1038 FE10                                  move.b  (Level_Id).w, D0                             ; $FFFFFE10
00003D12 E548                                       lsl.w   #$02, D0
00003D14 2271 0000                                  move.l  $00(A1, D0), A1
00003D18 4A78 FFF0                                  tst.w   (Auto_Control_Player_Flag).w                 ; $FFFFFFF0
00003D1C 6A00                                       bpl.s   Offset_0x003D30
00003D1E 43F9 0000 0000                             lea     (Demo_End_Index), A1                   ; Offset_0x004982
00003D24 3038 FFF4                                  move.w  (End_Demo_Sequence_Idx).w, D0                ; $FFFFFFF4
00003D28 5340                                       subq.w  #$01, D0
00003D2A E548                                       lsl.w   #$02, D0
00003D2C 2271 0000                                  move.l  $00(A1, D0), A1
00003D30                            Offset_0x003D30:
00003D30 11E9 0001 F792                             move.b  $0001(A1), (Demo_Button_Press_Counter).w     ; $FFFFF792
00003D36 4A38 FE10                                  tst.b   (Level_Id).w                                 ; $FFFFFE10
00003D3A 6600                                       bne.s   Offset_0x003D48
00003D3C 43F9 0000 0000                             lea     (Demo_Angel_Island), A1                ; Offset_0x004BEA
00003D42 11E9 0001 F734                             move.b  $0001(A1), (Demo_Button_Press_Counter_2P).w  ; $FFFFF734
00003D48                            Offset_0x003D48:
00003D48 31FC 1194 F614                             move.w  #$1194, (Demo_Timer).w                       ; $FFFFF614
00003D4E 4A78 FFF0                                  tst.w   (Auto_Control_Player_Flag).w                 ; $FFFFFFF0
00003D52 6A00                                       bpl.s   Offset_0x003D68
00003D54 31FC 021C F614                             move.w  #$021C, (Demo_Timer).w                       ; $FFFFF614
00003D5A 0C78 0004 FFF4                             cmpi.w  #$0004, (End_Demo_Sequence_Idx).w            ; $FFFFFFF4
00003D60 6600                                       bne.s   Offset_0x003D68
00003D62 31FC 01FE F614                             move.w  #$01FE, (Demo_Timer).w                       ; $FFFFF614
00003D68                            Offset_0x003D68:
00003D68 6100 0000                                  bsr     LevelInit_UndewaterPalette             ; Offset_0x0050F0
00003D6C 11FC 0000 F7CC                             move.b  #$00, (Control_Locked_Flag_P1).w             ; $FFFFF7CC
00003D72 11FC 0000 F7CF                             move.b  #$00, (Control_Locked_Flag_P2).w             ; $FFFFF7CF
00003D78 11FC 0001 F711                             move.b  #$01, (Title_Card_Flag).w                    ; $FFFFF711
00003D7E 4A78 FFD8                                  tst.w   (Two_Player_Flag).w                          ; $FFFFFFD8
00003D82 6600 0000                                  bne     Offset_0x003EE2
00003D86 0C38 000E FE10                             cmpi.b  #ALz_Id, (Level_Id).w                   ; $0E, $FFFFFE10
00003D8C 6400                                       bcc.s   Offset_0x003D94
00003D8E 7002                                       moveq   #$02, D0
00003D90 6100 D73E                                  bsr     LoadPLC                                ; Offset_0x0014D0
00003D94                            Offset_0x003D94:
00003D94 31FC 202F F626                             move.w  #$202F, (Palette_Fade_Info).w                ; $FFFFF626
00003D9A 4EB9 0000 2DB0                             jsr     (Pal_Clear)                            ; Offset_0x002DB0
00003DA0 31FC 0016 EE56                             move.w  #$0016, (Palette_Fade_Timer).w               ; $FFFFEE56
00003DA6 31FC 0016 B27E                             move.w  #$0016, (Obj_08_Mem_Address+Obj_Timer).w     ; $FFFFB27E
00003DAC 08B8 0007 F600                             bclr    #$07, (Game_Mode).w                          ; $FFFFF600
00003DB2                            Offset_0x003DB2:
00003DB2 6100 D42C                                  bsr     Pause                                  ; Offset_0x0011E0
00003DB6 11FC 0008 F62A                             move.b  #$08, (VBlank_Index).w                       ; $FFFFF62A
00003DBC 4EB9 0000 19F0                             jsr     (Process_Kosinski_Queue_Main)          ; Offset_0x0019F0
00003DC2 6100 DD2A                                  bsr     Wait_For_VSync                         ; Offset_0x001AEE
00003DC6 5278 FE04                                  addq.w  #$01, (Level_Frame_Count).w                  ; $FFFFFE04
00003DCA 6100 0000                                  bsr     Init_Demo_Control                      ; Offset_0x0047F6
00003DCE 4EB9 0000 2DD4                             jsr     (Animate_Palette)                      ; Offset_0x002DD4
00003DD4 4EB9 0000 0000                             jsr     (Load_Tiles_As_You_Move_Loop)          ; Offset_0x02FF54
00003DDA 4EB9 0000 0000                             jsr     (Load_Objects)                         ; Offset_0x0110AE
00003DE0 4A78 FE02                                  tst.w   (Restart_Level_Flag).w                       ; $FFFFFE02
00003DE4 6600 FBB8                                  bne     Level                                  ; Offset_0x00399E
00003DE8 4EB9 0000 0000                             jsr     (Background_Scroll_Speed)              ; Offset_0x0120D4
00003DEE 4EB9 0000 0000                             jsr     (Background_Scroll_Layer)              ; Offset_0x02F2EA
00003DF4 6100 0000                                  bsr     Water_Effects                          ; Offset_0x0041B0
00003DF8 6100 0000                                  bsr     S2_Change_Water_Surface_Pos            ; Offset_0x00418C
00003DFC 4EB9 0000 0000                             jsr     (Load_Ring_Pos)                        ; Offset_0x0087DA
00003E02 0C38 000C FE10                             cmpi.b  #S2_CNz_Id, (Level_Id).w                ; $0C, $FFFFFE10
00003E08 6600                                       bne.s   Offset_0x003E10
00003E0A 4EB9 0000 0000                             jsr     (S2_Load_Triangle_Pos)                 ; Offset_0x008A5E
00003E10                            Offset_0x003E10:
00003E10 0C38 0009 FE10                             cmpi.b  #LRz_Id, (Level_Id).w                   ; $09, $FFFFFE10
00003E16 6600                                       bne.s   Offset_0x003E1E
00003E18 4EB9 0000 0000                             jsr     (LRz_Load_Rock_Pos)                    ; Offset_0x0129AA
00003E1E                            Offset_0x003E1E:
00003E1E 4EB9 0000 0000                             jsr     (Dynamic_Art_Cues)                     ; Offset_0x01E85A
00003E24 6100 D730                                  bsr     RunPLC                                 ; Offset_0x001556
00003E28 4EB9 0000 18FE                             jsr     (Process_Kosinski_Queue)               ; Offset_0x0018FE
00003E2E 6100 0000                                  bsr     Oscillate_Num_Do                       ; Offset_0x004A34
00003E32 6100 0000                                  bsr     Change_Object_Frame                    ; Offset_0x004ACA
00003E36 6100 0000                                  bsr     Check_End_Level_Art_Load               ; Offset_0x004B88
00003E3A 4EB9 0000 0000                             jsr     (Build_Sprites)                        ; Offset_0x011296
00003E40 4EB9 0000 0000                             jsr     (Load_Object_Pos)                      ; Offset_0x011BF8
00003E46 0C38 0008 F600                             cmpi.b  #gm_DemoMode, (Game_Mode).w             ; $08, $FFFFF600
00003E4C 6700                                       beq.s   Offset_0x003E5A
00003E4E 0C38 000C F600                             cmpi.b  #gm_PlayMode, (Game_Mode).w             ; $0C, $FFFFF600
00003E54 6700 FF5C                                  beq     Offset_0x003DB2
00003E58 4E75                                       rts
00003E5A                            Offset_0x003E5A:
00003E5A 4A78 FE02                                  tst.w   (Restart_Level_Flag).w                       ; $FFFFFE02
00003E5E 6600                                       bne.s   Offset_0x003E78
00003E60 4A78 F614                                  tst.w   (Demo_Timer).w                               ; $FFFFF614
00003E64 6700                                       beq.s   Offset_0x003E78
00003E66 0C38 0008 F600                             cmpi.b  #gm_DemoMode, (Game_Mode).w             ; $08, $FFFFF600
00003E6C 6700 FF44                                  beq     Offset_0x003DB2
00003E70 11FC 0000 F600                             move.b  #gm_SEGALogo, (Game_Mode).w             ; $00, $FFFFF600
00003E76 4E75                                       rts
00003E78                            Offset_0x003E78:
00003E78 0C38 0008 F600                             cmpi.b  #gm_DemoMode, (Game_Mode).w             ; $08, $FFFFF600
00003E7E 6600                                       bne.s   Offset_0x003E88
00003E80 11FC 0000 F600                             move.b  #gm_SEGALogo, (Game_Mode).w             ; $00, $FFFFF600
00003E86 4E75                                       rts
00003E88                            Offset_0x003E88:
00003E88 31FC 003C F614                             move.w  #$003C, (Demo_Timer).w                       ; $FFFFF614
00003E8E 31FC 003F F626                             move.w  #$003F, (Palette_Fade_Info).w                ; $FFFFF626
00003E94 4278 F794                                  clr.w   (Demo_Pal_FadeOut_Counter).w                 ; $FFFFF794
00003E98                            Offset_0x003E98:
00003E98 11FC 0008 F62A                             move.b  #$08, (VBlank_Index).w                       ; $FFFFF62A
00003E9E 6100 DC4E                                  bsr     Wait_For_VSync                         ; Offset_0x001AEE
00003EA2 6100 0000                                  bsr     Init_Demo_Control                      ; Offset_0x0047F6
00003EA6 4EB9 0000 0000                             jsr     (Load_Objects)                         ; Offset_0x0110AE
00003EAC 4EB9 0000 0000                             jsr     (Background_Scroll_Speed)              ; Offset_0x0120D4
00003EB2 4EB9 0000 0000                             jsr     (Background_Scroll_Layer)              ; Offset_0x02F2EA
00003EB8 4EB9 0000 0000                             jsr     (Build_Sprites)                        ; Offset_0x011296
00003EBE 4EB9 0000 0000                             jsr     (Load_Object_Pos)                      ; Offset_0x011BF8
00003EC4 4EB9 0000 18FE                             jsr     (Process_Kosinski_Queue)               ; Offset_0x0018FE
00003ECA 5378 F794                                  subq.w  #$01, (Demo_Pal_FadeOut_Counter).w           ; $FFFFF794
00003ECE 6A00                                       bpl.s   Offset_0x003EDA
00003ED0 31FC 0002 F794                             move.w  #$0002, (Demo_Pal_FadeOut_Counter).w         ; $FFFFF794
00003ED6 6100 EF30                                  bsr     Pal_FadeOut                            ; Offset_0x002E08
00003EDA                            Offset_0x003EDA:
00003EDA 4A78 F614                                  tst.w   (Demo_Timer).w                               ; $FFFFF614
00003EDE 66B8                                       bne.s   Offset_0x003E98
00003EE0 4E75                                       rts
00003EE2                            Offset_0x003EE2:
00003EE2 31FC 0000 FF7E                             move.w  #$0000, (Tmp_FF7E).w                         ; $FFFFFF7E
00003EE8 1038 FF7C                                  move.b  (Tmp_FF7C).w, D0                             ; $FFFFFF7C
00003EEC 0C00 00A0                                  cmpi.b  #$A0, D0
00003EF0 6600                                       bne.s   Offset_0x003EFC
00003EF2 3038 FF84                                  move.w  (Sound_Test_Sound).w, D0                     ; $FFFFFF84
00003EF6 E148                                       lsl.w   #$08, D0
00003EF8 31C0 FF7E                                  move.w  D0, (Tmp_FF7E).w                             ; $FFFFFF7E
00003EFC                            Offset_0x003EFC:
00003EFC 31FC 003F F626                             move.w  #$003F, (Palette_Fade_Info).w                ; $FFFFF626
00003F02 4EB9 0000 2DB0                             jsr     (Pal_Clear)                            ; Offset_0x002DB0
00003F08 31FC 0016 EE56                             move.w  #$0016, (Palette_Fade_Timer).w               ; $FFFFEE56
00003F0E 31FC 0000 FF7C                             move.w  #$0000, (Tmp_FF7C).w                         ; $FFFFFF7C
00003F14 08B8 0007 F600                             bclr    #$07, (Game_Mode).w                          ; $FFFFF600
00003F1A                            Level_Main_Loop:                                               ; Offset_0x003F1A                
00003F1A 6100 D2C4                                  bsr     Pause                                  ; Offset_0x0011E0
00003F1E 11FC 0008 F62A                             move.b  #$08, (VBlank_Index).w                       ; $FFFFF62A
00003F24 4EB9 0000 19F0                             jsr     (Process_Kosinski_Queue_Main)          ; Offset_0x0019F0
00003F2A 6100 DBC2                                  bsr     Wait_For_VSync                         ; Offset_0x001AEE
00003F2E 5278 FE04                                  addq.w  #$01, (Level_Frame_Count).w                  ; $FFFFFE04
00003F32 3F3C 0004                                  move.w  #$0004, -(A7)
00003F36 6000                                       bra.s   Offset_0x003F7C      
00003F38                            ;-------------------------------------------------------------------------------
00003F38                            Offset_0x003F38:
00003F38 3038 FF7E                                  move.w  (Tmp_FF7E).w, D0                             ; $FFFFFF7E
00003F3C D178 FF7C                                  add.w   D0, (Tmp_FF7C).w                             ; $FFFFFF7C
00003F40 6400                                       bcc.s   Offset_0x003F8C
00003F42 6100 D29C                                  bsr     Pause                                  ; Offset_0x0011E0
00003F46 33FC 0100 00A1 1100                        move.w  #$0100, (Z80_Bus_Request)                    ; $00A11100
00003F4E 6100 CFC6                                  bsr     Control_Ports_Read                     ; Offset_0x000F16
00003F52 33FC 0000 00A1 1100                        move.w  #$0000, (Z80_Bus_Request)                    ; $00A11100
00003F5A 31FC 0000 E700                             move.w  #$0000, (DMA_Buffer_List).w                  ; $FFFFE700
00003F60 21FC FFFF E700 E8F8                        move.l  #DMA_Buffer_List, (DMA_Buffer_List_End).w ; $FFFFE700, $FFFFE8F8
00003F68 4BF8 AC00                                  lea     (Sprite_Table_Input).w, A5                   ; $FFFFAC00
00003F6C                            Offset_0x003F6C:
00003F6C 3ABC 0000                                  move.w  #$0000, (A5)
00003F70 4BED 0080                                  lea     $0080(A5), A5
00003F74 BBFC FFFF B000                             cmpa.l  #Obj_Player_One, A5                          ; $FFFFB000
00003F7A 65F0                                       bcs.s   Offset_0x003F6C
00003F7C                            Offset_0x003F7C:
00003F7C 6100 0000                                  bsr     Init_Demo_Control                      ; Offset_0x0047F6
00003F80 4EB9 0000 0000                             jsr     (Load_Objects)                         ; Offset_0x0110AE
00003F86 4EB9 0000 0000                             jsr     (Background_Scroll_Speed)              ; Offset_0x0120D4
00003F8C                            Offset_0x003F8C:
00003F8C 5357                                       subq.w  #$01, (A7)
00003F8E 66A8                                       bne.s   Offset_0x003F38
00003F90 544F                                       addq.w  #$02, A7
00003F92 4A78 FE02                                  tst.w   (Restart_Level_Flag).w                       ; $FFFFFE02
00003F96 6600 FA06                                  bne     Level                                  ; Offset_0x00399E
00003F9A 4EB9 0000 0000                             jsr     (Background_Scroll_Layer)              ; Offset_0x02F2EA
00003FA0 4EB9 0000 0000                             jsr     (Dynamic_Art_Cues)                     ; Offset_0x01E85A
00003FA6 4EB9 0000 0000                             jsr     (Build_Sprites)                        ; Offset_0x011296
00003FAC 4EB9 0000 2DD4                             jsr     (Animate_Palette)                      ; Offset_0x002DD4
00003FB2 6100 D5A2                                  bsr     RunPLC                                 ; Offset_0x001556
00003FB6 4EB9 0000 18FE                             jsr     (Process_Kosinski_Queue)               ; Offset_0x0018FE
00003FBC 0C38 0008 F600                             cmpi.b  #gm_DemoMode, (Game_Mode).w             ; $08, $FFFFF600
00003FC2 6700                                       beq.s   Offset_0x003FD0
00003FC4 0C38 000C F600                             cmpi.b  #gm_PlayMode, (Game_Mode).w             ; $0C, $FFFFF600
00003FCA 6700 FF4E                                  beq     Level_Main_Loop                        ; Offset_0x003F1A
00003FCE 4E75                                       rts
00003FD0                            Offset_0x003FD0:
00003FD0 4A78 FE02                                  tst.w   (Restart_Level_Flag).w                       ; $FFFFFE02
00003FD4 6600                                       bne.s   Offset_0x003FEE
00003FD6 4A78 F614                                  tst.w   (Demo_Timer).w                               ; $FFFFF614
00003FDA 6700                                       beq.s   Offset_0x003FEE
00003FDC 0C38 0008 F600                             cmpi.b  #gm_DemoMode, (Game_Mode).w             ; $08, $FFFFF600
00003FE2 6700 FF36                                  beq     Level_Main_Loop                        ; Offset_0x003F1A
00003FE6 11FC 0000 F600                             move.b  #gm_SEGALogo, (Game_Mode).w             ; $00, $FFFFF600
00003FEC 4E75                                       rts
00003FEE                            Offset_0x003FEE:
00003FEE 0C38 0008 F600                             cmpi.b  #gm_DemoMode, (Game_Mode).w             ; $08, $FFFFF600
00003FF4 6600                                       bne.s   Offset_0x003FFE
00003FF6 11FC 0000 F600                             move.b  #gm_SEGALogo, (Game_Mode).w             ; $00, $FFFFF600
00003FFC 4E75                                       rts
00003FFE                            Offset_0x003FFE:
00003FFE 31FC 003C F614                             move.w  #$003C, (Demo_Timer).w                       ; $FFFFF614
00004004 31FC 003F F626                             move.w  #$003F, (Palette_Fade_Info).w                ; $FFFFF626
0000400A 4278 F794                                  clr.w   (Demo_Pal_FadeOut_Counter).w                 ; $FFFFF794
0000400E                            Offset_0x00400E:
0000400E 11FC 0008 F62A                             move.b  #$08, (VBlank_Index).w                       ; $FFFFF62A
00004014 6100 DAD8                                  bsr     Wait_For_VSync                         ; Offset_0x001AEE
00004018 6100 0000                                  bsr     Init_Demo_Control                      ; Offset_0x0047F6
0000401C 4EB9 0000 0000                             jsr     (Load_Objects)                         ; Offset_0x0110AE
00004022 4EB9 0000 0000                             jsr     (Background_Scroll_Speed)              ; Offset_0x0120D4
00004028 4EB9 0000 0000                             jsr     (Background_Scroll_Layer)              ; Offset_0x02F2EA
0000402E 4EB9 0000 0000                             jsr     (Build_Sprites)                        ; Offset_0x011296
00004034 4EB9 0000 0000                             jsr     (Load_Object_Pos)                      ; Offset_0x011BF8
0000403A 4EB9 0000 18FE                             jsr     (Process_Kosinski_Queue)               ; Offset_0x0018FE
00004040 5378 F794                                  subq.w  #$01, (Demo_Pal_FadeOut_Counter).w           ; $FFFFF794
00004044 6A00                                       bpl.s   Offset_0x004050
00004046 31FC 0002 F794                             move.w  #$0002, (Demo_Pal_FadeOut_Counter).w         ; $FFFFF794
0000404C 6100 EDBA                                  bsr     Pal_FadeOut                            ; Offset_0x002E08
00004050                            Offset_0x004050:
00004050 4A78 F614                                  tst.w   (Demo_Timer).w                               ; $FFFFF614
00004054 66B8                                       bne.s   Offset_0x00400E
00004056 4E75                                       rts
00004058                            
00004058                            ;-------------------------------------------------------------------------------
00004058                            ;  Rotina para inicializar o jogador n_ 1 como:
00004058                            ;   - Sonic ou Miles se o jogo estiver no modo -> 1 PLAYER 
00004058                            ;   - Sonic          se o jogo estiver no modo -> 2 PLAYER VS
00004058                            ; ->>>  
00004058                            ;------------------------------------------------------------------------------- 
00004058                            Init_Player_Selected:                                          ; Offset_0x004058
00004058 0C38 0088 F600                             cmpi.b  #($80|gm_DemoMode), (Game_Mode).w       ; $88, $FFFFF600
0000405E 6700                                       beq.s   Offset_0x00406E
00004060 4A78 FFD8                                  tst.w   (Two_Player_Flag).w                          ; $FFFFFFD8
00004064 6600                                       bne.s   Offset_0x00406E
00004066 31F8 FF0A FF08                             move.w  (Player_Select_Flag).w, (Player_Selected_Flag).w ; $FFFFFF0A, $FFFFFF08
0000406C 4E75                                       rts
0000406E                            Offset_0x00406E:
0000406E 31FC 0000 FF08                             move.w  #$0000, (Player_Selected_Flag).w             ; $FFFFFF08
00004074 4E75                                       rts
00004076                            ;-------------------------------------------------------------------------------
00004076                            ;  Rotina para inicializar o jogador n_ 1 como:
00004076                            ;   - Sonic ou Miles se o jogo estiver no modo -> 1 PLAYER 
00004076                            ;   - Sonic          se o jogo estiver no modo -> 2 PLAYER VS
00004076                            ; <<<-  
00004076                            ;-------------------------------------------------------------------------------                 
00004076                                            
00004076                            ;-------------------------------------------------------------------------------
00004076                            ; Rotina para carregar o jogador selecionado no modo 1 PLAYER
00004076                            ; ->>> Sonic And Miles / Sonic Alone / Miles Alone
00004076                            ;-------------------------------------------------------------------------------   
00004076                            Load_Player_Selected:                                          ; Offset_0x004076
00004076 21FC 0000 0000 B094                        move.l  #Obj_Clear_Collision_Response_List, (Obj_02_Mem_Address).w ; Offset_0x004184, $FFFFB094
0000407E 4A78 FFD8                                  tst.w   (Two_Player_Flag).w                          ; $FFFFFFD8
00004082 6600                                       bne.s   Offset_0x0040F2
00004084 3038 FF08                                  move.w  (Player_Selected_Flag).w, D0                 ; $FFFFFF08
00004088 6600                                       bne.s   Offset_0x0040C4
0000408A 21FC 0000 0000 B000                        move.l  #Obj_Sonic, (Obj_Player_One).w  ; Offset_0x00AA36, $FFFFB000
00004092 21FC 0000 0000 CC54                        move.l  #Obj_Dust_Water_Splash, (Obj_P1_Dust_Water_Splash).w ; Offset_0x00FD62, $FFFFCC54
0000409A 21FC 0000 0000 B04A                        move.l  #Obj_Miles, (Obj_Player_Two).w  ; Offset_0x00D11E, $FFFFB04A
000040A2 31F8 B010 B05A                             move.w  (Obj_Player_One+Obj_X).w, (Obj_Player_Two+Obj_X).w ; $FFFFB010, $FFFFB05A
000040A8 31F8 B014 B05E                             move.w  (Obj_Player_One+Obj_Y).w, (Obj_Player_Two+Obj_Y).w ; $FFFFB014, $FFFFB05E
000040AE 0478 0020 B05A                             subi.w  #$0020, (Obj_Player_Two+Obj_X).w             ; $FFFFB05A
000040B4 0678 0004 B05E                             addi.w  #$0004, (Obj_Player_Two+Obj_Y).w             ; $FFFFB05E
000040BA 21FC 0000 0000 CC9E                        move.l  #Obj_Dust_Water_Splash, (Obj_P2_Dust_Water_Splash).w ; Offset_0x00FD62, $FFFFCC9E
000040C2 4E75                                       rts
000040C4                            Offset_0x0040C4:
000040C4 5340                                       subq.w  #$01, D0
000040C6 6600                                       bne.s   Offset_0x0040DA
000040C8 21FC 0000 0000 B000                        move.l  #Obj_Sonic, (Obj_Player_One).w ; Offset_0x00AA36, $FFFFB000
000040D0 21FC 0000 0000 CC54                        move.l  #Obj_Dust_Water_Splash, (Obj_P1_Dust_Water_Splash).w ; Offset_0x00FD62, $FFFFCC54
000040D8 4E75                                       rts
000040DA                            Offset_0x0040DA:
000040DA 21FC 0000 0000 B000                        move.l  #Obj_Miles, (Obj_Player_One).w ; Offset_0x00D11E, $FFFFB000
000040E2 21FC 0000 0000 CC9E                        move.l  #Obj_Dust_Water_Splash, (Obj_P2_Dust_Water_Splash).w ; Offset_0x00FD62, $FFFFCC9E
000040EA 0678 0004 B014                             addi.w  #$0004, (Obj_Player_One+Obj_Y).w             ; $FFFFB014
000040F0 4E75                                       rts
000040F2                            Offset_0x0040F2:
000040F2 1038 FFDA                                  move.b  (Menu_Player_One_Cursor).w, D0               ; $FFFFFFDA
000040F6 6100                                       bsr.s   Offset_0x004130
000040F8 21C1 B000                                  move.l  D1, (Obj_Player_One).w                       ; $FFFFB000
000040FC 1038 FFDB                                  move.b  (Menu_Player_Two_Cursor).w, D0               ; $FFFFFFDB
00004100 6100                                       bsr.s   Offset_0x004130
00004102 21C1 B04A                                  move.l  D1, (Obj_Player_Two).w                       ; $FFFFB04A
00004106 11F8 FFDA B038                             move.b  (Menu_Player_One_Cursor).w, (Obj_Player_One+Obj_Player_Selected).w ; $FFFFFFDA, $FFFFB038
0000410C 11F8 FFDB B082                             move.b  (Menu_Player_Two_Cursor).w, (Obj_Player_Two+Obj_Player_Selected).w ; $FFFFFFDB, $FFFFB082
00004112 31F8 B010 B05A                             move.w  (Obj_Player_One+Obj_X).w, (Obj_Player_Two+Obj_X).w ; $FFFFB010, $FFFFB05A
00004118 31F8 B014 B05E                             move.w  (Obj_Player_One+Obj_Y).w, (Obj_Player_Two+Obj_Y).w ; $FFFFB014, $FFFFB05E
0000411E 21FC 0000 0000 CC54                        move.l  #Obj_Dust_Water_Splash_2P, (Obj_P1_Dust_Water_Splash).w ; Offset_0x0100DA, $FFFFCC54
00004126 21FC 0000 0000 CC9E                        move.l  #Obj_Dust_Water_Splash_2P, (Obj_P2_Dust_Water_Splash).w ; Offset_0x0100DA, $FFFFCC9E
0000412E 6000                                       bra.s   Offset_0x00414E
00004130                            Offset_0x004130:
00004130 4A00                                       tst.b   D0
00004132 6600                                       bne.s   Offset_0x00413A
00004134 223C 0000 0000                             move.l  #Obj_Sonic_Knuckles_2P, D1             ; Offset_0x00A552
0000413A                            Offset_0x00413A:
0000413A 5300                                       subq.b  #$01, D0
0000413C 6600                                       bne.s   Offset_0x004146
0000413E 223C 0000 0000                             move.l  #Obj_Miles_2P, D1                      ; Offset_0x00CC0A
00004144 4E75                                       rts
00004146                            Offset_0x004146:
00004146 223C 0000 0000                             move.l  #Obj_Sonic_Knuckles_2P, D1             ; Offset_0x00A552
0000414C 4E75                                       rts
0000414E                            Offset_0x00414E:
0000414E 45F8 EDA0                                  lea     (Palette_Row_1_Data_Target).w, A2            ; $FFFFEDA0
00004152 43F9 0000 0000                             lea     (Pal_Level_2P), A1                     ; Offset_0x004164
00004158 303C 000F                                  move.w  #$000F, D0
0000415C                            Offset_0x00415C:
0000415C 34D9                                       move.w  (A1)+, (A2)+
0000415E 51C8 FFFC                                  dbra    D0, Offset_0x00415C
00004162 4E75                                       rts    
00004164                            ;-------------------------------------------------------------------------------
00004164                            Pal_Level_2P:                                                  ; Offset_0x004164
00004164 0A86 0EEE 084E 040C 0206+                  dc.w    $0A86, $0EEE, $084E, $040C, $0206, $0080, $000E, $0008
00004174 00AE 008E 08AE 046A 0ECC+                  dc.w    $00AE, $008E, $08AE, $046A, $0ECC, $0CAA, $0866, $0222
00004184                            ;-------------------------------------------------------------------------------
00004184                            ; Rotina para carregar o jogador selecionado no modo 1 PLAYER
00004184                            ; <<<- Sonic And Miles / Sonic Alone / Miles Alone
00004184                            ;-------------------------------------------------------------------------------                 
00004184                            
00004184                            Obj_Clear_Collision_Response_List:                             ; Offset_0x004184
00004184 31FC 0000 E380                             move.w  #$0000, (Collision_Response_List).w          ; $FFFFE380
0000418A 4E75                                       rts               
0000418C                            ;-------------------------------------------------------------------------------
0000418C                            ; Rotina para mudar a superf_cie da _gua.
0000418C                            ; ->>>   Sonic 2 left over
0000418C                            ;------------------------------------------------------------------------------- 
0000418C                            S2_Change_Water_Surface_Pos:                                   ; Offset_0x00418C
0000418C 4E75                                       rts
0000418E                            ; Offset_0x00418E:
0000418E 4A38 F730                                  tst.b   (Water_Level_Flag).w                         ; $FFFFF730
00004192 6700                                       beq.s   Offset_0x0041AE
00004194 3238 EE78                                  move.w  (Camera_X).w, D1                             ; $FFFFEE78
00004198 0838 0000 FE05                             btst    #$00, (Level_Frame_Count+$01).w              ; $FFFFFE05
0000419E 6700                                       beq.s   Offset_0x0041A4
000041A0 0641 0020                                  addi.w  #$0020, D1
000041A4                            Offset_0x0041A4:
000041A4 3001                                       move.w  D1, D0
000041A6 0640 0060                                  addi.w  #$0060, D0
000041AA 0641 0120                                  addi.w  #$0120, D1
000041AE                            Offset_0x0041AE:
000041AE 4E75                                       rts                
000041B0                            ;-------------------------------------------------------------------------------
000041B0                            ; Rotina para mudar a superf_cie da _gua.
000041B0                            ; <<<-   Sonic 2 left over
000041B0                            ;-------------------------------------------------------------------------------
000041B0                                             
000041B0                            ;------------------------------------------------------------------------------- 
000041B0                            ; Rotina para controlar os efeitos da _gua. Ex: Mudan_a de n_vel
000041B0                            ; ->>>   
000041B0                            ;-------------------------------------------------------------------------------  
000041B0                            Water_Effects:                                                 ; Offset_0x0041B0
000041B0 4A38 F730                                  tst.b   (Water_Level_Flag).w                         ; $FFFFF730
000041B4 6700 0000                                  beq     Offset_0x004236
000041B8 4A38 EE30                                  tst.b   (Rasters_Flag).w                             ; $FFFFEE30
000041BC 6600                                       bne.s   Offset_0x0041CE
000041BE 0C38 0006 B005                             cmpi.b  #$06, (Obj_Player_One+Obj_Routine).w         ; $FFFFB005
000041C4 6400                                       bcc.s   Offset_0x0041CE
000041C6 6100 0000                                  bsr     Hz_Wind_Tunnels                        ; Offset_0x0043C0
000041CA 6100 0000                                  bsr     Dynamic_Water_Height                   ; Offset_0x00427C
000041CE                            Offset_0x0041CE:
000041CE 4238 F64E                                  clr.b   (Underwater_Flag).w                          ; $FFFFF64E
000041D2 7000                                       moveq   #$00, D0
000041D4 0C38 0000 FE10                             cmpi.b  #Aiz_Id, (Level_Id).w                   ; $00, $FFFFFE10
000041DA 6700                                       beq.s   Offset_0x0041F2
000041DC 0C38 0001 FE10                             cmpi.b  #Hz_Id, (Level_Id).w                    ; $01, $FFFFFE10
000041E2 6700                                       beq.s   Offset_0x0041F2
000041E4 0C38 0006 FE10                             cmpi.b  #LBz_Id, (Level_Id).w                   ; $06, $FFFFFE10
000041EA 6700                                       beq.s   Offset_0x0041F2
000041EC 1038 FE60                                  move.b  (Oscillate_Data_Buffer+$02).w, D0            ; $FFFFFE60
000041F0 E248                                       lsr.w   #$01, D0
000041F2                            Offset_0x0041F2:
000041F2 D078 F648                                  add.w   (Current_Water_Level).w, D0                  ; $FFFFF648
000041F6 31C0 F646                                  move.w  D0, (Water_Level_Move).w                     ; $FFFFF646
000041FA 0C78 0100 FE10                             cmpi.w  #Hz_Act_1, (Level_Id).w               ; $0100, $FFFFFE10
00004200 6600                                       bne.s   Offset_0x00420A
00004202 0C78 0900 EE78                             cmpi.w  #$0900, (Camera_X).w                         ; $FFFFEE78
00004208 6500                                       bcs.s   Offset_0x004220
0000420A                            Offset_0x00420A:
0000420A 3038 F646                                  move.w  (Water_Level_Move).w, D0                     ; $FFFFF646
0000420E 9078 EE7C                                  sub.w   (Camera_Y).w, D0                             ; $FFFFEE7C
00004212 6700                                       beq.s   Offset_0x00421A
00004214 6400                                       bcc.s   Offset_0x004228
00004216 4A40                                       tst.w   D0
00004218 6A00                                       bpl.s   Offset_0x004228
0000421A                            Offset_0x00421A:
0000421A 11FC 0001 F64E                             move.b  #$01, (Underwater_Flag).w                    ; $FFFFF64E
00004220                            Offset_0x004220:
00004220 11FC 00FF F625                             move.b  #$FF, (Scanline_Counter).w                   ; $FFFFF625
00004226 4E75                                       rts
00004228                            Offset_0x004228:
00004228 0C40 00DF                                  cmpi.w  #$00DF, D0
0000422C 6500                                       bcs.s   Offset_0x004232
0000422E 303C 00FF                                  move.w  #$00FF, D0
00004232                            Offset_0x004232:
00004232 11C0 F625                                  move.b  D0, (Scanline_Counter).w                     ; $FFFFF625
00004236                            Offset_0x004236:
00004236 6100 0000                                  bsr     Level_Slides                           ; Offset_0x00457C
0000423A 4E75                                       rts
0000423C                            ;------------------------------------------------------------------------------- 
0000423C                            ; Rotina para controlar os efeitos da _gua. Ex: Mudan_a de n_vel
0000423C                            ; <<<-   
0000423C                            ;-------------------------------------------------------------------------------  
0000423C                                
0000423C                            ;-------------------------------------------------------------------------------
0000423C                            ; Rotina para mudar a altura da _gua dinamicamente
0000423C                            ; ->>>
0000423C                            ;------------------------------------------------------------------------------- 
0000423C                            Water_Height_Array:                                            ; Offset_0x00423C
0000423C 0504 0528                                  dc.w    $0504, $0528 ; AIz
00004240 0500 0700                                  dc.w    $0500, $0700 ; Hz
00004244 0600 0600                                  dc.w    $0600, $0600 ; MGz
00004248 0600 0A90                                  dc.w    $0600, $0A90 ; CNz
0000424C 0600 0600                                  dc.w    $0600, $0600 ; FBz
00004250 0600 0600                                  dc.w    $0600, $0600 ; Iz
00004254 0A80 065E                                  dc.w    $0A80, $065E ; LBz
00004258 0600 0600                                  dc.w    $0600, $0600 ; MVz
0000425C 0600 0600                                  dc.w    $0600, $0600 ; Sz
00004260 0600 0600                                  dc.w    $0600, $0600 ; LRz
00004264 0600 0600                                  dc.w    $0600, $0600 ; SSz
00004268 0600 0600                                  dc.w    $0600, $0600 ; DEz
0000426C 0600 0600                                  dc.w    $0600, $0600 ; TDz
00004270 0600 0710                                  dc.w    $0600, $0710 ; Ending
00004274 0600 0600                                  dc.w    $0600, $0600 ; ALz
00004278 0410 0510                                  dc.w    $0410, $0510 ; BPz
0000427C                            ;------------------------------------------------------------------------------- 
0000427C                            Dynamic_Water_Height:                                          ; Offset_0x00427C
0000427C 7000                                       moveq   #$00, D0
0000427E 3038 FE10                                  move.w  (Level_Id).w, D0                             ; $FFFFFE10
00004282 E218                                       ror.b   #$01, D0
00004284 EC48                                       lsr.w   #$06, D0
00004286 0240 FFFE                                  andi.w  #$FFFE, D0
0000428A 303B 0000                                  move.w  Dynamic_Water_Index(PC, D0), D0        ; Offset_0x0042AC
0000428E 4EBB 0000                                  jsr     Dynamic_Water_Index(PC, D0)            ; Offset_0x0042AC
00004292 7200                                       moveq   #$00, D1
00004294 1238 F64C                                  move.b  (Water_Level_Change_Speed).w, D1             ; $FFFFF64C
00004298 3038 F64A                                  move.w  (Target_Water_Level).w, D0                   ; $FFFFF64A
0000429C 9078 F648                                  sub.w   (Current_Water_Level).w, D0                  ; $FFFFF648
000042A0 6700                                       beq.s   Offset_0x0042AA
000042A2 6400                                       bcc.s   Offset_0x0042A6
000042A4 4441                                       neg.w   D1
000042A6                            Offset_0x0042A6:
000042A6 D378 F648                                  add.w   D1, (Current_Water_Level).w                  ; $FFFFF648
000042AA                            Offset_0x0042AA:
000042AA 4E75                                       rts     
000042AC                            ;-------------------------------------------------------------------------------
000042AC                            Dynamic_Water_Index:                                           ; Offset_0x0042AC
000042AC 0000                                       dc.w    Dynamic_AIz1_Water-Dynamic_Water_Index ; Offset_0x0042EC
000042AE 0000                                       dc.w    Dynamic_AIz2_Water-Dynamic_Water_Index ; Offset_0x0042EE
000042B0 0000                                       dc.w    Dynamic_Hz1_Water-Dynamic_Water_Index  ; Offset_0x00434A
000042B2 0000                                       dc.w    Dynamic_Hz2_Water-Dynamic_Water_Index  ; Offset_0x004362
000042B4 0000                                       dc.w    Dynamic_MGz1_Water-Dynamic_Water_Index ; Offset_0x004372
000042B6 0000                                       dc.w    Dynamic_MGz2_Water-Dynamic_Water_Index ; Offset_0x004372
000042B8 0000                                       dc.w    Dynamic_CNz1_Water-Dynamic_Water_Index ; Offset_0x004372
000042BA 0000                                       dc.w    Dynamic_CNz2_Water-Dynamic_Water_Index ; Offset_0x004372
000042BC 0000                                       dc.w    Dynamic_FBz1_Water-Dynamic_Water_Index ; Offset_0x004372
000042BE 0000                                       dc.w    Dynamic_FBz2_Water-Dynamic_Water_Index ; Offset_0x004372
000042C0 0000                                       dc.w    Dynamic_Iz1_Water-Dynamic_Water_Index  ; Offset_0x004372
000042C2 0000                                       dc.w    Dynamic_Iz2_Water-Dynamic_Water_Index  ; Offset_0x004372
000042C4 0000                                       dc.w    Dynamic_LBz1_Water-Dynamic_Water_Index ; Offset_0x004374
000042C6 0000                                       dc.w    Dynamic_LBz2_Water-Dynamic_Water_Index ; Offset_0x004390
000042C8 0000                                       dc.w    Dynamic_MHz1_Water-Dynamic_Water_Index ; Offset_0x004390
000042CA 0000                                       dc.w    Dynamic_MHz2_Water-Dynamic_Water_Index ; Offset_0x004390
000042CC 0000                                       dc.w    Dynamic_Sz1_Water-Dynamic_Water_Index  ; Offset_0x004390
000042CE 0000                                       dc.w    Dynamic_Sz2_Water-Dynamic_Water_Index  ; Offset_0x004390
000042D0 0000                                       dc.w    Dynamic_LRz1_Water-Dynamic_Water_Index ; Offset_0x004390
000042D2 0000                                       dc.w    Dynamic_LRz2_Water-Dynamic_Water_Index ; Offset_0x004390
000042D4 0000                                       dc.w    Dynamic_SSz1_Water-Dynamic_Water_Index ; Offset_0x004390
000042D6 0000                                       dc.w    Dynamic_SSz2_Water-Dynamic_Water_Index ; Offset_0x004390
000042D8 0000                                       dc.w    Dynamic_DEz1_Water-Dynamic_Water_Index ; Offset_0x004390
000042DA 0000                                       dc.w    Dynamic_DEz2_Water-Dynamic_Water_Index ; Offset_0x004390
000042DC 0000                                       dc.w    Dynamic_TDz1_Water-Dynamic_Water_Index ; Offset_0x004390
000042DE 0000                                       dc.w    Dynamic_TDz2_Water-Dynamic_Water_Index ; Offset_0x004390
000042E0 0000                                       dc.w    Dynamic_ES1_Water-Dynamic_Water_Index  ; Offset_0x004390
000042E2 0000                                       dc.w    Dynamic_ES2_Water-Dynamic_Water_Index  ; Offset_0x004392
000042E4 0000                                       dc.w    Dynamic_ALz1_Water-Dynamic_Water_Index ; Offset_0x004390
000042E6 0000                                       dc.w    Dynamic_ALz2_Water-Dynamic_Water_Index ; Offset_0x004390
000042E8 0000                                       dc.w    Dynamic_BPz1_Water-Dynamic_Water_Index ; Offset_0x004390
000042EA 0000                                       dc.w    Dynamic_BPz2_Water-Dynamic_Water_Index ; Offset_0x004390
000042EC                            ;-------------------------------------------------------------------------------
000042EC                            Dynamic_AIz1_Water:                                            ; Offset_0x0042EC
000042EC 4E75                                       rts  
000042EE                            ;-------------------------------------------------------------------------------
000042EE                            Dynamic_AIz2_Water:                                            ; Offset_0x0042EE
000042EE 0C78 2440 EE78                             cmpi.w  #$2440, (Camera_X).w                         ; $FFFFEE78
000042F4 6400                                       bcc.s   Offset_0x00430C
000042F6 0C78 0618 F64A                             cmpi.w  #$0618, (Target_Water_Level).w               ; $FFFFF64A
000042FC 6600                                       bne.s   Offset_0x004348
000042FE 31FC 0528 F64A                             move.w  #$0528, (Target_Water_Level).w               ; $FFFFF64A
00004304 11FC 0002 F64C                             move.b  #$02, (Water_Level_Change_Speed).w           ; $FFFFF64C
0000430A 4E75                                       rts
0000430C                            Offset_0x00430C:
0000430C 4A38 F7E0                                  tst.b   (Level_Trigger_Array).w                      ; $FFFFF7E0
00004310 6600                                       bne.s   Offset_0x004320
00004312 0C78 2850 EE78                             cmpi.w  #$2850, (Camera_X).w                         ; $FFFFEE78
00004318 6500                                       bcs.s   Offset_0x004348
0000431A 11FC 0001 F7E0                             move.b  #$01, (Level_Trigger_Array).w                ; $FFFFF7E0
00004320                            Offset_0x004320:
00004320 0C78 0618 F64A                             cmpi.w  #$0618, (Target_Water_Level).w               ; $FFFFF64A
00004326 6700                                       beq.s   Offset_0x004348
00004328 47F8 801C                                  lea     (Level_Layout_Buffer+$1C).w, A3              ; $FFFF801C
0000432C 7205                                       moveq   #$05, D1
0000432E                            Offset_0x00432E:
0000432E 3253                                       move.w  (A3), A1
00004330 137C 0000 004D                             move.b  #$00, $004D(A1)
00004336 137C 0000 004E                             move.b  #$00, $004E(A1)
0000433C 584B                                       addq.w  #$04, A3
0000433E 51C9 FFEE                                  dbra    D1, Offset_0x00432E
00004342 31FC 0618 F64A                             move.w  #$0618, (Target_Water_Level).w               ; $FFFFF64A
00004348                            Offset_0x004348:
00004348 4E75                                       rts
0000434A                            ;-------------------------------------------------------------------------------
0000434A                            Dynamic_Hz1_Water:                                             ; Offset_0x00434A
0000434A 43F9 0000 0000                             lea     (Offset_0x004352), A1
00004350 6000                                       bra.s   Offset_0x0043A2
00004352                            ;-------------------------------------------------------------------------------
00004352                            Offset_0x004352:
00004352 8500 0900 8680 2A00                        dc.b    $85, $00, $09, $00, $86, $80, $2A, $00
0000435A 8600 3500 86A0 FFFF                        dc.b    $86, $00, $35, $00, $86, $A0, $FF, $FF  
00004362                            ;-------------------------------------------------------------------------------  
00004362                            Dynamic_Hz2_Water:                                             ; Offset_0x004362
00004362 43F9 0000 0000                             lea     (Offset_0x00436A), A1
00004368 6000                                       bra.s   Offset_0x0043A2 
0000436A                            ;-------------------------------------------------------------------------------                                         
0000436A                            Offset_0x00436A:
0000436A 0700 3E00 07E0 FFFF                        dc.b    $07, $00, $3E, $00, $07, $E0, $FF, $FF 
00004372                            ;-------------------------------------------------------------------------------  
00004372                            Dynamic_MGz1_Water:                                            ; Offset_0x004372
00004372                            Dynamic_MGz2_Water:
00004372                            Dynamic_CNz1_Water:
00004372                            Dynamic_CNz2_Water:
00004372                            Dynamic_FBz1_Water:
00004372                            Dynamic_FBz2_Water:
00004372                            Dynamic_Iz1_Water:
00004372                            Dynamic_Iz2_Water:                                           
00004372 4E75                                       rts
00004374                            ;-------------------------------------------------------------------------------  
00004374                            Dynamic_LBz1_Water:                                            ; Offset_0x004374
00004374 43F9 0000 0000                             lea     (Offset_0x00437C), A1
0000437A 6000                                       bra.s   Offset_0x0043A2         
0000437C                            ;-------------------------------------------------------------------------------
0000437C                            Offset_0x00437C:
0000437C 8B00 0E00 8A00 1980                        dc.b    $8B, $00, $0E, $00, $8A, $00, $19, $80
00004384 8A00 2340 8AC8 2C00                        dc.b    $8A, $00, $23, $40, $8A, $C8, $2C, $00
0000438C 8FF0 FFFF                                  dc.b    $8F, $F0, $FF, $FF   
00004390                            ;------------------------------------------------------------------------------- 
00004390                            Dynamic_LBz2_Water:                                            ; Offset_0x004390
00004390                            Dynamic_MHz1_Water:
00004390                            Dynamic_MHz2_Water:
00004390                            Dynamic_Sz1_Water:
00004390                            Dynamic_Sz2_Water:
00004390                            Dynamic_LRz1_Water:
00004390                            Dynamic_LRz2_Water:
00004390                            Dynamic_SSz1_Water:
00004390                            Dynamic_SSz2_Water:
00004390                            Dynamic_DEz1_Water:
00004390                            Dynamic_DEz2_Water:
00004390                            Dynamic_TDz1_Water:
00004390                            Dynamic_TDz2_Water:
00004390                            Dynamic_ES1_Water:  
00004390                            Dynamic_ALz1_Water:
00004390                            Dynamic_ALz2_Water:
00004390                            Dynamic_BPz1_Water:
00004390                            Dynamic_BPz2_Water:
00004390                            Dynamic_Null_Water:  
00004390 4E75                                       rts      
00004392                            ;------------------------------------------------------------------------------- 
00004392                            Dynamic_ES2_Water:                                             ; Offset_0x004392
00004392 0C78 1DE0 EE78                             cmpi.w  #$1DE0, (Camera_X).w                         ; $FFFFEE78
00004398 6500                                       bcs.s   Offset_0x0043A0
0000439A 31FC 0510 F64A                             move.w  #$0510, (Target_Water_Level).w               ; $FFFFF64A
000043A0                            Offset_0x0043A0:
000043A0 4E75                                       rts
000043A2                            Offset_0x0043A2:
000043A2 3038 EE78                                  move.w  (Camera_X).w, D0                             ; $FFFFEE78
000043A6                            Offset_0x0043A6:
000043A6 2219                                       move.l  (A1)+, D1
000043A8 B041                                       cmp.w   D1, D0
000043AA 62FA                                       bhi.s   Offset_0x0043A6
000043AC 4841                                       swap.w  D1
000043AE 4A41                                       tst.w   D1
000043B0 6A00                                       bpl.s   Offset_0x0043BA
000043B2 0241 7FFF                                  andi.w  #$7FFF, D1
000043B6 31C1 F648                                  move.w  D1, (Current_Water_Level).w                  ; $FFFFF648
000043BA                            Offset_0x0043BA:
000043BA 31C1 F64A                                  move.w  D1, (Target_Water_Level).w                   ; $FFFFF64A
000043BE 4E75                                       rts  
000043C0                            ;-------------------------------------------------------------------------------
000043C0                            Hz_Wind_Tunnels:                                               ; Offset_0x0043C0
000043C0 4A78 FE08                                  tst.w   (Debug_Mode_Flag_Index).w                    ; $FFFFFE08
000043C4 6600 0000                                  bne     Offset_0x0044A6
000043C8 0C78 0100 FE10                             cmpi.w  #Hz_Act_1, (Level_Id).w               ; $0100, $FFFFFE10
000043CE 6600 0000                                  bne     Offset_0x0044A6
000043D2 47F8 F7C8                                  lea     (Sonic_Wind_Flag).w, A3                      ; $FFFFF7C8
000043D6 43F8 B000                                  lea     (Obj_Player_One).w, A1                       ; $FFFFB000
000043DA 1C38 F602                                  move.b  (Control_Ports_Logical_Data).w, D6           ; $FFFFF602
000043DE 7A00                                       moveq   #$00, D5
000043E0 6100                                       bsr.s   Offset_0x0043EE
000043E2 524B                                       addq.w  #$01, A3
000043E4 43F8 B04A                                  lea     (Obj_Player_Two).w, A1                       ; $FFFFB04A
000043E8 1C38 F66A                                  move.b  (Control_Ports_Logical_Data_2).w, D6         ; $FFFFF66A
000043EC 7A01                                       moveq   #$01, D5
000043EE                            Offset_0x0043EE:
000043EE 45F9 0000 0000                             lea     (Hz_Wind_Tunnels_Data), A2             ; Offset_0x0044A8
000043F4 341A                                       move.w  (A2)+, D2
000043F6                            Offset_0x0043F6:
000043F6 3029 0010                                  move.w  Obj_X(A1), D0                                    ; $0010
000043FA B052                                       cmp.w   (A2), D0
000043FC 6500 0000                                  bcs     Offset_0x004492
00004400 B06A 0004                                  cmp.w   Obj_Flags(A2), D0                                ; $0004
00004404 6400 0000                                  bcc     Offset_0x004492
00004408 3229 0014                                  move.w  Obj_Y(A1), D1                                    ; $0014
0000440C B26A 0002                                  cmp.w   $0002(A2), D1
00004410 6500 0000                                  bcs     Offset_0x004492
00004414 B26A 0006                                  cmp.w   Obj_Height(A2), D1                               ; $0006
00004418 6400                                       bcc.s   Offset_0x004492
0000441A 0C29 0004 0005                             cmpi.b  #$04, Obj_Routine(A1)                            ; $0005
00004420 6400 0000                                  bcc     Offset_0x0044A4
00004424 0B38 F7C7                                  btst    D5, (Wind_Tunnels_Flag).w                    ; $FFFFF7C7
00004428 6600                                       bne.s   Offset_0x00447A
0000442A 4A29 002E                                  tst.b   Obj_Player_Control(A1)                           ; $002E
0000442E 6600                                       bne.s   Offset_0x0044A4
00004430 16BC 0001                                  move.b  #$01, (A3)
00004434 302A 0008                                  move.w  Obj_Priority(A2), D0                             ; $0008
00004438 3340 0018                                  move.w  D0, Obj_Speed_X(A1)                              ; $0018
0000443C 48C0                                       ext.l   D0
0000443E E188                                       lsl.l   #$08, D0
00004440 D1A9 0010                                  add.l   D0, Obj_X(A1)                                    ; $0010
00004444 322A 000A                                  move.w  Obj_Art_VRAM(A2), D1                             ; $000A
00004448 3341 001A                                  move.w  D1, Obj_Speed_Y(A1)                              ; $001A
0000444C 48C1                                       ext.l   D1
0000444E E189                                       lsl.l   #$08, D1
00004450 D3A9 0014                                  add.l   D1, Obj_Y(A1)                                    ; $0014
00004454 137C 000F 0020                             move.b  #$0F, Obj_Ani_Number(A1)                         ; $0020
0000445A 08E9 0001 002A                             bset    #$01, Obj_Status(A1)                             ; $002A
00004460 4A2A 000C                                  tst.b   Obj_Map(A2)                                      ; $000C
00004464 6600                                       bne.s   Offset_0x00447C
00004466 0806 0000                                  btst    #$00, D6
0000446A 6700                                       beq.s   Offset_0x004470
0000446C 5369 0014                                  subq.w  #$01, Obj_Y(A1)                                  ; $0014
00004470                            Offset_0x004470:
00004470 0806 0001                                  btst    #$01, D6
00004474 6700                                       beq.s   Offset_0x00447A
00004476 5269 0014                                  addq.w  #$01, Obj_Y(A1)                                  ; $0014
0000447A                            Offset_0x00447A:
0000447A 4E75                                       rts
0000447C                            Offset_0x00447C:
0000447C 0806 0002                                  btst    #$02, D6
00004480 6700                                       beq.s   Offset_0x004486
00004482 5369 0010                                  subq.w  #$01, Obj_X(A1)                                  ; $0010
00004486                            Offset_0x004486:
00004486 0806 0003                                  btst    #$03, D6
0000448A 6700                                       beq.s   Offset_0x004490
0000448C 5269 0010                                  addq.w  #$01, Obj_X(A1)                                  ; $0010
00004490                            Offset_0x004490:
00004490 4E75                                       rts
00004492                            Offset_0x004492:
00004492 D4FC 000E                                  adda.w  #$000E, A2
00004496 51CA FF5E                                  dbra    D2, Offset_0x0043F6
0000449A 4A13                                       tst.b   (A3)
0000449C 6700                                       beq.s   Offset_0x0044A6
0000449E 137C 001A 0020                             move.b  #$1A, Obj_Ani_Number(A1)                         ; $0020
000044A4                            Offset_0x0044A4:
000044A4 4213                                       clr.b   (A3)
000044A6                            Offset_0x0044A6:
000044A6 4E75                                       rts 
000044A8                            ;------------------------------------------------------------------------------- 
000044A8                            Hz_Wind_Tunnels_Data:                                          ; Offset_0x0044A8
000044A8 000E                                       dc.w    $000E
000044AA 0380 0580 05A0 05C0 03F0+                  dc.w    $0380, $0580, $05A0, $05C0, $03F0, $FFE0, $0000
000044B8 05A0 0560 0A80 05C0 03F0+                  dc.w    $05A0, $0560, $0A80, $05C0, $03F0, $FFF0, $0000
000044C6 1400 0A80 15A0 0AC0 0400+                  dc.w    $1400, $0A80, $15A0, $0AC0, $0400, $0000, $0000
000044D4 15A0 0A40 1960 0AC0 0400+                  dc.w    $15A0, $0A40, $1960, $0AC0, $0400, $FFC0, $0000
000044E2 1960 0A10 19D0 0A80 0300+                  dc.w    $1960, $0A10, $19D0, $0A80, $0300, $FD80, $0100
000044F0 1990 0978 19F0 0A10 0080+                  dc.w    $1990, $0978, $19F0, $0A10, $0080, $FC00, $0100
000044FE 1990 08F8 19F0 0978 FEC0+                  dc.w    $1990, $08F8, $19F0, $0978, $FEC0, $FC00, $0100
0000450C 1990 0878 19F0 08F8 0140+                  dc.w    $1990, $0878, $19F0, $08F8, $0140, $FC00, $0100
0000451A 1990 07F0 19F0 0878 FEC0+                  dc.w    $1990, $07F0, $19F0, $0878, $FEC0, $FC00, $0100
00004528 1990 0780 19E0 07F0 0000+                  dc.w    $1990, $0780, $19E0, $07F0, $0000, $FC00, $0100
00004536 2B00 0800 2C20 0840 0400+                  dc.w    $2B00, $0800, $2C20, $0840, $0400, $0000, $0000
00004544 2C20 07C0 2EE0 0840 0400+                  dc.w    $2C20, $07C0, $2EE0, $0840, $0400, $FFC0, $0000
00004552 2EE0 0790 2F50 0800 0300+                  dc.w    $2EE0, $0790, $2F50, $0800, $0300, $FD00, $0100
00004560 2F00 0700 2F70 0790 0100+                  dc.w    $2F00, $0700, $2F70, $0790, $0100, $FC00, $0100
0000456E 2F30 0680 2F70 0700 0000+                  dc.w    $2F30, $0680, $2F70, $0700, $0000, $FC00, $0100   
0000457C                            ;-------------------------------------------------------------------------------
0000457C                            Level_Slides:                                                  ; Offset_0x00457C
0000457C 0C78 0101 FE10                             cmpi.w  #Hz_Act_2, (Level_Id).w               ; $0101, $FFFFFE10
00004582 6700                                       beq.s   Hz2_Water_Slides                       ; Offset_0x00458E
00004584 0C78 0500 FE10                             cmpi.w  #Iz_Act_1, (Level_Id).w               ; $0500, $FFFFFE10
0000458A 6700                                       beq.s   Iz1_Slides                             ; Offset_0x0045F6
0000458C 4E75                                       rts     
0000458E                            ;-------------------------------------------------------------------------------
0000458E                            Hz2_Water_Slides:                                              ; Offset_0x00458E
0000458E 43F8 B000                                  lea     (Obj_Player_One).w, A1                       ; $FFFFB000
00004592 1438 F602                                  move.b  (Control_Ports_Logical_Data).w, D2           ; $FFFFF602
00004596 6100                                       bsr.s   Offset_0x0045A0
00004598 43F8 B04A                                  lea     (Obj_Player_Two).w, A1                       ; $FFFFB04A
0000459C 1438 F66A                                  move.b  (Control_Ports_Logical_Data_2).w, D2         ; $FFFFF66A
000045A0                            Offset_0x0045A0:
000045A0 0829 0001 002A                             btst    #$01, Obj_Status(A1)                             ; $002A
000045A6 6600                                       bne.s   Offset_0x0045DC
000045A8 0C29 000C 0046                             cmpi.b  #$0C, Obj_Player_Top_Solid(A1)                   ; $0046
000045AE 6700                                       beq.s   Offset_0x0045DC
000045B0 45F8 8000                                  lea     (Fg_Mem_Start_Address).w, A2                 ; $FFFF8000
000045B4 3029 0014                                  move.w  Obj_Y(A1), D0                                    ; $0014
000045B8 EA48                                       lsr.w   #$05, D0
000045BA C078 EEAE                                  and.w   (Level_Layout_Wrap_Row).w, D0                ; $FFFFEEAE
000045BE 3032 0008                                  move.w  $08(A2, D0), D0
000045C2 3229 0010                                  move.w  Obj_X(A1), D1                                    ; $0010
000045C6 EE49                                       lsr.w   #$07, D1
000045C8 D041                                       add.w   D1, D0
000045CA 3440                                       move.w  D0, A2
000045CC 1012                                       move.b  (A2), D0
000045CE 45FA 0000                                  lea     (Hz2_Slide_Action_Data+$0A)(PC), A2    ; Offset_0x004724
000045D2 7209                                       moveq   #$09, D1
000045D4                            Offset_0x0045D4:
000045D4 B022                                       cmp.b   -(A2), D0
000045D6 57C9 FFFC                                  dbeq    D1, Offset_0x0045D4
000045DA 6700                                       beq.s   Offset_0x0045F0
000045DC                            Offset_0x0045DC:
000045DC 4A29 002F                                  tst.b   Obj_Player_Status(A1)                            ; $002F
000045E0 6A00                                       bpl.s   Offset_0x0045EE
000045E2 337C 0005 0032                             move.w  #$0005, Obj_P_Horiz_Ctrl_Lock(A1)                ; $0032
000045E8 0229 007F 002F                             andi.b  #$7F, Obj_Player_Status(A1)                      ; $002F
000045EE                            Offset_0x0045EE:
000045EE 4E75                                       rts
000045F0                            Offset_0x0045F0:
000045F0 70F8                                       moveq   #-$08, D0
000045F2 6000 0000                                  bra     Offset_0x004662
000045F6                            ;-------------------------------------------------------------------------------                
000045F6                            Iz1_Slides:                                                    ; Offset_0x0045F6
000045F6 43F8 B000                                  lea     (Obj_Player_One).w, A1                       ; $FFFFB000
000045FA 1438 F602                                  move.b  (Control_Ports_Logical_Data).w, D2           ; $FFFFF602
000045FE 6100                                       bsr.s   Offset_0x004608
00004600 43F8 B04A                                  lea     (Obj_Player_Two).w, A1                       ; $FFFFB04A
00004604 1438 F66A                                  move.b  (Control_Ports_Logical_Data_2).w, D2         ; $FFFFF66A
00004608                            Offset_0x004608:
00004608 0829 0001 002A                             btst    #$01, Obj_Status(A1)                             ; $002A
0000460E 6600                                       bne.s   Offset_0x004644
00004610 0829 0003 002A                             btst    #$03, Obj_Status(A1)                             ; $002A
00004616 6600                                       bne.s   Offset_0x004644
00004618 45F8 8000                                  lea     (Fg_Mem_Start_Address).w, A2                 ; $FFFF8000
0000461C 3029 0014                                  move.w  Obj_Y(A1), D0                                    ; $0014
00004620 EA48                                       lsr.w   #$05, D0
00004622 C078 EEAE                                  and.w   (Level_Layout_Wrap_Row).w, D0                ; $FFFFEEAE
00004626 3032 0008                                  move.w  $08(A2, D0), D0
0000462A 3229 0010                                  move.w  Obj_X(A1), D1                                    ; $0010
0000462E EE49                                       lsr.w   #$07, D1
00004630 D041                                       add.w   D1, D0
00004632 3440                                       move.w  D0, A2
00004634 1012                                       move.b  (A2), D0
00004636 45FA 0000                                  lea     (Iz_Slide_Tile_Data+$0A)(PC), A2       ; Offset_0x00472E    
0000463A 7209                                       moveq   #$09, D1
0000463C                            Offset_0x00463C:
0000463C B022                                       cmp.b   -(A2), D0
0000463E 57C9 FFFC                                  dbeq    D1, Offset_0x00463C
00004642 6700                                       beq.s   Offset_0x004658
00004644                            Offset_0x004644:
00004644 4A29 002F                                  tst.b   Obj_Player_Status(A1)                            ; $002F
00004648 6A00                                       bpl.s   Offset_0x004656
0000464A 337C 0005 0032                             move.w  #$0005, Obj_P_Horiz_Ctrl_Lock(A1)                ; $0032
00004650 0229 007F 002F                             andi.b  #$7F, Obj_Player_Status(A1)                      ; $002F
00004656                            Offset_0x004656:
00004656 4E75                                       rts
00004658                            Offset_0x004658:
00004658 45F9 0000 0000                             lea     (Iz_Slide_Action_Data), A2             ; Offset_0x004710
0000465E 1032 1000                                  move.b  $00(A2, D1), D0
00004662                            Offset_0x004662:
00004662 6700                                       beq.s   Offset_0x0046A0
00004664 1229 001C                                  move.b  Obj_Inertia(A1), D1                              ; $001C
00004668 4A00                                       tst.b   D0
0000466A 6A00                                       bpl.s   Offset_0x004678
0000466C B200                                       cmp.b   D0, D1
0000466E 6F00                                       ble.s   Offset_0x004682
00004670 0469 0040 001C                             subi.w  #$0040, Obj_Inertia(A1)                          ; $001C
00004676 6000                                       bra.s   Offset_0x004682
00004678                            Offset_0x004678:
00004678 B200                                       cmp.b   D0, D1
0000467A 6C00                                       bge.s   Offset_0x004682
0000467C 0669 0040 001C                             addi.w  #$0040, Obj_Inertia(A1)                          ; $001C
00004682                            Offset_0x004682:
00004682 08A9 0000 002A                             bclr    #$00, Obj_Status(A1)                             ; $002A
00004688 4A01                                       tst.b   D1
0000468A 6A00                                       bpl.s   Offset_0x004692
0000468C 08E9 0000 002A                             bset    #$00, Obj_Status(A1)                             ; $002A
00004692                            Offset_0x004692:
00004692 137C 001B 0020                             move.b  #$1B, Obj_Ani_Number(A1)                         ; $0020
00004698 0029 0080 002F                             ori.b   #$80, Obj_Player_Status(A1)                      ; $002F
0000469E 4E75                                       rts
000046A0                            Offset_0x0046A0:
000046A0 323C 0004                                  move.w  #$0004, D1
000046A4 3029 001C                                  move.w  Obj_Inertia(A1), D0                              ; $001C
000046A8 0802 0002                                  btst    #$02, D2
000046AC 6700                                       beq.s   Offset_0x0046C2
000046AE 137C 0000 0020                             move.b  #$00, Obj_Ani_Number(A1)                         ; $0020
000046B4 08E9 0000 002A                             bset    #$00, Obj_Status(A1)                             ; $002A
000046BA 9041                                       sub.w   D1, D0
000046BC 4A40                                       tst.w   D0
000046BE 6A00                                       bpl.s   Offset_0x0046C2
000046C0 9041                                       sub.w   D1, D0
000046C2                            Offset_0x0046C2:
000046C2 0802 0003                                  btst    #$03, D2
000046C6 6700                                       beq.s   Offset_0x0046DC
000046C8 137C 0000 0020                             move.b  #$00, Obj_Ani_Number(A1)                         ; $0020
000046CE 08A9 0000 002A                             bclr    #$00, Obj_Status(A1)                             ; $002A
000046D4 D041                                       add.w   D1, D0
000046D6 4A40                                       tst.w   D0
000046D8 6B00                                       bmi.s   Offset_0x0046DC
000046DA D041                                       add.w   D1, D0
000046DC                            Offset_0x0046DC:
000046DC 323C 0004                                  move.w  #$0004, D1
000046E0 4A40                                       tst.w   D0
000046E2 6700                                       beq.s   Offset_0x004704
000046E4 6B00                                       bmi.s   Offset_0x0046F6
000046E6 9041                                       sub.w   D1, D0
000046E8 6200                                       bhi.s   Offset_0x0046F4
000046EA 303C 0000                                  move.w  #$0000, D0
000046EE 137C 0005 0020                             move.b  #$05, Obj_Ani_Number(A1)                         ; $0020
000046F4                            Offset_0x0046F4:
000046F4 6000                                       bra.s   Offset_0x004704
000046F6                            Offset_0x0046F6:
000046F6 D041                                       add.w   D1, D0
000046F8 6200                                       bhi.s   Offset_0x004704
000046FA 303C 0000                                  move.w  #$0000, D0
000046FE 137C 0005 0020                             move.b  #$05, Obj_Ani_Number(A1)                         ; $0020
00004704                            Offset_0x004704:
00004704 3340 001C                                  move.w  D0, Obj_Inertia(A1)                              ; $001C
00004708 0029 0080 002F                             ori.b   #$80, Obj_Player_Status(A1)                      ; $002F
0000470E 4E75                                       rts   
00004710                            ;-------------------------------------------------------------------------------
00004710                            Iz_Slide_Action_Data:                                          ; Offset_0x004710
00004710 F8F8 0808 F4F4 F40C                        dc.b    $F8, $F8, $08, $08, $F4, $F4, $F4, $0C
00004718 0C0C                                       dc.b    $0C, $0C
0000471A                            Hz2_Slide_Action_Data:                                         ; Offset_0x00471A                
0000471A 1B71 8081 888E 9B9C                        dc.b    $1B, $71, $80, $81, $88, $8E, $9B, $9C
00004722 A1A2                                       dc.b    $A1, $A2   
00004724                            Iz_Slide_Tile_Data:                                            ; Offset_0x004724
00004724 30C0 35BF 272D 4622                        dc.b    $30, $C0, $35, $BF, $27, $2D, $46, $22
0000472C 2A2E                                       dc.b    $2A, $2E                                                                                                               
0000472E                            ;===============================================================================
0000472E                            ; Modo de jogo ou demonstra__o das fases 
0000472E                            ; <<<-
0000472E                            ;===============================================================================
0000472E                                            
0000472E                            AIz_1_Water_Transistion:                                       ; Offset_0x00472E
0000472E 000F                                       dc.w    $000F
00004730 0002 0068 0062 0042 0048+                  dc.w    $0002, $0068, $0062, $0042, $0048, $004E, $0054, $0008
00004740 000E 0014 001A 0034 0022+                  dc.w    $000E, $0014, $001A, $0034, $0022, $003A, $002E, $0028
00004750                            AIz_2_Water_Transistion:                                       ; Offset_0x004750
00004750 0012                                       dc.w    $0012
00004752 006E 0068 0002 0048 0042+                  dc.w    $006E, $0068, $0002, $0048, $0042, $004E, $005A, $0054
00004762 0062 0074 0008 000E 0014+                  dc.w    $0062, $0074, $0008, $000E, $0014, $001A, $0034, $0022
00004772 003A 002E 0028                             dc.w    $003A, $002E, $0028
00004778                            Hz_Water_Transistion:                                          ; Offset_0x004778
00004778 0013                                       dc.w    $0013
0000477A 0002 0074 0062 0068 006E+                  dc.w    $0002, $0074, $0062, $0068, $006E, $0042, $0048, $007A
0000478A 005A 0054 0008 000E 0014+                  dc.w    $005A, $0054, $0008, $000E, $0014, $001A, $002E, $0034
0000479A 0028 003A 0022 004E                        dc.w    $0028, $003A, $0022, $004E
000047A2                            LBz_2_Water_Transistion:                                       ; Offset_0x0047A2
000047A2 0013                                       dc.w    $0013  
000047A4 0002 006E 0068 007A 0062+                  dc.w    $0002, $006E, $0068, $007A, $0062, $0074, $0042, $0048
000047B4 005A 0054 0008 000E 0014+                  dc.w    $005A, $0054, $0008, $000E, $0014, $001A, $002E, $0034
000047C4 0028 003A 0022 004E                        dc.w    $0028, $003A, $0022, $004E
000047CC                            ; Offset_0x0047CC:                
000047CC 0013                                       dc.w    $0013
000047CE 0002 0008 000E 0014 001A+                  dc.w    $0002, $0008, $000E, $0014, $001A, $0042, $0048, $004E
000047DE 0054 005A 0062 0068 006E+                  dc.w    $0054, $005A, $0062, $0068, $006E, $0074, $007A, $0022
000047EE 0028 002E 0034 003A                        dc.w    $0028, $002E, $0034, $003A                          
000047F6                            ;===============================================================================
000047F6                            ; Rotina de controle autom_tico do jogador usado no modo de demonstra__o
000047F6                            ; ->>>
000047F6                            ;===============================================================================               
000047F6                            Init_Demo_Control:                                             ; Offset_0x0047F6
000047F6 4A78 FFF0                                  tst.w   (Auto_Control_Player_Flag).w                 ; $FFFFFFF0
000047FA 6600 0000                                  bne     Run_Demo_Mode                          ; Offset_0x004884
000047FE 4E75                                       rts
00004800                            ;-------------------------------------------------------------------------------
00004800                            ; Offset_0x004800: ; Sonic 2 Left over
00004800 43F9 0000 0000                             lea     (Demo_Index), A1                       ; Offset_0x00491E
00004806 7000                                       moveq   #$00, D0
00004808 1038 FE10                                  move.b  (Level_Id).w, D0                             ; $FFFFFE10
0000480C E548                                       lsl.w   #$02, D0
0000480E 2271 0000                                  move.l  $00(A1, D0), A1
00004812 3038 F790                                  move.w  (Demo_Button_Index).w, D0                    ; $FFFFF790
00004816 D2C0                                       adda.w  D0, A1
00004818 1038 F604                                  move.b  (Control_Ports_Buffer_Data).w, D0            ; $FFFFF604
0000481C B011                                       cmp.b   (A1), D0
0000481E 6600                                       bne.s   Offset_0x00482E
00004820 5229 0001                                  addq.b  #$01, $0001(A1)
00004824 0C29 00FF 0001                             cmpi.b  #$FF, $0001(A1)
0000482A 6700                                       beq.s   Offset_0x00482E
0000482C 6000                                       bra.s   Offset_0x004842
0000482E                            Offset_0x00482E:
0000482E 1340 0002                                  move.b  D0, $0002(A1)
00004832 137C 0000 0003                             move.b  #$00, $0003(A1)
00004838 5478 F790                                  addq.w  #$02, (Demo_Button_Index).w                  ; $FFFFF790
0000483C 0278 03FF F790                             andi.w  #$03FF, (Demo_Button_Index).w                ; $FFFFF790
00004842                            Offset_0x004842:
00004842 4E75                                       rts
00004844                            ;-------------------------------------------------------------------------------  
00004844                            ; Offset_0x004844: ; Sonic 2 Left over
00004844 0C38 0000 FE10                             cmpi.b  #S2_EHz_Id, (Level_Id).w                ; $00, $FFFFFE10
0000484A 6600                                       bne.s   Offset_0x004882
0000484C 43F9 00FE C000                             lea     ((M68K_Dev_RAM_Start+$C000)&$00FFFFFF), A1           ; $00FEC000
00004852 3038 F732                                  move.w  (Demo_Button_Index_2P).w, D0                 ; $FFFFF732
00004856 D2C0                                       adda.w  D0, A1
00004858 1038 F606                                  move.b  (Control_Ports_Buffer_Data+$02).w, D0        ; $FFFFF606
0000485C B011                                       cmp.b   (A1), D0
0000485E 6600                                       bne.s   Offset_0x00486E
00004860 5229 0001                                  addq.b  #$01, $0001(A1)
00004864 0C29 00FF 0001                             cmpi.b  #$FF, $0001(A1)
0000486A 6700                                       beq.s   Offset_0x00486E
0000486C 6000                                       bra.s   Offset_0x004882
0000486E                            Offset_0x00486E:
0000486E 1340 0002                                  move.b  D0, $0002(A1)
00004872 137C 0000 0003                             move.b  #$00, $0003(A1)
00004878 5478 F732                                  addq.w  #$02, (Demo_Button_Index_2P).w               ; $FFFFF732
0000487C 0278 03FF F732                             andi.w  #$03FF, (Demo_Button_Index_2P).w             ; $FFFFF732
00004882                            Offset_0x004882:
00004882 4E75                                       rts
00004884                            ;-------------------------------------------------------------------------------               
00004884                            Run_Demo_Mode:                                                 ; Offset_0x004884
00004884 1038 F605                                  move.b  (Control_Ports_Buffer_Data+$01).w, D0        ; $FFFFF605
00004888 8038 F607                                  or.b    (Control_Ports_Buffer_Data+$03).w, D0        ; $FFFFF607
0000488C 0200 0080                                  andi.b  #$80, D0
00004890 6700                                       beq.s   Offset_0x00489E
00004892 4A78 FFF0                                  tst.w   (Auto_Control_Player_Flag).w                 ; $FFFFFFF0
00004896 6B00                                       bmi.s   Offset_0x00489E
00004898 11FC 0004 F600                             move.b  #gm_TitleScreen, (Game_Mode).w          ; $04, $FFFFF600
0000489E                            Offset_0x00489E:
0000489E 43F9 0000 0000                             lea     (Demo_Index), A1                       ; Offset_0x00491E
000048A4 7000                                       moveq   #$00, D0
000048A6 1038 FE10                                  move.b  (Level_Id).w, D0                             ; $FFFFFE10
000048AA E548                                       lsl.w   #$02, D0
000048AC 2271 0000                                  move.l  $00(A1, D0), A1
000048B0 3038 F790                                  move.w  (Demo_Button_Index).w, D0                    ; $FFFFF790
000048B4 D2C0                                       adda.w  D0, A1
000048B6 1011                                       move.b  (A1), D0
000048B8 0200 007F                                  andi.b  #$7F, D0
000048BC 41F8 F604                                  lea     (Control_Ports_Buffer_Data).w, A0            ; $FFFFF604
000048C0 1200                                       move.b  D0, D1
000048C2 7400                                       moveq   #$00, D2
000048C4 B500                                       eor.b   D2, D0
000048C6 10C1                                       move.b  D1, (A0)+
000048C8 C001                                       and.b   D1, D0
000048CA 10C0                                       move.b  D0, (A0)+
000048CC 5338 F792                                  subq.b  #$01, (Demo_Button_Press_Counter).w          ; $FFFFF792
000048D0 6400                                       bcc.s   Offset_0x0048DC
000048D2 11E9 0003 F792                             move.b  $0003(A1), (Demo_Button_Press_Counter).w     ; $FFFFF792
000048D8 5478 F790                                  addq.w  #$02, (Demo_Button_Index).w                  ; $FFFFF790
000048DC                            Offset_0x0048DC:
000048DC 4E75                                       rts    
000048DE                            ;-------------------------------------------------------------------------------
000048DE                            ; Offset_0x0048DE: ; Sonic 2 Left Over
000048DE 0C38 0000 FE10                             cmpi.b  #S2_EHz_Id, (Level_Id).w                ; $00, $FFFFFE10
000048E4 6600                                       bne.s   Offset_0x004916
000048E6 43F9 0000 0000                             lea     (Demo_Angel_Island), A1                ; Offset_0x004BEA
000048EC 3038 F732                                  move.w  (Demo_Button_Index_2P).w, D0                 ; $FFFFF732
000048F0 D2C0                                       adda.w  D0, A1
000048F2 1011                                       move.b  (A1), D0
000048F4 41F8 F606                                  lea     (Control_Ports_Buffer_Data+$02).w, A0        ; $FFFFF606
000048F8 1200                                       move.b  D0, D1
000048FA 7400                                       moveq   #$00, D2
000048FC B500                                       eor.b   D2, D0
000048FE 10C1                                       move.b  D1, (A0)+
00004900 C001                                       and.b   D1, D0
00004902 10C0                                       move.b  D0, (A0)+
00004904 5338 F734                                  subq.b  #$01, (Demo_Button_Press_Counter_2P).w       ; $FFFFF734
00004908 6400                                       bcc.s   Offset_0x004914
0000490A 11E9 0003 F734                             move.b  $0003(A1), (Demo_Button_Press_Counter_2P).w  ; $FFFFF734
00004910 5478 F732                                  addq.w  #$02, (Demo_Button_Index_2P).w               ; $FFFFF732
00004914                            Offset_0x004914:
00004914 4E75                                       rts
00004916                            Offset_0x004916:
00004916 31FC 0000 F606                             move.w  #$0000, (Control_Ports_Buffer_Data+$02).w    ; $FFFFF606
0000491C 4E75                                       rts                            
0000491E                            ;===============================================================================
0000491E                            ; Rotina de controle autom_tico do jogador usado no modo de demonstra__o
0000491E                            ; <<<-
0000491E                            ;===============================================================================                  
0000491E                            
0000491E                            Demo_Index:                                                    ; Offset_0x00491E
0000491E 0000 0000                                  dc.l    Demo_Angel_Island                      ; Offset_0x004BEA
00004922 0000 0000                                  dc.l    Demo_Angel_Island                      ; Offset_0x004BEA
00004926 0000 0000                                  dc.l    Demo_Angel_Island                      ; Offset_0x004BEA
0000492A 0000 0000                                  dc.l    Demo_Angel_Island                      ; Offset_0x004BEA
0000492E 0000 0000                                  dc.l    Demo_Angel_Island                      ; Offset_0x004BEA
00004932 0000 0000                                  dc.l    Demo_Angel_Island                      ; Offset_0x004BEA
00004936 0000 0000                                  dc.l    Demo_Angel_Island                      ; Offset_0x004BEA
0000493A 0000 0000                                  dc.l    Demo_Angel_Island                      ; Offset_0x004BEA
0000493E 0000 0000                                  dc.l    Demo_Angel_Island                      ; Offset_0x004BEA
00004942 0000 0000                                  dc.l    Demo_Angel_Island                      ; Offset_0x004BEA
00004946 0000 0000                                  dc.l    Demo_Angel_Island                      ; Offset_0x004BEA
0000494A 0000 0000                                  dc.l    Demo_Angel_Island                      ; Offset_0x004BEA
0000494E 0000 0000                                  dc.l    Demo_Angel_Island                      ; Offset_0x004BEA
00004952 0000 0000                                  dc.l    Demo_Angel_Island                      ; Offset_0x004BEA
00004956 0000 0000                                  dc.l    Demo_Angel_Island                      ; Offset_0x004BEA
0000495A 0000 0000                                  dc.l    Demo_Angel_Island                      ; Offset_0x004BEA
0000495E 0000 0000                                  dc.l    Demo_Angel_Island                      ; Offset_0x004BEA
00004962 0000 0000                                  dc.l    Demo_Angel_Island                      ; Offset_0x004BEA
00004966 0000 0000                                  dc.l    Demo_Angel_Island                      ; Offset_0x004BEA
0000496A 0000 0000                                  dc.l    Demo_Angel_Island                      ; Offset_0x004BEA
0000496E 0000 0000                                  dc.l    Demo_Angel_Island                      ; Offset_0x004BEA
00004972 0000 0000                                  dc.l    Demo_Angel_Island                      ; Offset_0x004BEA
00004976 0000 0000                                  dc.l    Demo_Angel_Island                      ; Offset_0x004BEA
0000497A 0000 0000                                  dc.l    Demo_Angel_Island                      ; Offset_0x004BEA
0000497E 0000 0000                                  dc.l    Demo_Angel_Island                      ; Offset_0x004BEA 
00004982                            ;-------------------------------------------------------------------------------
00004982                            Demo_End_Index: ; Left over do Sonic 1                         ; Offset_0x004982
00004982 008B 0837 0042 085C 006A+                  dc.w    $008B, $0837, $0042, $085C, $006A, $085F, $002F, $082C
00004992 0021 0803 2830 0808 002E+                  dc.w    $0021, $0803, $2830, $0808, $002E, $0815, $000F, $0846
000049A2 001A 08FF 08CA 0000 0000+                  dc.w    $001A, $08FF, $08CA, $0000, $0000, $0000, $0000, $0000                                        
000049B2                            ;===============================================================================
000049B2                            ; Rotina para carregar os indexadores das colis_es dos blocos 16x16
000049B2                            ; ->>>
000049B2                            ;===============================================================================
000049B2                            Load_Collision_Index:                                          ; Offset_0x0049B2
000049B2 7000                                       moveq   #$00, D0
000049B4 3038 FE10                                  move.w  (Level_Id).w, D0                             ; $FFFFFE10
000049B8 E218                                       ror.b   #$01, D0
000049BA EA48                                       lsr.w   #$05, D0
000049BC 43F9 0000 0000                             lea     (Collision_Index), A1                  ; Offset_0x1CD240
000049C2 D3C0                                       adda.l  D0, A1
000049C4 2011                                       move.l  (A1), D0
000049C6 21C0 F7B4                                  move.l  D0, (Primary_Collision_Ptr).w                ; $FFFFF7B4
000049CA 0680 0000 0600                             addi.l  #$00000600, D0
000049D0 21C0 F7B8                                  move.l  D0, (Secondary_Collision_Ptr).w              ; $FFFFF7B8
000049D4 21FC FFFF F7B4 F796                        move.l  #Primary_Collision_Ptr, (Current_Collision_Ptr).w  ; $FFFFF7B4, $FFFFF796
000049DC 4E75                                       rts
000049DE                            ;===============================================================================
000049DE                            ; Rotina para carregar os indexadores das colis_es dos blocos 16x16
000049DE                            ; <<<-
000049DE                            ;===============================================================================
000049DE                            
000049DE                            ;===============================================================================
000049DE                            ; Rotina Oscillate_Num_Init
000049DE                            ; ->>>
000049DE                            ;===============================================================================
000049DE                            Oscillate_Num_Init:                                            ; Offset_0x0049DE
000049DE 43F8 FE5E                                  lea     (Oscillate_Data_Buffer).w, A1                ; $FFFFFE5E
000049E2 45F9 0000 0000                             lea     (Oscillate_Data), A2                   ; Offset_0x0049F2
000049E8 7220                                       moveq   #$20, D1
000049EA                            Offset_0x0049EA:
000049EA 32DA                                       move.w  (A2)+, (A1)+
000049EC 51C9 FFFC                                  dbra    D1, Offset_0x0049EA
000049F0 4E75                                       rts
000049F2                            ;-------------------------------------------------------------------------------                
000049F2                            Oscillate_Data:                                                ; Offset_0x0049F2  
000049F2 007D 0080 0000 0080 0000+                  dc.w    $007D, $0080, $0000, $0080, $0000, $0080, $0000, $0080
00004A02 0000 0080 0000 0080 0000+                  dc.w    $0000, $0080, $0000, $0080, $0000, $0080, $0000, $0080
00004A12 0000 0080 0000 3848 00EE+                  dc.w    $0000, $0080, $0000, $3848, $00EE, $2080, $00B4, $3080
00004A22 010E 5080 01C2 7080 0276+                  dc.w    $010E, $5080, $01C2, $7080, $0276, $0080, $0000, $4000
00004A32 00FE                                       dc.w    $00FE              
00004A34                            ;===============================================================================
00004A34                            ; Rotina Oscillate_Num_Init
00004A34                            ; <<<-
00004A34                            ;===============================================================================
00004A34                            
00004A34                            ;===============================================================================
00004A34                            ; Rotina Oscillate_Num_Do
00004A34                            ; ->>>
00004A34                            ;===============================================================================
00004A34                            Oscillate_Num_Do:                                             ;  Offset_0x004A34
00004A34 4A78 FFD8                                  tst.w   (Two_Player_Flag).w                          ; $FFFFFFD8
00004A38 6600                                       bne.s   Offset_0x004A42
00004A3A 0C38 0006 B005                             cmpi.b  #$06, (Obj_Player_One+Obj_Routine).w         ; $FFFFB005
00004A40 6400                                       bcc.s   Offset_0x004A88
00004A42                            Offset_0x004A42:
00004A42 43F8 FE5E                                  lea     (Oscillate_Data_Buffer).w, A1                ; $FFFFFE5E
00004A46 45F9 0000 0000                             lea     (Oscillate_Data2), A2                  ; Offset_0x004A8A
00004A4C 3619                                       move.w  (A1)+, D3
00004A4E 720F                                       moveq   #$0F, D1
00004A50                            Offset_0x004A50:
00004A50 341A                                       move.w  (A2)+, D2
00004A52 381A                                       move.w  (A2)+, D4
00004A54 0303                                       btst    D1, D3
00004A56 6600                                       bne.s   Offset_0x004A6C
00004A58 3029 0002                                  move.w  $0002(A1), D0
00004A5C D042                                       add.w   D2, D0
00004A5E 3340 0002                                  move.w  D0, $0002(A1)
00004A62 D151                                       add.w   D0, (A1)
00004A64 B811                                       cmp.b   (A1), D4
00004A66 6200                                       bhi.s   Offset_0x004A7E
00004A68 03C3                                       bset    D1, D3
00004A6A 6000                                       bra.s   Offset_0x004A7E
00004A6C                            Offset_0x004A6C:
00004A6C 3029 0002                                  move.w  $0002(A1), D0
00004A70 9042                                       sub.w   D2, D0
00004A72 3340 0002                                  move.w  D0, $0002(A1)
00004A76 D151                                       add.w   D0, (A1)
00004A78 B811                                       cmp.b   (A1), D4
00004A7A 6300                                       bls.s   Offset_0x004A7E
00004A7C 0383                                       bclr    D1, D3
00004A7E                            Offset_0x004A7E:
00004A7E 5849                                       addq.w  #$04, A1
00004A80 51C9 FFCE                                  dbra    D1, Offset_0x004A50
00004A84 31C3 FE5E                                  move.w  D3, (Oscillate_Data_Buffer).w                ; $FFFFFE5E
00004A88                            Offset_0x004A88:
00004A88 4E75                                       rts
00004A8A                            ;-------------------------------------------------------------------------------
00004A8A                            Oscillate_Data2:                                               ; Offset_0x004A8A
00004A8A 0002 0010 0002 0018 0002+                  dc.w    $0002, $0010, $0002, $0018, $0002, $0020, $0002, $0030
00004A9A 0004 0020 0008 0008 0008+                  dc.w    $0004, $0020, $0008, $0008, $0008, $0040, $0004, $0040
00004AAA 0002 0038 0002 0038 0002+                  dc.w    $0002, $0038, $0002, $0038, $0002, $0020, $0003, $0030
00004ABA 0005 0050 0007 0070 0002+                  dc.w    $0005, $0050, $0007, $0070, $0002, $0040, $0002, $0040                
00004ACA                            ;===============================================================================
00004ACA                            ; Rotina Oscillate_Num_Do
00004ACA                            ; <<<-
00004ACA                            ;===============================================================================
00004ACA                            
00004ACA                            ;===============================================================================
00004ACA                            ; Rotina para fazer os an_is e outros objetos girarem em torno de si
00004ACA                            ; ->>>
00004ACA                            ;===============================================================================
00004ACA                            Change_Object_Frame:                                           ; Offset_0x004ACA
00004ACA 5338 FEA2                                  subq.b  #$01, (Object_Frame_Timer).w                 ; $FFFFFEA2
00004ACE 6A00                                       bpl.s   Offset_0x004AE0
00004AD0 11FC 0007 FEA2                             move.b  #$07, (Object_Frame_Timer).w                 ; $FFFFFEA2
00004AD6 5238 FEA3                                  addq.b  #$01, (Object_Frame_Buffer).w                ; $FFFFFEA3
00004ADA 0238 0003 FEA3                             andi.b  #$03, (Object_Frame_Buffer).w                ; $FFFFFEA3
00004AE0                            Offset_0x004AE0:
00004AE0 4A38 FEA6                                  tst.b   (Object_Frame_Anim_Counter).w                ; $FFFFFEA6
00004AE4 6700                                       beq.s   Offset_0x004B02
00004AE6 7000                                       moveq   #$00, D0
00004AE8 1038 FEA6                                  move.b  (Object_Frame_Anim_Counter).w, D0            ; $FFFFFEA6
00004AEC D078 FEA8                                  add.w   (Object_Frame_Anim_Accum).w, D0              ; $FFFFFEA8
00004AF0 31C0 FEA8                                  move.w  D0, (Object_Frame_Anim_Accum).w              ; $FFFFFEA8
00004AF4 EF58                                       rol.w   #$07, D0
00004AF6 0240 0003                                  andi.w  #$0003, D0
00004AFA 11C0 FEA7                                  move.b  D0, (Object_Frame_Anim_Frame).w              ; $FFFFFEA7
00004AFE 5338 FEA6                                  subq.b  #$01, (Object_Frame_Anim_Counter).w          ; $FFFFFEA6
00004B02                            Offset_0x004B02:
00004B02 0678 0180 FEAA                             addi.w  #$0180, (Object_Frame_Angle).w               ; $FFFFFEAA
00004B08 4E75                                       rts
00004B0A                            ;===============================================================================
00004B0A                            ; Rotina para fazer os an_is e outros objetos girarem em torno de si
00004B0A                            ; <<<-
00004B0A                            ;===============================================================================
00004B0A                            
00004B0A                            Clear_End_Level_Art_Load_Flag:                                 ; Offset_0x004B0A
00004B0A 31FC 0000 FFC8                             move.w  #$0000, (End_Level_Art_Load_Flag).w          ; $FFFFFFC8
00004B10 4E75                                       rts
00004B12                            
00004B12                            ;===============================================================================
00004B12                            ; Rotina para testar e setar o flag de carga da arte de fim de fase
00004B12                            ; ->>>
00004B12                            ;===============================================================================                 
00004B12                            S2_Test_End_Level_Art_Load:                                    ; Offset_0x004B12
00004B12 31FC 0000 FFC8                             move.w  #$0000, (End_Level_Art_Load_Flag).w          ; $FFFFFFC8
00004B18 4A78 FFD8                                  tst.w   (Two_Player_Flag).w                          ; $FFFFFFD8
00004B1C 6600                                       bne.s   Set_End_Level_Flag                     ; Offset_0x004B80
00004B1E 0C78 0001 FE10                             cmpi.w  #S2_EHz_Act_2, (Level_Id).w           ; $0001, $FFFFFE10
00004B24 6700 0000                                  beq     Dont_Set_End_Level_Flag                ; Offset_0x004B86
00004B28 0C78 0500 FE10                             cmpi.w  #S2_Mz_Act_3, (Level_Id).w            ; $0500, $FFFFFE10
00004B2E 6700 0000                                  beq     Dont_Set_End_Level_Flag                ; Offset_0x004B86
00004B32 0C78 0600 FE10                             cmpi.w  #S2_WFz, (Level_Id).w                 ; $0600, $FFFFFE10
00004B38 6700 0000                                  beq     Dont_Set_End_Level_Flag                ; Offset_0x004B86
00004B3C 0C78 0701 FE10                             cmpi.w  #S2_HTz_Act_2, (Level_Id).w           ; $0701, $FFFFFE10
00004B42 6700 0000                                  beq     Dont_Set_End_Level_Flag                ; Offset_0x004B86
00004B46 0C78 0A01 FE10                             cmpi.w  #S2_OOz_Act_2, (Level_Id).w           ; $0A01, $FFFFFE10
00004B4C 6700 0000                                  beq     Dont_Set_End_Level_Flag                ; Offset_0x004B86
00004B50 0C78 0B01 FE10                             cmpi.w  #S2_MCz_Act_2, (Level_Id).w           ; $0B01, $FFFFFE10
00004B56 6700                                       beq.s   Dont_Set_End_Level_Flag                ; Offset_0x004B86
00004B58 0C78 0C01 FE10                             cmpi.w  #S2_CNz_Act_2, (Level_Id).w           ; $0C01, $FFFFFE10
00004B5E 6700                                       beq.s   Dont_Set_End_Level_Flag                ; Offset_0x004B86
00004B60 0C78 0D01 FE10                             cmpi.w  #S2_CPz_Act_2, (Level_Id).w           ; $0D01, $FFFFFE10
00004B66 6700                                       beq.s   Dont_Set_End_Level_Flag                ; Offset_0x004B86
00004B68 0C78 0E00 FE10                             cmpi.w  #S2_DEz, (Level_Id).w                 ; $0E00, $FFFFFE10
00004B6E 6700                                       beq.s   Dont_Set_End_Level_Flag                ; Offset_0x004B86
00004B70 0C78 0F01 FE10                             cmpi.w  #S2_ARz_Act_2, (Level_Id).w           ; $0F01, $FFFFFE10
00004B76 6700                                       beq.s   Dont_Set_End_Level_Flag                ; Offset_0x004B86
00004B78 0C78 1000 FE10                             cmpi.w  #S2_SCz, (Level_Id).w                 ; $1000, $FFFFFE10
00004B7E 6700                                       beq.s   Dont_Set_End_Level_Flag                ; Offset_0x004B86
00004B80                            Set_End_Level_Flag:                                            ; Offset_0x004B80
00004B80 31FC 0001 FFC8                             move.w  #$0001, (End_Level_Art_Load_Flag).w          ; $FFFFFFC8
00004B86                            Dont_Set_End_Level_Flag:                                       ; Offset_0x004B86
00004B86 4E75                                       rts
00004B88                            ;===============================================================================
00004B88                            ; Rotina para testar e setar o flag de carga da arte de fim de fase
00004B88                            ; ->>>
00004B88                            ;===============================================================================
00004B88                            
00004B88                            ;===============================================================================
00004B88                            ; Rotina para carregar a arte de fim de fase
00004B88                            ; ->>>
00004B88                            ;===============================================================================  
00004B88                            Check_End_Level_Art_Load:                                      ; Offset_0x004B88
00004B88 4A78 FFC8                                  tst.w   (End_Level_Art_Load_Flag).w                  ; $FFFFFFC8
00004B8C 6700                                       beq.s   Exit_S2_Check_End_Level_Art_Load       ; Offset_0x004BE8
00004B8E 4A78 FE08                                  tst.w   (Debug_Mode_Flag_Index).w                    ; $FFFFFE08
00004B92 6600                                       bne.s   Exit_S2_Check_End_Level_Art_Load       ; Offset_0x004BE8
00004B94 3038 EE78                                  move.w  (Camera_X).w, D0                             ; $FFFFEE78
00004B98 3238 EE16                                  move.w  (Sonic_Level_Limits_Max_X).w, D1             ; $FFFFEE16
00004B9C 0441 0100                                  subi.w  #$0100, D1
00004BA0 B041                                       cmp.w   D1, D0
00004BA2 6D00                                       blt.s   S2_Set_End_Level_Miles_Boundaries      ; Offset_0x004BC2
00004BA4 4A38 FE1E                                  tst.b   (HUD_Timer_Refresh_Flag).w                   ; $FFFFFE1E
00004BA8 6700                                       beq.s   S2_Set_End_Level_Miles_Boundaries      ; Offset_0x004BC2
00004BAA B278 EE14                                  cmp.w   (Sonic_Level_Limits_Min_X).w, D1             ; $FFFFEE14
00004BAE 6700                                       beq.s   S2_Set_End_Level_Miles_Boundaries      ; Offset_0x004BC2
00004BB0 31C1 EE14                                  move.w  D1, (Sonic_Level_Limits_Min_X).w             ; $FFFFEE14
00004BB4 4A78 FFD8                                  tst.w   (Two_Player_Flag).w                          ; $FFFFFFD8
00004BB8 6600                                       bne.s   Exit_S2_Check_End_Level_Art_Load       ; Offset_0x004BE8
00004BBA 4E75                                       rts 
00004BBC                            ;-------------------------------------------------------------------------------
00004BBC                            S2_End_Level_Art_Load:                                         ; Offset_0x004BBC
00004BBC 7027                                       moveq   #$27, D0
00004BBE 6000 C95C                                  bra     LoadPLC2                               ; Offset_0x00151C
00004BC2                            ;-------------------------------------------------------------------------------
00004BC2                            S2_Set_End_Level_Miles_Boundaries:                             ; Offset_0x004BC2
00004BC2 4A78 FFD8                                  tst.w   (Two_Player_Flag).w                          ; $FFFFFFD8
00004BC6 6700                                       beq.s   Exit_S2_Check_End_Level_Art_Load       ; Offset_0x004BE8
00004BC8 3038 EE60                                  move.w  (Camera_X_P2).w, D0                          ; $FFFFEE60
00004BCC 3238 EE1E                                  move.w  (Miles_Level_Limits_Max_X).w, D1             ; $FFFFEE1E
00004BD0 0441 0100                                  subi.w  #$0100, D1
00004BD4 B041                                       cmp.w   D1, D0
00004BD6 6D00                                       blt.s   Exit_S2_Check_End_Level_Art_Load       ; Offset_0x004BE8
00004BD8 4A38 FECA                                  tst.b   (HUD_Timer_Refresh_Flag_P2).w                ; $FFFFFECA
00004BDC 6700                                       beq.s   Exit_S2_Check_End_Level_Art_Load       ; Offset_0x004BE8
00004BDE B278 EE1C                                  cmp.w   (Miles_Level_Limits_Min_X).w, D1             ; $FFFFEE1C
00004BE2 6700                                       beq.s   Exit_S2_Check_End_Level_Art_Load       ; Offset_0x004BE8
00004BE4 31C1 EE1C                                  move.w  D1, (Miles_Level_Limits_Min_X).w             ; $FFFFEE1C
00004BE8                            Exit_S2_Check_End_Level_Art_Load:                              ; Offset_0x004BE8
00004BE8 4E75                                       rts         
00004BEA                            ;===============================================================================
00004BEA                            ; Rotina para carregar a arte de fim de fase
00004BEA                            ; <<<-
00004BEA                            ;=============================================================================== 
00004BEA                            
00004BEA                            Demo_Angel_Island:                                             ; Offset_0x004BEA
00004BEA                                            incbin  'data\aiz\demo.dat'     
00004FEA                            
00004FEA                            ;===============================================================================
00004FEA                            ; Carregar os Tiles 8x8 das fases    
00004FEA                            ; ->>>
00004FEA                            ;===============================================================================  
00004FEA                            Main_Level_Load_8x8_Tiles:                                     ; Offset_0x004FEA
00004FEA 3038 FE10                                  move.w  (Level_Id).w, D0                             ; $FFFFFE10
00004FEE E218                                       ror.b   #$01, D0
00004FF0 E848                                       lsr.w   #$04, D0
00004FF2 0240 01F8                                  andi.w  #$01F8, D0
00004FF6 3200                                       move.w  D0, D1
00004FF8 D040                                       add.w   D0, D0
00004FFA D041                                       add.w   D1, D0
00004FFC 49F9 0000 0000                             lea     (TilesMainTable), A4                   ; Offset_0x04A77E
00005002 49F4 0000                                  lea     $00(A4, D0), A4
00005006 201C                                       move.l  (A4)+, D0
00005008 0280 00FF FFFF                             andi.l  #$00FFFFFF, D0
0000500E 2E00                                       move.l  D0, D7
00005010 2240                                       move.l  D0, A1
00005012 3811                                       move.w  (A1), D4
00005014 343C 0000                                  move.w  #$0000, D2
00005018 4EB9 0000 18A8                             jsr     (Kosinski_Moduled_Dec)                 ; Offset_0x0018A8
0000501E 201C                                       move.l  (A4)+, D0
00005020 0280 00FF FFFF                             andi.l  #$00FFFFFF, D0
00005026 BE80                                       cmp.l   D0, D7
00005028 6700                                       beq.s   Offset_0x005034
0000502A 2240                                       move.l  D0, A1
0000502C 3404                                       move.w  D4, D2
0000502E 4EB9 0000 18A8                             jsr     (Kosinski_Moduled_Dec)                 ; Offset_0x0018A8
00005034                            Offset_0x005034:
00005034 11FC 000C F62A                             move.b  #$0C, (VBlank_Index).w                       ; $FFFFF62A
0000503A 4EB9 0000 19F0                             jsr     (Process_Kosinski_Queue_Main)          ; Offset_0x0019F0
00005040 6100 CAAC                                  bsr     Wait_For_VSync                         ; Offset_0x001AEE
00005044 6100 C510                                  bsr     RunPLC                                 ; Offset_0x001556
00005048 4EB9 0000 18FE                             jsr     (Process_Kosinski_Queue)               ; Offset_0x0018FE
0000504E 4A38 FF60                                  tst.b   (Kosinski_Modules_Left).w                    ; $FFFFFF60
00005052 66E0                                       bne.s   Offset_0x005034
00005054 4E75                                       rts
00005056                            ;===============================================================================
00005056                            ; Carregar os Tiles 8x8 das fases    
00005056                            ; <<<-
00005056                            ;=============================================================================== 
00005056                            
00005056                            ;===============================================================================
00005056                            ; Rotina para inicializar as fases com _gua    
00005056                            ; ->>>
00005056                            ;===============================================================================
00005056                            Init_Water_Levels:                                             ; Offset_0x005056
00005056 0C38 0000 FE10                             cmpi.b  #Aiz_Id, (Level_Id).w                   ; $00, $FFFFFE10
0000505C 6700                                       beq.s   Offset_0x005076
0000505E 0C38 0001 FE10                             cmpi.b  #Hz_Id, (Level_Id).w                    ; $01, $FFFFFE10
00005064 6700                                       beq.s   Offset_0x005076
00005066 0C78 0301 FE10                             cmpi.w  #CNz_Act_2, (Level_Id).w              ; $0301, $FFFFFE10
0000506C 6700                                       beq.s   Offset_0x005076
0000506E 0C78 0601 FE10                             cmpi.w  #LBz_Act_2, (Level_Id).w              ; $0601, $FFFFFE10
00005074 6600                                       bne.s   Offset_0x005082
00005076                            Offset_0x005076:
00005076 11FC 0001 F730                             move.b  #$01, (Water_Level_Flag).w                   ; $FFFFF730
0000507C 31FC 0000 FFD8                             move.w  #$0000, (Two_Player_Flag).w                  ; $FFFFFFD8
00005082                            Offset_0x005082:
00005082 4A38 F730                                  tst.b   (Water_Level_Flag).w                         ; $FFFFF730
00005086 6700                                       beq.s   LevelInit_UndewaterPalette             ; Offset_0x0050F0
00005088 31FC 4EF9 F608                             move.w  #$4EF9, (HBlank_Ptr).w                       ; $FFFFF608
0000508E 21FC 0000 0E32 F60A                        move.l  #Pal_To_ColorRAM, (HBlank_Ptr+$02).w ; Offset_0x000E32, $FFFFF60A
00005096 0C38 0001 FE10                             cmpi.b  #Hz_Id, (Level_Id).w                    ; $01, $FFFFFE10
0000509C 6700                                       beq.s   Offset_0x0050B6
0000509E 21FC 0000 0D0C F60A                        move.l  #HBlank_01, (HBlank_Ptr+$02).w       ; Offset_0x000D0C, $FFFFF60A
000050A6 0C78 1000 FFF6                             cmpi.w  #$1000, (Vertical_Frequency).w               ; $FFFFFFF6
000050AC 6500                                       bcs.s   Offset_0x0050B6
000050AE 21FC 0000 0DA0 F60A                        move.l  #HBlank_02, (HBlank_Ptr+$02).w       ; Offset_0x000DA0, $FFFFF60A
000050B6                            Offset_0x0050B6:
000050B6 21FC 0000 472E F62E                        move.l  #AIz_1_Water_Transistion, (Palette_Underwater_Ptr).w ; Offset_0x00472E, $FFFFF62E
000050BE 7000                                       moveq   #$00, D0
000050C0 3038 FE10                                  move.w  (Level_Id).w, D0                             ; $FFFFFE10
000050C4 E218                                       ror.b   #$01, D0
000050C6 EC48                                       lsr.w   #$06, D0
000050C8 0240 FFFE                                  andi.w  #$FFFE, D0
000050CC 43F9 0000 423C                             lea     (Water_Height_Array), A1               ; Offset_0x00423C
000050D2 3031 0000                                  move.w  $00(A1, D0), D0
000050D6 31C0 F646                                  move.w  D0, (Water_Level_Move).w                     ; $FFFFF646
000050DA 31C0 F648                                  move.w  D0, (Current_Water_Level).w                  ; $FFFFF648
000050DE 31C0 F64A                                  move.w  D0, (Target_Water_Level).w                   ; $FFFFF64A
000050E2 4238 F64D                                  clr.b   (Water_Entered_Counter).w                    ; $FFFFF64D
000050E6 4238 F64E                                  clr.b   (Underwater_Flag).w                          ; $FFFFF64E
000050EA 11FC 0001 F64C                             move.b  #$01, (Water_Level_Change_Speed).w           ; $FFFFF64C
000050F0                            ;-------------------------------------------------------------------------------                
000050F0                            LevelInit_UndewaterPalette:                                    ; Offset_0x0050F0
000050F0 4A38 F730                                  tst.b   (Water_Level_Flag).w                         ; $FFFFF730
000050F4 6700                                       beq.s   Offset_0x005174
000050F6 702B                                       moveq   #$2B, D0
000050F8 0C78 0000 FE10                             cmpi.w  #AIz_Act_1, (Level_Id).w              ; $0000, $FFFFFE10
000050FE 6700                                       beq.s   Offset_0x00515C
00005100 702C                                       moveq   #$2C, D0
00005102 21FC 0000 4750 F62E                        move.l  #AIz_2_Water_Transistion, (Palette_Underwater_Ptr).w ; Offset_0x004750, $FFFFF62E
0000510A 0C78 0001 FE10                             cmpi.w  #AIz_Act_2, (Level_Id).w              ; $0001, $FFFFFE10
00005110 6700                                       beq.s   Offset_0x00515C
00005112 7031                                       moveq   #$31, D0
00005114 21FC 0000 4778 F62E                        move.l  #Hz_Water_Transistion, (Palette_Underwater_Ptr).w ; Offset_0x004778, $FFFFF62E
0000511C 0C78 0100 FE10                             cmpi.w  #Hz_Act_1, (Level_Id).w               ; $0100, $FFFFFE10
00005122 6700                                       beq.s   Offset_0x00515C
00005124 7032                                       moveq   #$32, D0
00005126 21FC 0000 4778 F62E                        move.l  #Hz_Water_Transistion, (Palette_Underwater_Ptr).w ; Offset_0x004778, $FFFFF62E
0000512E 0C78 0101 FE10                             cmpi.w  #Hz_Act_2, (Level_Id).w               ; $0101, $FFFFFE10
00005134 6700                                       beq.s   Offset_0x00515C
00005136 702D                                       moveq   #$2D, D0
00005138 21FC 0000 4778 F62E                        move.l  #Hz_Water_Transistion, (Palette_Underwater_Ptr).w ; Offset_0x004778, $FFFFF62E
00005140 0C78 0600 FE10                             cmpi.w  #LBz_Act_1, (Level_Id).w              ; $0600, $FFFFFE10
00005146 6700                                       beq.s   Offset_0x00515C
00005148 702E                                       moveq   #$2E, D0
0000514A 21FC 0000 47A2 F62E                        move.l  #LBz_2_Water_Transistion, (Palette_Underwater_Ptr).w ; Offset_0x0047A2, $FFFFF62E
00005152 0C78 0601 FE10                             cmpi.w  #LBz_Act_2, (Level_Id).w              ; $0601, $FFFFFE10
00005158 6700                                       beq.s   Offset_0x00515C
0000515A 4E71                                       nop
0000515C                            Offset_0x00515C:
0000515C 3200                                       move.w  D0, D1
0000515E 6100 DE72                                  bsr     PalLoad3_Water                         ; Offset_0x002FD2
00005162 3001                                       move.w  D1, D0
00005164 6100 DE88                                  bsr     PalLoad4_Water                         ; Offset_0x002FEE
00005168 4A38 FE30                                  tst.b   (Saved_Level_Flag).w                         ; $FFFFFE30
0000516C 6700                                       beq.s   Offset_0x005174
0000516E 11F8 FE53 F64E                             move.b  (Saved_Underwater_Flag).w, (Underwater_Flag).w ; $FFFFFE53, $FFFFF64E
00005174                            Offset_0x005174:
00005174 4E75                                       rts 
00005176                            ;===============================================================================
00005176                            ; Rotina para inicializar as fases com _gua    
00005176                            ; <<<-
00005176                            ;=============================================================================== 
00005176                            
00005176                            ; Offset_0x005176:
00005176 5368 0024                                  subq.w  #$01, Obj_Ani_Time(A0)                           ; $0024
0000517A 6A00                                       bpl.s   Offset_0x0051EE
0000517C 317C 0007 0024                             move.w  #$0007, Obj_Ani_Time(A0)                         ; $0024
00005182 7000                                       moveq   #$00, D0
00005184 1028 002E                                  move.b  Obj_Timer(A0), D0                                ; $002E
00005188 5228 002E                                  addq.b  #$01, Obj_Timer(A0)                              ; $002E
0000518C 103B 0000                                  move.b  Offset_0x0051FA(PC, D0), D0
00005190 6600                                       bne.s   Offset_0x00519C
00005192 117C 0001 002E                             move.b  #$01, Obj_Timer(A0)                              ; $002E
00005198 103A 0000                                  move.b  Offset_0x0051FA(PC), D0
0000519C                            Offset_0x00519C:
0000519C EF48                                       lsl.w   #$07, D0
0000519E 43F9 FFFF 0000                             lea     (M68K_RAM_Start), A1                         ; $FFFF0000
000051A4 43F1 0000                                  lea     $00(A1, D0), A1
000051A8 45F9 FFFF 0200                             lea     (M68K_RAM_Start+$0200), A2                   ; $FFFF0200
000051AE 303C 007F                                  move.w  #$007F, D0
000051B2                            Offset_0x0051B2:
000051B2 34D9                                       move.w  (A1)+, (A2)+
000051B4 51C8 FFFC                                  dbra    D0, Offset_0x0051B2
000051B8 7000                                       moveq   #$00, D0
000051BA 1028 002F                                  move.b  $002F(A0), D0
000051BE 5228 002F                                  addq.b  #$01, $002F(A0)
000051C2 103B 0000                                  move.b  Offset_0x005214(PC, D0), D0
000051C6 6600                                       bne.s   Offset_0x0051D2
000051C8 117C 0001 002F                             move.b  #$01, $002F(A0)
000051CE 103A 0000                                  move.b  Offset_0x005214(PC), D0
000051D2                            Offset_0x0051D2:
000051D2 EF48                                       lsl.w   #$07, D0
000051D4 43F9 FFFF 0000                             lea     (M68K_RAM_Start), A1                         ; $FFFF0000
000051DA 43F1 0000                                  lea     $00(A1, D0), A1
000051DE 45F9 FFFF 0F00                             lea     (M68K_RAM_Start+$0F00), A2                   ; $FFFF0F00
000051E4 303C 003F                                  move.w  #$003F, D0
000051E8                            Offset_0x0051E8:
000051E8 34D9                                       move.w  (A1)+, (A2)+
000051EA 51C8 FFFC                                  dbra    D0, Offset_0x0051E8
000051EE                            Offset_0x0051EE:
000051EE 0C68 0006 0024                             cmpi.w  #$0006, Obj_Ani_Time(A0)                         ; $0024
000051F4 6700 0000                                  beq     Offset_0x005296
000051F8 4E75                                       rts
000051FA                            ;-------------------------------------------------------------------------------
000051FA                            Offset_0x0051FA:
000051FA 0212 0614 0816 0A18                        dc.b    $02, $12, $06, $14, $08, $16, $0A, $18
00005202 0C18 0A16 0814 0612                        dc.b    $0C, $18, $0A, $16, $08, $14, $06, $12
0000520A 031A 0E1C 101C 0E1A                        dc.b    $03, $1A, $0E, $1C, $10, $1C, $0E, $1A
00005212 0000                                       dc.b    $00, $00
00005214                            ;-------------------------------------------------------------------------------
00005214                            Offset_0x005214:
00005214 021F 2021 2223 2425                        dc.b    $02, $1F, $20, $21, $22, $23, $24, $25
0000521C 2627 2829 2A2B 2C2D                        dc.b    $26, $27, $28, $29, $2A, $2B, $2C, $2D
00005224 2E2F 3031 3233 3435                        dc.b    $2E, $2F, $30, $31, $32, $33, $34, $35
0000522C 3637 3839 3A3B 3C3D                        dc.b    $36, $37, $38, $39, $3A, $3B, $3C, $3D
00005234 3E3F 4041 4243 4445                        dc.b    $3E, $3F, $40, $41, $42, $43, $44, $45
0000523C 4647 4849 4A4B 4C4D                        dc.b    $46, $47, $48, $49, $4A, $4B, $4C, $4D
00005244 4E4D 4C4B 4A49 4847                        dc.b    $4E, $4D, $4C, $4B, $4A, $49, $48, $47
0000524C 4645 4443 4241 403F                        dc.b    $46, $45, $44, $43, $42, $41, $40, $3F
00005254 3E3D 3C3B 3A39 3837                        dc.b    $3E, $3D, $3C, $3B, $3A, $39, $38, $37
0000525C 3635 3433 3231 302F                        dc.b    $36, $35, $34, $33, $32, $31, $30, $2F
00005264 2E2D 2C2B 2A29 2827                        dc.b    $2E, $2D, $2C, $2B, $2A, $29, $28, $27
0000526C 2625 2423 2221 201F                        dc.b    $26, $25, $24, $23, $22, $21, $20, $1F
00005274 024F 5051 5253 5455                        dc.b    $02, $4F, $50, $51, $52, $53, $54, $55
0000527C 5657 5859 5A5B 5C5D                        dc.b    $56, $57, $58, $59, $5A, $5B, $5C, $5D
00005284 5E5D 5C5B 5A59 5857                        dc.b    $5E, $5D, $5C, $5B, $5A, $59, $58, $57
0000528C 5655 5453 5251 504F                        dc.b    $56, $55, $54, $53, $52, $51, $50, $4F
00005294 0000                                       dc.b    $00, $00  
00005296                            ;------------------------------------------------------------------------------- 
00005296                            Offset_0x005296:
00005296 46FC 2700                                  move    #$2700, SR
0000529A 48E7 FFFE                                  movem.l D0-D7/A0-A6, -(A7)
0000529E 41F8 F100                                  lea     (Plane_Buffer).w, A0                         ; $FFFFF100
000052A2 45F8 9000                                  lea     (Blocks_Mem_Address).w, A2                   ; $FFFF9000
000052A6 47F8 8008                                  lea     (Fg_Mem_Index_Address).w, A3                 ; $FFFF8008
000052AA 3E3C C000                                  move.w  #$C000, D7
000052AE 3038 EE78                                  move.w  (Camera_X).w, D0                             ; $FFFFEE78
000052B2 3200                                       move.w  D0, D1
000052B4 3038 EE7C                                  move.w  (Camera_Y).w, D0                             ; $FFFFEE7C
000052B8 0240 0FF0                                  andi.w  #$0FF0, D0
000052BC 4EB9 0000 0000                             jsr     (Refresh_Plane_Full)                   ; Offset_0x02FA7C
000052C2 4CDF 7FFF                                  movem.l (A7)+, D0-D7/A0-A6
000052C6 46FC 2300                                  move    #$2300, SR
000052CA 4E75                                       rts                             
000052CC                            ;===============================================================================
000052CC                            ; Menu de op__es, menu de sele__o de fases no modo 1 e 2 jogadores 
000052CC                            ; ->>>
000052CC                            ;===============================================================================
000052CC                            S2_Versus_Mode_Menu: 
000052CC                            S2_Options_Menu:
000052CC                            S2_Level_Select_Menu:
000052CC                            S2_Menus:                                                      ; Offset_0x0052CC
000052CC 6100 DB1A                                  bsr     Pal_FadeFrom                           ; Offset_0x002DE8
000052D0 46FC 2700                                  move    #$2700, SR
000052D4 3038 F60E                                  move.w  (VDP_Register_1_Command).w, D0               ; $FFFFF60E
000052D8 0200 00BF                                  andi.b  #$BF, D0
000052DC 33C0 00C0 0004                             move.w  D0, (VDP_Control_Port)                       ; $00C00004
000052E2 6100 BD1E                                  bsr     ClearScreen                            ; Offset_0x001002
000052E6 4DF9 00C0 0004                             lea     (VDP_Control_Port), A6                       ; $00C00004
000052EC 3CBC 8004                                  move.w  #$8004, (A6)
000052F0 3CBC 8230                                  move.w  #$8230, (A6)
000052F4 3CBC 8407                                  move.w  #$8407, (A6)
000052F8 3CBC 8230                                  move.w  #$8230, (A6)
000052FC 3CBC 8700                                  move.w  #$8700, (A6)
00005300 3CBC 8C81                                  move.w  #$8C81, (A6)
00005304 3CBC 9001                                  move.w  #$9001, (A6)
00005308 43F8 AC00                                  lea     (Sprite_Table_Input).w, A1                   ; $FFFFAC00
0000530C 7000                                       moveq   #$00, D0
0000530E 323C 00FF                                  move.w  #$00FF, D1
00005312                            Offset_0x005312:
00005312 22C0                                       move.l  D0, (A1)+
00005314 51C9 FFFC                                  dbra    D1, Offset_0x005312
00005318 43F8 B000                                  lea     (Obj_Memory_Address).w, A1                   ; $FFFFB000
0000531C 7000                                       moveq   #$00, D0
0000531E 323C 07FF                                  move.w  #$07FF, D1
00005322                            Offset_0x005322:
00005322 22C0                                       move.l  D0, (A1)+
00005324 51C9 FFFC                                  dbra    D1, Offset_0x005322
00005328 4278 E700                                  clr.w   (DMA_Buffer_List).w                          ; $FFFFE700
0000532C 21FC FFFF E700 E8F8                        move.l  #DMA_Buffer_List, (DMA_Buffer_List_End).w  ; $FFFFE700, $FFFFE8F8
00005334 23FC 4200 0000 00C0 0004                   move.l  #$42000000, (VDP_Control_Port)               ; $00C00004
0000533E 41F9 0000 0000                             lea     (Art_Menu_Font), A0                    ; Offset_0x1095D6
00005344 6100 C04A                                  bsr     NemesisDec                             ; Offset_0x001390
00005348 23FC 4E00 0000 00C0 0004                   move.l  #$4E000000, (VDP_Control_Port)               ; $00C00004
00005352 41F9 0000 0000                             lea     (Art_Menu_Frame), A0                   ; Offset_0x109EC8
00005358 6100 C036                                  bsr     NemesisDec                             ; Offset_0x001390
0000535C 23FC 5200 0000 00C0 0004                   move.l  #$52000000, (VDP_Control_Port)               ; $00C00004
00005366 41F9 0000 0000                             lea     (Art_Level_Icons), A0                  ; Offset_0x109F48
0000536C 6100 C022                                  bsr     NemesisDec                             ; Offset_0x001390
00005370 43F9 FFFF 0000                             lea     (M68K_RAM_Start), A1                         ; $FFFF0000
00005376 41F9 0000 0000                             lea     (Versus_Menu_Bg_Mappings), A0          ; Offset_0x109D1C
0000537C 303C 6000                                  move.w  #$6000, D0
00005380 6100 C308                                  bsr     EnigmaDec                              ; Offset_0x00168A
00005384 43F9 FFFF 0000                             lea     (M68K_RAM_Start), A1                         ; $FFFF0000
0000538A 203C 6000 0003                             move.l  #$60000003, D0
00005390 7227                                       moveq   #$27, D1
00005392 741B                                       moveq   #$1B, D2
00005394 4EB9 0000 12BC                             jsr     (ShowVDPGraphics)                      ; Offset_0x0012BC
0000539A 0C38 0024 F600                             cmpi.b  #gm_S2_Options_Menu, (Game_Mode).w      ; $24, $FFFFF600
000053A0 6700 0000                                  beq     Options_Menu                           ; Offset_0x0056CA
000053A4 0C38 0028 F600                             cmpi.b  #gm_Level_Select_Menu, (Game_Mode).w    ; $28, $FFFFF600   
000053AA 6700 0000                                  beq     Level_Select_Menu                      ; Offset_0x0059F0
000053AE                            ;-------------------------------------------------------------------------------                
000053AE                            ; Level_Select_Menu_2P:                  
000053AE 43F9 FFFF 0000                             lea     (M68K_RAM_Start), A1                         ; $FFFF0000
000053B4 41F9 0000 0000                             lea     (Vs_Level_Select_Frame_Mappings), A0   ; Offset_0x006410
000053BA 303C 0070                                  move.w  #$0070, D0
000053BE 6100 C2CA                                  bsr     EnigmaDec                              ; Offset_0x00168A
000053C2 43F9 FFFF 0198                             lea     (M68K_RAM_Start+$0198), A1                   ; $FFFF0198
000053C8 41F9 0000 0000                             lea     (Vs_Level_Select_Frame_Mappings), A0   ; Offset_0x006410
000053CE 303C 2070                                  move.w  #$2070, D0
000053D2 6100 C2B6                                  bsr     EnigmaDec                              ; Offset_0x00168A
000053D6 43F9 FFFF 0330                             lea     (M68K_RAM_Start+$0330), A1                   ; $FFFF0330
000053DC 41F9 0000 0000                             lea     (Menu_Icons_Mappings), A0              ; Offset_0x0065E2
000053E2 303C 0090                                  move.w  #$0090, D0
000053E6 6100 C2A2                                  bsr     EnigmaDec                              ; Offset_0x00168A
000053EA 45F9 FFFF 0498                             lea     (M68K_RAM_Start+$0498), A2                   ; $FFFF0498
000053F0 720F                                       moveq   #$0F, D1
000053F2                            Offset_0x0053F2:
000053F2 34FC 207B                                  move.w  #$207B, (A2)+
000053F6 51C9 FFFA                                  dbra    D1, Offset_0x0053F2
000053FA 6100 0000                                  bsr     Offset_0x005580
000053FE 5238 FF88                                  addq.b  #$01, (Level_Id_2P).w                        ; $FFFFFF88
00005402 0238 0003 FF88                             andi.b  #$03, (Level_Id_2P).w                        ; $FFFFFF88
00005408 6100 0000                                  bsr     Offset_0x00561A
0000540C 5238 FF88                                  addq.b  #$01, (Level_Id_2P).w                        ; $FFFFFF88
00005410 0238 0003 FF88                             andi.b  #$03, (Level_Id_2P).w                        ; $FFFFFF88
00005416 6100 0000                                  bsr     Offset_0x00561A
0000541A 5238 FF88                                  addq.b  #$01, (Level_Id_2P).w                        ; $FFFFFF88
0000541E 0238 0003 FF88                             andi.b  #$03, (Level_Id_2P).w                        ; $FFFFFF88
00005424 6100 0000                                  bsr     Offset_0x00561A
00005428 5238 FF88                                  addq.b  #$01, (Level_Id_2P).w                        ; $FFFFFF88
0000542C 0238 0003 FF88                             andi.b  #$03, (Level_Id_2P).w                        ; $FFFFFF88
00005432 4278 FF08                                  clr.w   (Player_Selected_Flag).w                     ; $FFFFFF08
00005436 4238 FF89                                  clr.b   (Act_Id_2P).w                                ; $FFFFFF89
0000543A 4278 FF02                                  clr.w   (Results_Screen_2P).w                        ; $FFFFFF02
0000543E 4238 F711                                  clr.b   (Title_Card_Flag).w                          ; $FFFFF711
00005442 4278 F7F0                                  clr.w   (Animate_Counters).w                         ; $FFFFF7F0
00005446 4278 FF98                                  clr.w   (Game_Over_2P_Flag).w                        ; $FFFFFF98
0000544A 45F9 0000 0000                             lea     (Menu_Animate), A2                     ; Offset_0x006614
00005450 4EB9 0000 0000                             jsr     (Dynamic_Normal)                       ; Offset_0x01F2DE
00005456 7004                                       moveq   #$04, D0
00005458 6100 DB44                                  bsr     PalLoad1                               ; Offset_0x002F9E
0000545C 43F8 ED40                                  lea     (Palette_Row_2_Offset).w, A1                 ; $FFFFED40
00005460 45F8 EDC0                                  lea     (Palette_Data_Target+$40).w, A2              ; $FFFFEDC0
00005464 7207                                       moveq   #$07, D1
00005466                            Offset_0x005466:
00005466 24D1                                       move.l  (A1), (A2)+
00005468 4299                                       clr.l   (A1)+
0000546A 51C9 FFFA                                  dbra    D1, Offset_0x005466
0000546E 31FC 0707 F614                             move.w  #$0707, (Demo_Timer).w                       ; $FFFFF614
00005474 4278 FFD8                                  clr.w   (Two_Player_Flag).w                          ; $FFFFFFD8
00005478 42B8 EE78                                  clr.l   (Camera_X).w                                 ; $FFFFEE78
0000547C 42B8 EE7C                                  clr.l   (Camera_Y).w                                 ; $FFFFEE7C
00005480 11FC 0016 F62A                             move.b  #$16, (VBlank_Index).w                       ; $FFFFF62A
00005486 6100 C666                                  bsr     Wait_For_VSync                         ; Offset_0x001AEE
0000548A 3038 F60E                                  move.w  (VDP_Register_1_Command).w, D0               ; $FFFFF60E
0000548E 0000 0040                                  ori.b   #$40, D0
00005492 33C0 00C0 0004                             move.w  D0, (VDP_Control_Port)                       ; $00C00004
00005498 6100 D886                                  bsr     Pal_FadeTo                             ; Offset_0x002D20
0000549C                            Offset_0x00549C:
0000549C 11FC 0016 F62A                             move.b  #$16, (VBlank_Index).w                       ; $FFFFF62A
000054A2 6100 C64A                                  bsr     Wait_For_VSync                         ; Offset_0x001AEE
000054A6 46FC 2700                                  move    #$2700, SR
000054AA 6100 0000                                  bsr     Offset_0x00561A
000054AE 6100 0000                                  bsr     Offset_0x00555C
000054B2 6100 0000                                  bsr     Offset_0x005580
000054B6 46FC 2300                                  move    #$2300, SR
000054BA 45F9 0000 0000                             lea     (Menu_Animate), A2                     ; Offset_0x006614
000054C0 4EB9 0000 0000                             jsr     (Dynamic_Normal)                       ; Offset_0x01F2DE
000054C6 1038 F605                                  move.b  (Control_Ports_Buffer_Data+$0001).w, D0      ; $FFFFF605
000054CA 8038 F607                                  or.b    (Control_Ports_Buffer_Data+$0003).w, D0      ; $FFFFF607
000054CE 0200 0080                                  andi.b  #$80, D0
000054D2 6600                                       bne.s   Offset_0x0054D8
000054D4 6000 FFC6                                  bra     Offset_0x00549C
000054D8                            Offset_0x0054D8:
000054D8 6100 0000                                  bsr     Offset_0x005600
000054DC 6B00                                       bmi.s   Offset_0x0054EA
000054DE 303C 00ED                                  move.w  #$00ED, D0
000054E2 6100 BC92                                  bsr     Play_Music                             ; Offset_0x001176
000054E6 6000 FFB4                                  bra     Offset_0x00549C
000054EA                            Offset_0x0054EA:
000054EA 11FC 0000 F600                             move.b  #gm_SEGALogo, (Game_Mode).w             ; $00, $FFFFF600
000054F0 4E75                                       rts
000054F2                            ;-------------------------------------------------------------------------------
000054F2                            Load_Selected_Level_2P:                                        ; Offset_0x0054F2
000054F2 7000                                       moveq   #$00, D0
000054F4 1038 FF88                                  move.b  (Level_Id_2P).w, D0                          ; $FFFFFF88
000054F8 D040                                       add.w   D0, D0
000054FA 303B 0000                                  move.w  Menu_Level_Select_Array_2P(PC, D0), D0 ; Offset_0x005554
000054FE 6B00                                       bmi.s   Menu_Load_Special_Stage_2P             ; Offset_0x00553C
00005500 31C0 FE10                                  move.w  D0, (Level_Id).w                             ; $FFFFFE10
00005504 31C0 EE54                                  move.w  D0, (Level_Id_2).w                           ; $FFFFEE54
00005508 31FC 0001 FFD8                             move.w  #$0001, (Two_Player_Flag).w                  ; $FFFFFFD8
0000550E 11FC 000C F600                             move.b  #gm_PlayMode, (Game_Mode).w             ; $0C, $FFFFF600
00005514 11FC 0000 FE30                             move.b  #$00, (Saved_Level_Flag).w                   ; $FFFFFE30
0000551A 11FC 0000 FEE0                             move.b  #$00, (Saved_Level_Flag_P2).w                ; $FFFFFEE0
00005520 7000                                       moveq   #$00, D0
00005522 21C0 FE26                                  move.l  D0, (Score_Count_Address).w                  ; $FFFFFE26
00005526 21C0 FED6                                  move.l  D0, (Score_Count_Address_P2).w               ; $FFFFFED6
0000552A 21FC 0000 1388 FFC0                        move.l  #$00001388, (Next_Extra_Life_Score).w        ; $FFFFFFC0
00005532 21FC 0000 1388 FFC4                        move.l  #$00001388, (Next_Extra_Life_Score_P2).w     ; $FFFFFFC4
0000553A 4E75                                       rts
0000553C                            Menu_Load_Special_Stage_2P:                                    ; Offset_0x00553C
0000553C 11FC 0004 FE16                             move.b  #$04, (Special_Stage_Id).w                   ; $FFFFFE16
00005542 11FC 0010 F600                             move.b  #gm_S2_SpecialStage, (Game_Mode).w      ; $10, $FFFFF600
00005548 7001                                       moveq   #$01, D0
0000554A 31C0 FFD8                                  move.w  D0, (Two_Player_Flag).w                      ; $FFFFFFD8
0000554E 31C0 FF8A                                  move.w  D0, (Two_Player_Flag_2).w                    ; $FFFFFF8A
00005552 4E75                                       rts  
00005554                            Menu_Level_Select_Array_2P:                                    ; Offset_0x005554               
00005554 0000 0B00 0C00 FFFF                        dc.w    $0000, $0B00, $0C00, $FFFF   
0000555C                            ;-------------------------------------------------------------------------------
0000555C                            Offset_0x00555C:
0000555C 1038 F605                                  move.b  (Control_Ports_Buffer_Data+$0001).w, D0      ; $FFFFF605
00005560 8038 F607                                  or.b    (Control_Ports_Buffer_Data+$0003).w, D0      ; $FFFFF607
00005564 1200                                       move.b  D0, D1
00005566 0200 0003                                  andi.b  #$03, D0
0000556A 6700                                       beq.s   Offset_0x005572
0000556C 0878 0001 FF88                             bchg    #01, (Level_Id_2P).w                         ; $FFFFFF88
00005572                            Offset_0x005572:
00005572 0201 000C                                  andi.b  #$0C, D1
00005576 6700                                       beq.s   Offset_0x00557E
00005578 0878 0000 FF88                             bchg    #00, (Level_Id_2P).w                         ; $FFFFFF88
0000557E                            Offset_0x00557E:
0000557E 4E75                                       rts      
00005580                            ;-------------------------------------------------------------------------------
00005580                            Offset_0x005580:
00005580 7000                                       moveq   #$00, D0
00005582 1038 FF88                                  move.b  (Level_Id_2P).w, D0                          ; $FFFFFF88
00005586 E948                                       lsl.w   #$04, D0
00005588 47F9 0000 0000                             lea     (Level_Select_Text_2P), A3             ; Offset_0x00567C
0000558E 47F3 0000                                  lea     $00(A3, D0), A3
00005592 303C 6000                                  move.w  #$6000, D0
00005596 45F9 FFFF 0048                             lea     (M68K_RAM_Start+$0048), A2                   ; $FFFF0048
0000559C 225B                                       move.l  (A3)+, A1
0000559E 6100 0000                                  bsr     Offset_0x0056BC
000055A2 45F9 FFFF 0094                             lea     (M68K_RAM_Start+$0094), A2                   ; $FFFF0094
000055A8 225B                                       move.l  (A3)+, A1
000055AA 6100 0000                                  bsr     Offset_0x0056BC
000055AE 45F9 FFFF 00D8                             lea     (M68K_RAM_Start+$00D8), A2                   ; $FFFF00D8
000055B4 226B 0004                                  move.l  $0004(A3), A1
000055B8 6100 0000                                  bsr     Offset_0x005600
000055BC 6B00                                       bmi.s   Offset_0x0055C4
000055BE 43F9 FFFF 0468                             lea     (M68K_RAM_Start+$0468), A1                   ; $FFFF0468
000055C4                            Offset_0x0055C4:
000055C4 7202                                       moveq   #$02, D1
000055C6                            Offset_0x0055C6:
000055C6 24D9                                       move.l  (A1)+, (A2)+
000055C8 24D9                                       move.l  (A1)+, (A2)+
000055CA 45EA 001A                                  lea     $001A(A2), A2
000055CE 51C9 FFF6                                  dbra    D1, Offset_0x0055C6
000055D2 43F9 FFFF 0000                             lea     (M68K_RAM_Start), A1                         ; $FFFF0000
000055D8 201B                                       move.l  (A3)+, D0
000055DA 7210                                       moveq   #$10, D1
000055DC 740B                                       moveq   #$0B, D2
000055DE 6100 BCDC                                  bsr     ShowVDPGraphics                        ; Offset_0x0012BC
000055E2 43F9 0000 0000                             lea     (Pal_Levels_Icons), A1                 ; Offset_0x006230
000055E8 7000                                       moveq   #$00, D0
000055EA 1013                                       move.b  (A3), D0
000055EC EB48                                       lsl.w   #$05, D0
000055EE 43F1 0000                                  lea     $00(A1, D0), A1
000055F2 45F8 ED40                                  lea     (Palette_Row_2_Offset).w, A2                 ; $FFFFED40
000055F6 7207                                       moveq   #$07, D1
000055F8                            Offset_0x0055F8:
000055F8 24D9                                       move.l  (A1)+, (A2)+
000055FA 51C9 FFFC                                  dbra    D1, Offset_0x0055F8
000055FE 4E75                                       rts
00005600                            Offset_0x005600:
00005600 7000                                       moveq   #$00, D0
00005602 1038 FF88                                  move.b  (Level_Id_2P).w, D0                          ; $FFFFFF88
00005606 3200                                       move.w  D0, D1
00005608 D040                                       add.w   D0, D0
0000560A D041                                       add.w   D1, D0
0000560C D040                                       add.w   D0, D0
0000560E 4BF5 0000                                  lea     $00(A5, D0), A5
00005612 3015                                       move.w  (A5), D0
00005614 D06D 0002                                  add.w   $0002(A5), D0
00005618 4E75                                       rts        
0000561A                            ;-------------------------------------------------------------------------------
0000561A                            Offset_0x00561A:
0000561A 7000                                       moveq   #$00, D0
0000561C 1038 FF88                                  move.b  (Level_Id_2P).w, D0                          ; $FFFFFF88
00005620 E948                                       lsl.w   #$04, D0
00005622 47F9 0000 0000                             lea     (Level_Select_Text_2P), A3             ; Offset_0x00567C
00005628 47F3 0000                                  lea     $00(A3, D0), A3
0000562C 7000                                       moveq   #$00, D0
0000562E 45F9 FFFF 01E0                             lea     (M68K_RAM_Start+$01E0), A2                   ; $FFFF01E0
00005634 225B                                       move.l  (A3)+, A1
00005636 6100 0000                                  bsr     Offset_0x0056BC
0000563A 45F9 FFFF 022C                             lea     (M68K_RAM_Start+$022C), A2                   ; $FFFF022C
00005640 225B                                       move.l  (A3)+, A1
00005642 6100 0000                                  bsr     Offset_0x0056BC
00005646 45F9 FFFF 0270                             lea     (M68K_RAM_Start+$0270), A2                   ; $FFFF0270
0000564C 43F9 FFFF 0498                             lea     (M68K_RAM_Start+$0498), A1                   ; $FFFF0498
00005652 6100 FFAC                                  bsr     Offset_0x005600
00005656 6B00                                       bmi.s   Offset_0x00565E
00005658 43F9 FFFF 0468                             lea     (M68K_RAM_Start+$0468), A1                   ; $FFFF0468
0000565E                            Offset_0x00565E:
0000565E 7202                                       moveq   #$02, D1
00005660                            Offset_0x005660:
00005660 24D9                                       move.l  (A1)+, (A2)+
00005662 24D9                                       move.l  (A1)+, (A2)+
00005664 45EA 001A                                  lea     $001A(A2), A2
00005668 51C9 FFF6                                  dbra    D1, Offset_0x005660
0000566C 43F9 FFFF 0198                             lea     (M68K_RAM_Start+$0198), A1                   ; $FFFF0198
00005672 201B                                       move.l  (A3)+, D0
00005674 7210                                       moveq   #$10, D1
00005676 740B                                       moveq   #$0B, D2
00005678 6000 BC42                                  bra     ShowVDPGraphics                        ; Offset_0x0012BC 
0000567C                            ;-------------------------------------------------------------------------------   
0000567C                            Level_Select_Text_2P:                                          ; Offset_0x00567C               
0000567C 0000 0000                                  dc.l    Map_Emerald_Hill                       ; Offset_0x00610E               
00005680 0000 0000                                  dc.l    Map_Zone                               ; Offset_0x006150         
00005684 4104 0003 00FF 0330                        dc.w    $4104, $0003, $00FF, $0330
0000568C 0000 0000                                  dc.l    Map_Mystic_Cave                        ; Offset_0x00611B 
00005690 0000 0000                                  dc.l    Map_Zone                               ; Offset_0x006150
00005694 412C 0003 05FF 03A8                        dc.w    $412C, $0003, $05FF, $03A8
0000569C 0000 0000                                  dc.l    Map_Casino_Night                       ; Offset_0x006128
000056A0 0000 0000                                  dc.l    Map_Zone                               ; Offset_0x006150
000056A4 4784 0003 06FF 03C0                        dc.w    $4784, $0003, $06FF, $03C0
000056AC 0000 0000                                  dc.l    Map_Special                            ; Offset_0x006143
000056B0 0000 0000                                  dc.l    Map_Stage                              ; Offset_0x006156
000056B4 47AC 0003 0CFF 0450                        dc.w    $47AC, $0003, $0CFF, $0450      
000056BC                            ;-------------------------------------------------------------------------------    
000056BC                            Offset_0x0056BC:
000056BC 7200                                       moveq   #$00, D1
000056BE 1219                                       move.b  (A1)+, D1
000056C0                            Offset_0x0056C0:
000056C0 1019                                       move.b  (A1)+, D0
000056C2 34C0                                       move.w  D0, (A2)+
000056C4 51C9 FFFA                                  dbra    D1, Offset_0x0056C0
000056C8 4E75                                       rts    
000056CA                            ;-------------------------------------------------------------------------------
000056CA                            Options_Menu:                                                  ; Offset_0x0056CA
000056CA 43F9 FFFF 0000                             lea     (M68K_RAM_Start), A1                         ; $FFFF0000
000056D0 41F9 0000 0000                             lea     (Options_Frame_Mappings), A0           ; Offset_0x006462
000056D6 303C 0070                                  move.w  #$0070, D0
000056DA 6100 BFAE                                  bsr     EnigmaDec                              ; Offset_0x00168A
000056DE 43F9 FFFF 0160                             lea     (M68K_RAM_Start+$0160), A1                   ; $FFFF0160
000056E4 41F9 0000 0000                             lea     (Options_Frame_Mappings), A0           ; Offset_0x006462
000056EA 303C 2070                                  move.w  #$2070, D0
000056EE 6100 BF9A                                  bsr     EnigmaDec                              ; Offset_0x00168A
000056F2 4238 FF8C                                  clr.b   (Options_Menu_Cursor).w                      ; $FFFFFF8C
000056F6 6100 0000                                  bsr     Offset_0x005880
000056FA 5238 FF8C                                  addq.b  #$01, (Options_Menu_Cursor).w                ; $FFFFFF8C
000056FE 6100 0000                                  bsr     Offset_0x0058F2
00005702 5238 FF8C                                  addq.b  #$01, (Options_Menu_Cursor).w                ; $FFFFFF8C
00005706 6100 0000                                  bsr     Offset_0x0058F2
0000570A 4238 FF8C                                  clr.b   (Options_Menu_Cursor).w                      ; $FFFFFF8C
0000570E 4238 F711                                  clr.b   (Title_Card_Flag).w                          ; $FFFFF711
00005712 4278 F7F0                                  clr.w   (Animate_Counters).w                         ; $FFFFF7F0
00005716 45F9 0000 0000                             lea     (Menu_Animate), A2                     ; Offset_0x006614
0000571C 4EB9 0000 0000                             jsr     (Dynamic_Normal)                       ; Offset_0x01F2DE
00005722 7004                                       moveq   #$04, D0
00005724 6100 D878                                  bsr     PalLoad1                               ; Offset_0x002F9E
00005728 4278 FFD8                                  clr.w   (Two_Player_Flag).w                          ; $FFFFFFD8
0000572C 42B8 EE78                                  clr.l   (Camera_X).w                                 ; $FFFFEE78
00005730 42B8 EE7C                                  clr.l   (Camera_Y).w                                 ; $FFFFEE7C
00005734 4278 FFD4                                  clr.w   (Secret_Code_Input_Entries).w                ; $FFFFFFD4
00005738 4278 FFD6                                  clr.w   (Secret_Code_Input_Entries_2).w              ; $FFFFFFD6
0000573C 11FC 0016 F62A                             move.b  #$16, (VBlank_Index).w                       ; $FFFFF62A
00005742 6100 C3AA                                  bsr     Wait_For_VSync                         ; Offset_0x001AEE
00005746 3038 F60E                                  move.w  (VDP_Register_1_Command).w, D0               ; $FFFFF60E
0000574A 0000 0040                                  ori.b   #$40, D0
0000574E 33C0 00C0 0004                             move.w  D0, (VDP_Control_Port)                       ; $00C00004
00005754 6100 D5CA                                  bsr     Pal_FadeTo                             ; Offset_0x002D20
00005758                            Offset_0x005758:
00005758 11FC 0016 F62A                             move.b  #$16, (VBlank_Index).w                       ; $FFFFF62A
0000575E 6100 C38E                                  bsr     Wait_For_VSync                         ; Offset_0x001AEE
00005762 46FC 2700                                  move    #$2700, SR
00005766 6100 0000                                  bsr     Offset_0x0058F2
0000576A 6100 0000                                  bsr     Offset_0x0057DE
0000576E 6100 0000                                  bsr     Offset_0x005880
00005772 46FC 2300                                  move    #$2300, SR
00005776 45F9 0000 0000                             lea     (Menu_Animate), A2                     ; Offset_0x006614
0000577C 4EB9 0000 0000                             jsr     (Dynamic_Normal)                       ; Offset_0x01F2DE
00005782 1038 F605                                  move.b  (Control_Ports_Buffer_Data+$0001).w, D0      ; $FFFFF605
00005786 8038 F607                                  or.b    (Control_Ports_Buffer_Data+$0003).w, D0      ; $FFFFF607
0000578A 0200 0080                                  andi.b  #$80, D0
0000578E 6600                                       bne.s   Offset_0x005794
00005790 6000 FFC6                                  bra     Offset_0x005758
00005794                            Offset_0x005794:
00005794 1038 FF8C                                  move.b  (Options_Menu_Cursor).w, D0                  ; $FFFFFF8C
00005798 6600                                       bne.s   Offset_0x0057B4
0000579A 7000                                       moveq   #$00, D0
0000579C 31C0 FFD8                                  move.w  D0, (Two_Player_Flag).w                      ; $FFFFFFD8
000057A0 31C0 FF8A                                  move.w  D0, (Two_Player_Flag_2).w                    ; $FFFFFF8A
000057A4 31C0 FE10                                  move.w  D0, (Level_Id).w                             ; $FFFFFE10
000057A8 31C0 EE54                                  move.w  D0, (Level_Id_2).w                           ; $FFFFEE54
000057AC 11FC 000C F600                             move.b  #gm_PlayMode, (Game_Mode).w             ; $0C, $FFFFF600
000057B2 4E75                                       rts
000057B4                            Offset_0x0057B4:
000057B4 5300                                       subq.b  #$01, D0
000057B6 6600                                       bne.s   Offset_0x0057D6
000057B8 7001                                       moveq   #$01, D0
000057BA 31C0 FFD8                                  move.w  D0, (Two_Player_Flag).w                      ; $FFFFFFD8
000057BE 31C0 FF8A                                  move.w  D0, (Two_Player_Flag_2).w                    ; $FFFFFF8A
000057C2 11FC 001C F600                             move.b  #gm_S2_Versus_Mode_Menu, (Game_Mode).w  ; $1C, $FFFFF600
000057C8 11FC 0000 FF88                             move.b  #$00, (Level_Id_2P).w                        ; $FFFFFF88
000057CE 31FC 0000 FF08                             move.w  #$0000, (Player_Selected_Flag).w             ; $FFFFFF08
000057D4 4E75                                       rts
000057D6                            Offset_0x0057D6:
000057D6 11FC 0000 F600                             move.b  #gm_SEGALogo, (Game_Mode).w             ; $00, $FFFFF600
000057DC 4E75                                       rts
000057DE                            Offset_0x0057DE:
000057DE 7400                                       moveq   #$00, D2
000057E0 1438 FF8C                                  move.b  (Options_Menu_Cursor).w, D2                  ; $FFFFFF8C
000057E4 1038 F605                                  move.b  (Control_Ports_Buffer_Data+$0001).w, D0      ; $FFFFF605
000057E8 8038 F607                                  or.b    (Control_Ports_Buffer_Data+$0003).w, D0      ; $FFFFF607
000057EC 0800 0000                                  btst    #$00, D0
000057F0 6700                                       beq.s   Offset_0x0057FA
000057F2 5302                                       subq.b  #$01, D2
000057F4 6400                                       bcc.s   Offset_0x0057FA
000057F6 143C 0002                                  move.b  #$02, D2
000057FA                            Offset_0x0057FA:
000057FA 0800 0001                                  btst    #$01, D0
000057FE 6700                                       beq.s   Offset_0x00580A
00005800 5202                                       addq.b  #$01, D2
00005802 0C02 0003                                  cmpi.b  #$03, D2
00005806 6500                                       bcs.s   Offset_0x00580A
00005808 7400                                       moveq   #$00, D2
0000580A                            Offset_0x00580A:
0000580A 11C2 FF8C                                  move.b  D2, (Options_Menu_Cursor).w                  ; $FFFFFF8C
0000580E E54A                                       lsl.w   #$02, D2
00005810 163B 2000                                  move.b  Menu_Options_Boundaries(PC, D2), D3    ; Offset_0x005874
00005814 227B 2000                                  move.l  Menu_Options_Boundaries(PC, D2), A1    ; Offset_0x005874
00005818 3411                                       move.w  (A1), D2
0000581A 0800 0002                                  btst    #$02, D0
0000581E 6700                                       beq.s   Offset_0x005826
00005820 5302                                       subq.b  #$01, D2
00005822 6400                                       bcc.s   Offset_0x005826
00005824 1403                                       move.b  D3, D2
00005826                            Offset_0x005826:
00005826 0800 0003                                  btst    #$03, D0
0000582A 6700                                       beq.s   Offset_0x005834
0000582C 5202                                       addq.b  #$01, D2
0000582E B403                                       cmp.b   D3, D2
00005830 6300                                       bls.s   Offset_0x005834
00005832 7400                                       moveq   #$00, D2
00005834                            Offset_0x005834:
00005834 0800 0006                                  btst    #$06, D0
00005838 6700                                       beq.s   Offset_0x005844
0000583A 0602 0010                                  addi.b  #$10, D2
0000583E B403                                       cmp.b   D3, D2
00005840 6300                                       bls.s   Offset_0x005844
00005842 7400                                       moveq   #$00, D2
00005844                            Offset_0x005844:
00005844 3282                                       move.w  D2, (A1)
00005846 0C38 0002 FF8C                             cmpi.b  #$02, (Options_Menu_Cursor).w                ; $FFFFFF8C
0000584C 6600                                       bne.s   Offset_0x005872
0000584E 0240 0030                                  andi.w  #$0030, D0
00005852 6700                                       beq.s   Offset_0x005872
00005854 3038 FF84                                  move.w  (Sound_Test_Sound).w, D0                     ; $FFFFFF84
00005858 6100 B91C                                  bsr     Play_Music                             ; Offset_0x001176
0000585C 41F9 0000 0000                             lea     (S2_Code_Level_Select), A0             ; Offset_0x006044
00005862 45F9 0000 0000                             lea     (S2_Code_14_Continues), A2             ; Offset_0x006049
00005868 43F8 FFD0                                  lea     (Level_Select_Flag).w, A1                    ; $FFFFFFD0
0000586C 7400                                       moveq   #$00, D2
0000586E 6100 0000                                  bsr     Menu_Check_Secret_Codes                ; Offset_0x005FD8
00005872                            Offset_0x005872:
00005872 4E75                                       rts   
00005874                            ;-------------------------------------------------------------------------------                 
00005874                            Menu_Options_Boundaries:                                       ; Offset_0x005874
00005874 02FF FF0A                                  dc.l    ($02<<$18)|(Player_Select_Flag&$00FFFFFF)    ; Jogador selecionado 
00005878 01FF FF0C                                  dc.l    ($01<<$18)|(Two_Player_Items_Mode&$00FFFFFF) ; Op__es do modo 2 Player
0000587C C9FF FF84                                  dc.l    ($C9<<$18)|(Sound_Test_Sound&$00FFFFFF)      ; Intervalo do Sound Test
00005880                            ;-------------------------------------------------------------------------------
00005880                            Offset_0x005880:
00005880 6100 0000                                  bsr     Offset_0x005962
00005884 7200                                       moveq   #$00, D1
00005886 1238 FF8C                                  move.b  (Options_Menu_Cursor).w, D1                  ; $FFFFFF8C
0000588A E749                                       lsl.w   #$03, D1
0000588C 47F9 0000 0000                             lea     (Menu_Options_Idx), A3                 ; Offset_0x0059B4
00005892 47F3 1000                                  lea     $00(A3, D1), A3
00005896 303C 6000                                  move.w  #$6000, D0
0000589A 45F9 FFFF 0030                             lea     (M68K_RAM_Start+$0030), A2                   ; $FFFF0030
000058A0 225B                                       move.l  (A3)+, A1
000058A2 6100 FE18                                  bsr     Offset_0x0056BC
000058A6 45F9 FFFF 00B6                             lea     (M68K_RAM_Start+$00B6), A2                   ; $FFFF00B6
000058AC 7200                                       moveq   #$00, D1
000058AE 0C38 0002 FF8C                             cmpi.b  #$02, (Options_Menu_Cursor).w                ; $FFFFFF8C
000058B4 6700                                       beq.s   Offset_0x0058C8
000058B6 1238 FF8C                                  move.b  (Options_Menu_Cursor).w, D1                  ; $FFFFFF8C
000058BA E549                                       lsl.w   #$02, D1
000058BC 43FA FFB6                                  lea     Menu_Options_Boundaries(PC), A1        ; Offset_0x005874
000058C0 2271 1000                                  move.l  $00(A1, D1), A1
000058C4 3211                                       move.w  (A1), D1
000058C6 E549                                       lsl.w   #$02, D1
000058C8                            Offset_0x0058C8:
000058C8 2274 1000                                  move.l  $00(A4, D1), A1
000058CC 6100 FDEE                                  bsr     Offset_0x0056BC
000058D0 0C38 0002 FF8C                             cmpi.b  #$02, (Options_Menu_Cursor).w                ; $FFFFFF8C
000058D6 6600                                       bne.s   Offset_0x0058E2
000058D8 45F9 FFFF 00C2                             lea     (M68K_RAM_Start+$00C2), A2                   ; $FFFF00C2
000058DE 6100 0000                                  bsr     Offset_0x005990
000058E2                            Offset_0x0058E2:
000058E2 43F9 FFFF 0000                             lea     (M68K_RAM_Start), A1                         ; $FFFF0000
000058E8 201B                                       move.l  (A3)+, D0
000058EA 7215                                       moveq   #$15, D1
000058EC 7407                                       moveq   #$07, D2
000058EE 6000 B9CC                                  bra     ShowVDPGraphics                        ; Offset_0x0012BC
000058F2                            ;-------------------------------------------------------------------------------
000058F2                            Offset_0x0058F2:
000058F2 6100 0000                                  bsr     Offset_0x005962
000058F6 7200                                       moveq   #$00, D1
000058F8 1238 FF8C                                  move.b  (Options_Menu_Cursor).w, D1                  ; $FFFFFF8C
000058FC E749                                       lsl.w   #$03, D1
000058FE 47F9 0000 0000                             lea     (Menu_Options_Idx), A3                 ; Offset_0x0059B4
00005904 47F3 1000                                  lea     $00(A3, D1), A3
00005908 7000                                       moveq   #$00, D0
0000590A 45F9 FFFF 0190                             lea     (M68K_RAM_Start+$0190), A2                   ; $FFFF0190
00005910 225B                                       move.l  (A3)+, A1
00005912 6100 FDA8                                  bsr     Offset_0x0056BC
00005916 45F9 FFFF 0216                             lea     (M68K_RAM_Start+$0216), A2                   ; $FFFF0216
0000591C 7200                                       moveq   #$00, D1
0000591E 0C38 0002 FF8C                             cmpi.b  #$02, (Options_Menu_Cursor).w                ; $FFFFFF8C
00005924 6700                                       beq.s   Offset_0x005938
00005926 1238 FF8C                                  move.b  (Options_Menu_Cursor).w, D1                  ; $FFFFFF8C
0000592A E549                                       lsl.w   #$02, D1
0000592C 43FA FF46                                  lea     Menu_Options_Boundaries(PC), A1        ; Offset_0x005874
00005930 2271 1000                                  move.l  $00(A1, D1), A1
00005934 3211                                       move.w  (A1), D1
00005936 E549                                       lsl.w   #$02, D1
00005938                            Offset_0x005938:
00005938 2274 1000                                  move.l  $00(A4, D1), A1
0000593C 6100 FD7E                                  bsr     Offset_0x0056BC
00005940 0C38 0002 FF8C                             cmpi.b  #$02, (Options_Menu_Cursor).w                ; $FFFFFF8C
00005946 6600                                       bne.s   Offset_0x005952
00005948 45F9 FFFF 0222                             lea     ($FFFF0222), A2
0000594E 6100 0000                                  bsr     Offset_0x005990
00005952                            Offset_0x005952:
00005952 43F9 FFFF 0160                             lea     (M68K_RAM_Start+$0160), A1                   ; $FFFF0160
00005958 201B                                       move.l  (A3)+, D0
0000595A 7215                                       moveq   #$15, D1
0000595C 7407                                       moveq   #$07, D2
0000595E 6000 B95C                                  bra     ShowVDPGraphics                        ; Offset_0x0012BC
00005962                            Offset_0x005962:
00005962 49F9 0000 0000                             lea     (Map_Player_Select_Jap_Idx), A4        ; Offset_0x0059CC
00005968 4A38 FFF8                                  tst.b   (Hardware_Id).w                              ; $FFFFFFF8
0000596C 6A00                                       bpl.s   Offset_0x005974
0000596E 49F9 0000 0000                             lea     (Map_Player_Select_Idx), A4            ; Offset_0x0059D8
00005974                            Offset_0x005974:
00005974 4A38 FF8C                                  tst.b   (Options_Menu_Cursor).w                      ; $FFFFFF8C
00005978 6700                                       beq.s   Offset_0x005980
0000597A 49F9 0000 0000                             lea     (Map_Vs_Mode_Items_Idx), A4            ; Offset_0x0059E4
00005980                            Offset_0x005980:
00005980 0C38 0002 FF8C                             cmpi.b  #$02, (Options_Menu_Cursor).w                ; $FFFFFF8C
00005986 6600                                       bne.s   Offset_0x00598E
00005988 49F9 0000 0000                             lea     (Map_Sound_Test_Idx), A4               ; Offset_0x0059EC
0000598E                            Offset_0x00598E:
0000598E 4E75                                       rts
00005990                            Offset_0x005990:
00005990 3238 FF84                                  move.w  (Sound_Test_Sound).w, D1                     ; $FFFFFF84
00005994 1401                                       move.b  D1, D2
00005996 E809                                       lsr.b   #$04, D1
00005998 6100                                       bsr.s   Offset_0x00599C
0000599A 1202                                       move.b  D2, D1
0000599C                            Offset_0x00599C:
0000599C 0241 000F                                  andi.w  #$000F, D1
000059A0 0C01 000A                                  cmpi.b  #$0A, D1
000059A4 6500                                       bcs.s   Offset_0x0059AA
000059A6 0601 0004                                  addi.b  #$04, D1
000059AA                            Offset_0x0059AA:
000059AA 0601 0010                                  addi.b  #$10, D1
000059AE 1001                                       move.b  D1, D0
000059B0 34C0                                       move.w  D0, (A2)+
000059B2 4E75                                       rts    
000059B4                            ;-------------------------------------------------------------------------------                
000059B4                            Menu_Options_Idx:                                              ; Offset_0x0059B4
000059B4 0000 0000                                  dc.l    Map_Player_Select_Caption              ; Offset_0x006058
000059B8 4192 0003                                  dc.w    $4192, $0003
000059BC 0000 0000                                  dc.l    Map_Vs_Mode_Items_Caption              ; Offset_0x0060BA       
000059C0 4592 0003                                  dc.w    $4592, $0003
000059C4 0000 0000                                  dc.l    Map_Sound_Test_Caption                 ; Offset_0x0060EC   
000059C8 4992 0003                                  dc.w    $4992, $0003  
000059CC                            ;-------------------------------------------------------------------------------                
000059CC                            Map_Player_Select_Jap_Idx:                                     ; Offset_0x0059CC 
000059CC 0000 0000                                  dc.l    Map_Sonic_And_Miles                    ; Offset_0x00606A                 
000059D0 0000 0000                                  dc.l    Map_Sonic_Alone                        ; Offset_0x00608A  
000059D4 0000 0000                                  dc.l    Map_Miles_Alone                        ; Offset_0x00609A    
000059D8                            ;-------------------------------------------------------------------------------                
000059D8                            Map_Player_Select_Idx:                                         ; Offset_0x0059D8  
000059D8 0000 0000                                  dc.l    Map_Sonic_And_Tails                    ; Offset_0x00607A 
000059DC 0000 0000                                  dc.l    Map_Sonic_Alone                        ; Offset_0x00608A
000059E0 0000 0000                                  dc.l    Map_Tails_Alone                        ; Offset_0x0060AA  
000059E4                            ;-------------------------------------------------------------------------------                
000059E4                            Map_Vs_Mode_Items_Idx:                                         ; Offset_0x0059E4  
000059E4 0000 0000                                  dc.l    Map_All_Kinds_Items                    ; Offset_0x0060CC  
000059E8 0000 0000                                  dc.l    Map_Teleport_Only                      ; Offset_0x0060DC  
000059EC                            ;-------------------------------------------------------------------------------                
000059EC                            Map_Sound_Test_Idx:                                            ; Offset_0x0059EC          
000059EC 0000 0000                                  dc.l    Map_Sound_Test_Sound                   ; Offset_0x0060FE   
000059F0                            ;-------------------------------------------------------------------------------
000059F0                            Level_Select_Menu:                                             ; Offset_0x0059F0
000059F0 43F9 FFFF 0000                             lea     (M68K_RAM_Start), A1                         ; $FFFF0000
000059F6 41F9 0000 0000                             lea     (S2_Menu_Level_Select_Text), A0        ; Offset_0x00648E
000059FC 303C 0000                                  move.w  #$0000, D0
00005A00 6100 BC88                                  bsr     EnigmaDec                              ; Offset_0x00168A
00005A04 47F9 FFFF 0000                             lea     (M68K_RAM_Start), A3                         ; $FFFF0000
00005A0A 323C 031F                                  move.w  #$031F, D1
00005A0E                            Offset_0x005A0E:
00005A0E 36FC 0000                                  move.w  #$0000, (A3)+
00005A12 51C9 FFFA                                  dbra    D1, Offset_0x005A0E
00005A16 47F9 FFFF 0696                             lea     (M68K_RAM_Start+$0696), A3                   ; $FFFF0696
00005A1C 323C 000F                                  move.w  #$000F, D1
00005A20                            Offset_0x005A20:
00005A20 36FC 0000                                  move.w  #$0000, (A3)+
00005A24 51C9 FFFA                                  dbra    D1, Offset_0x005A20
00005A28 47F9 FFFF 0000                             lea     (M68K_RAM_Start), A3                         ; $FFFF0000
00005A2E 43F9 0000 0000                             lea     (Menu_Level_Select_Text), A1           ; Offset_0x00618A
00005A34 4BF9 0000 0000                             lea     (Menu_Text_Positions), A5              ; Offset_0x005FB8
00005A3A 7000                                       moveq   #$00, D0
00005A3C 323C 000E                                  move.w  #$000E, D1
00005A40                            Offset_0x005A40:
00005A40 361D                                       move.w  (A5)+, D3
00005A42 45F3 3000                                  lea     $00(A3, D3), A2
00005A46 7400                                       moveq   #$00, D2
00005A48 1419                                       move.b  (A1)+, D2
00005A4A 3602                                       move.w  D2, D3
00005A4C                            Offset_0x005A4C:
00005A4C 1019                                       move.b  (A1)+, D0
00005A4E 34C0                                       move.w  D0, (A2)+
00005A50 51CA FFFA                                  dbra    D2, Offset_0x005A4C
00005A54 343C 000D                                  move.w  #$000D, D2
00005A58 9443                                       sub.w   D3, D2
00005A5A 6500                                       bcs.s   Offset_0x005A64
00005A5C                            Offset_0x005A5C:
00005A5C 34FC 0000                                  move.w  #$0000, (A2)+
00005A60 51CA FFFA                                  dbra    D2, Offset_0x005A5C
00005A64                            Offset_0x005A64:
00005A64 34BC 0011                                  move.w  #$0011, (A2)
00005A68 45EA 0050                                  lea     $0050(A2), A2
00005A6C 34BC 0012                                  move.w  #$0012, (A2)
00005A70 51C9 FFCE                                  dbra    D1, Offset_0x005A40
00005A74 34BC 0000                                  move.w  #$0000, (A2)
00005A78 45F9 0000 FFB0                             lea     ($FFB0).l, A2
00005A7E 34BC 001A                                  move.w  #$001A, (A2)
00005A82 43F9 FFFF 0000                             lea     (M68K_RAM_Start), A1                         ; $FFFF0000
00005A88 203C 4000 0003                             move.l  #$40000003, D0
00005A8E 7227                                       moveq   #$27, D1
00005A90 741B                                       moveq   #$1B, D2
00005A92 4EB9 0000 12BC                             jsr     (ShowVDPGraphics)                      ; Offset_0x0012BC
00005A98 7600                                       moveq   #$00, D3
00005A9A 6100 0000                                  bsr     Offset_0x005EA6
00005A9E 43F9 FFFF 08C0                             lea     (M68K_RAM_Start+$08C0), A1                   ; $FFFF08C0
00005AA4 41F9 0000 0000                             lea     (Menu_Icons_Mappings), A0              ; Offset_0x0065E2
00005AAA 303C 0090                                  move.w  #$0090, D0
00005AAE 6100 BBDA                                  bsr     EnigmaDec                              ; Offset_0x00168A
00005AB2 6100 0000                                  bsr     Offset_0x005ED4
00005AB6 4278 FF08                                  clr.w   (Player_Selected_Flag).w                     ; $FFFFFF08
00005ABA 4278 FF02                                  clr.w   (Results_Screen_2P).w                        ; $FFFFFF02
00005ABE 4238 F711                                  clr.b   (Title_Card_Flag).w                          ; $FFFFF711
00005AC2 4278 F7F0                                  clr.w   (Animate_Counters).w                         ; $FFFFF7F0
00005AC6 45F9 0000 0000                             lea     (Menu_Animate), A2                     ; Offset_0x006614
00005ACC 4EB9 0000 0000                             jsr     (Dynamic_Normal)                       ; Offset_0x01F2DE
00005AD2 7004                                       moveq   #$04, D0
00005AD4 6100 D4C8                                  bsr     PalLoad1                               ; Offset_0x002F9E
00005AD8 43F8 ED40                                  lea     (Palette_Row_2_Offset).w, A1                 ; $FFFFED40
00005ADC 45F8 EDC0                                  lea     (Palette_Data_Target+$40).w, A2              ; $FFFFEDC0
00005AE0 7207                                       moveq   #$07, D1
00005AE2                            Offset_0x005AE0:
00005AE2 24D1                                       move.l  (A1), (A2)+
00005AE4 4299                                       clr.l   (A1)+
00005AE6 51C9 FFFA                                  dbra    D1, Offset_0x005AE0
00005AEA 31FC 0707 F614                             move.w  #$0707, (Demo_Timer).w                       ; $FFFFF614
00005AF0 4278 FFD8                                  clr.w   (Two_Player_Flag).w                          ; $FFFFFFD8
00005AF4 42B8 EE78                                  clr.l   (Camera_X).w                                 ; $FFFFEE78
00005AF8 42B8 EE7C                                  clr.l   (Camera_Y).w                                 ; $FFFFEE7C
00005AFC 31FC 0101 FFD0                             move.w  #$0101, (Level_Select_Flag).w                ; $FFFFFFD0
00005B02 4E71                                       nop
00005B04 4E71                                       nop
00005B06 4E71                                       nop
00005B08 4278 FFD4                                  clr.w   (Secret_Code_Input_Entries).w                ; $FFFFFFD4
00005B0C 4278 FFD6                                  clr.w   (Secret_Code_Input_Entries_2).w              ; $FFFFFFD6
00005B10 11FC 0016 F62A                             move.b  #$16, (VBlank_Index).w                       ; $FFFFF62A
00005B16 6100 BFD6                                  bsr     Wait_For_VSync                         ; Offset_0x001AEE
00005B1A 3038 F60E                                  move.w  (VDP_Register_1_Command).w, D0               ; $FFFFF60E
00005B1E 0000 0040                                  ori.b   #$40, D0
00005B22 33C0 00C0 0004                             move.w  D0, (VDP_Control_Port)                       ; $00C00004
00005B28 6100 D1F6                                  bsr     Pal_FadeTo                             ; Offset_0x002D20
00005B2C                            Offset_0x005B2A:
00005B2C 11FC 0016 F62A                             move.b  #$16, (VBlank_Index).w                       ; $FFFFF62A
00005B32 6100 BFBA                                  bsr     Wait_For_VSync                         ; Offset_0x001AEE
00005B36 46FC 2700                                  move    #$2700, SR
00005B3A 7600                                       moveq   #$00, D3
00005B3C 6100 0000                                  bsr     Offset_0x005DE6
00005B40 6100 0000                                  bsr     Level_Select_Controls                  ; Offset_0x005CBC
00005B44 363C 6000                                  move.w  #$6000, D3
00005B48 6100 0000                                  bsr     Offset_0x005DE6
00005B4C 6100 0000                                  bsr     Offset_0x005ED4
00005B50 46FC 2300                                  move    #$2300, SR
00005B54 45F9 0000 0000                             lea     (Menu_Animate), A2                     ; Offset_0x006614
00005B5A 4EB9 0000 0000                             jsr     (Dynamic_Normal)                       ; Offset_0x01F2DE
00005B60 1038 F605                                  move.b  (Control_Ports_Buffer_Data+$0001).w, D0      ; $FFFFF605
00005B64 8038 F607                                  or.b    (Control_Ports_Buffer_Data+$0003).w, D0      ; $FFFFF607
00005B68 0200 0080                                  andi.b  #$80, D0
00005B6C 6600                                       bne.s   Offset_0x005B70
00005B6E 6000 FFBC                                  bra     Offset_0x005B2A
00005B72                            Offset_0x005B70:
00005B72 3038 FF82                                  move.w  (Level_Select_Menu_Cursor).w, D0             ; $FFFFFF82
00005B76 D040                                       add.w   D0, D0
00005B78 303B 0000                                  move.w  Menu_Level_Select_Array(PC, D0), D0    ; Offset_0x005BF2
00005B7C 6B00 0000                                  bmi     Menu_Game_Reset                        ; Offset_0x005C2C
00005B80 0C40 5555                                  cmpi.w  #Disabled_Level, D0                              ; $5555
00005B84 6700 FFA6                                  beq     Offset_0x005B2A
00005B88 0C40 4001                                  cmpi.w  #SK_Special_Stage, D0                            ; $4001
00005B8C 6700 0000                                  beq     Menu_Run_SK_Special_Stage              ; Offset_0x005B9E
00005B90 0C40 4000                                  cmpi.w  #S3_Special_Stage, D0                            ; $4000    
00005B94 6600 0000                                  bne     Menu_Load_Level                        ; Offset_0x005C34
00005B98 11FC 002C F600                             move.b  #gm_S3_Special_Stage, (Game_Mode).w     ; $2C, $FFFFF600
00005B9E 4E75                                       rts
00005BA0                            Menu_Run_SK_Special_Stage:                                     ; Offset_0x005B9E
00005BA0 11FC 0030 F600                             move.b  #gm_SK_Special_Stage, (Game_Mode).w     ; $30, $FFFFF600
00005BA6 4E75                                       rts  
00005BA8                            ;-------------------------------------------------------------------------------
00005BA8                            Menu_Run_S2_Special_Stage:                                     ; Offset_0x005BA6
00005BA8 11FC 0010 F600                             move.b  #gm_S2_SpecialStage, (Game_Mode).w      ; $10, $FFFFF600
00005BAE 4278 FE10                                  clr.w   (Level_Id).w                                 ; $FFFFFE10
00005BB2 4278 EE54                                  clr.w   (Level_Id_2).w                               ; $FFFFEE54
00005BB6 11FC 0003 FE12                             move.b  #$03, (Life_Count).w                         ; $FFFFFE12
00005BBC 11FC 0003 FEC6                             move.b  #$03, (Life_Count_P2).w                      ; $FFFFFEC6
00005BC2 7000                                       moveq   #$00, D0
00005BC4 31C0 FE20                                  move.w  D0, (Ring_Count_Address).w                   ; $FFFFFE20
00005BC8 21C0 FE22                                  move.l  D0, (Time_Count_Address).w                   ; $FFFFFE22
00005BCC 21C0 FE26                                  move.l  D0, (Score_Count_Address).w                  ; $FFFFFE26
00005BD0 31C0 FED0                                  move.w  D0, (Ring_Count_Address_P2).w                ; $FFFFFED0
00005BD4 21C0 FED2                                  move.l  D0, (Time_Count_Address_P2).w                ; $FFFFFED2
00005BD8 21C0 FED6                                  move.l  D0, (Score_Count_Address_P2).w               ; $FFFFFED6
00005BDC 21FC 0000 1388 FFC0                        move.l  #$00001388, (Next_Extra_Life_Score).w        ; $FFFFFFC0
00005BE4 21FC 0000 1388 FFC4                        move.l  #$00001388, (Next_Extra_Life_Score_P2).w     ; $FFFFFFC4
00005BEC 31F8 FF0A FF08                             move.w  (Player_Select_Flag).w, (Player_Selected_Flag).w ; $FFFFFF0A
00005BF2 4E75                                       rts      
00005BF4                            ;-------------------------------------------------------------------------------
00005BF4                            Menu_Level_Select_Array:                                       ; Offset_0x005BF2
00005BF4 0000                                       dc.w    AIz_Act_1                                        ; $0000
00005BF6 0001                                       dc.w    AIz_Act_2                                        ; $0001
00005BF8 0100                                       dc.w    Hz_Act_1                                         ; $0100
00005BFA 0101                                       dc.w    Hz_Act_2                                         ; $0101
00005BFC 0200                                       dc.w    MGz_Act_1                                        ; $0200
00005BFE 0201                                       dc.w    MGz_Act_2                                        ; $0201
00005C00 0300                                       dc.w    CNz_Act_1                                        ; $0300
00005C02 0301                                       dc.w    CNz_Act_2                                        ; $0301
00005C04 0400                                       dc.w    FBz_Act_1                                        ; $0400
00005C06 0401                                       dc.w    FBz_Act_2                                        ; $0401
00005C08 0500                                       dc.w    Iz_Act_1                                         ; $0500
00005C0A 0501                                       dc.w    Iz_Act_2                                         ; $0501
00005C0C 0600                                       dc.w    LBz_Act_1                                        ; $0600
00005C0E 0601                                       dc.w    LBz_Act_2                                        ; $0601
00005C10 5555                                       dc.w    Disabled_Level                                   ; $5555
00005C12 5555                                       dc.w    Disabled_Level                                   ; $5555
00005C14 5555                                       dc.w    Disabled_Level                                   ; $5555
00005C16 5555                                       dc.w    Disabled_Level                                   ; $5555
00005C18 0E00                                       dc.w    Alz_Act_1                                        ; $0E00
00005C1A 0F00                                       dc.w    BPz_Act_1                                        ; $0F00
00005C1C 1000                                       dc.w    DPz_Act_1                                        ; $1000
00005C1E 1100                                       dc.w    CGz_Act_1                                        ; $1100
00005C20 1200                                       dc.w    EMz_Act_1                                        ; $1200
00005C22 1300                                       dc.w    GM_BS_Act_1                                      ; $1300
00005C24 1400                                       dc.w    GS_BS_Act_1                                      ; $1400
00005C26 1500                                       dc.w    SM_BS_Act_1                                      ; $1500
00005C28 4000                                       dc.w    S3_Special_Stage                                 ; $4000
00005C2A 4001                                       dc.w    SK_Special_Stage                                 ; $4001
00005C2C FFFF                                       dc.w    Reset_Game                                       ; $FFFF
00005C2E                            ;------------------------------------------------------------------------------- 
00005C2E                            Menu_Game_Reset:                                               ; Offset_0x005C2C
00005C2E 11FC 0000 F600                             move.b  #gm_SEGALogo, (Game_Mode).w             ; $00, $FFFFF600
00005C34 4E75                                       rts                    
00005C36                            ;------------------------------------------------------------------------------- 
00005C36                            Menu_Load_Level:                                               ; Offset_0x005C34
00005C36 0240 3FFF                                  andi.w  #$3FFF, D0
00005C3A 31C0 FE10                                  move.w  D0, (Level_Id).w                             ; $FFFFFE10
00005C3E 31C0 EE54                                  move.w  D0, (Level_Id_2).w                           ; $FFFFEE54
00005C42 0C40 0001                                  cmpi.w  #AIz_Act_2, D0                                   ; $0001
00005C46 6700                                       beq.s   Offset_0x005C4C
00005C48 0C40 0501                                  cmpi.w  #Iz_Act_2, D0                                    ; $0501
00005C4C 6600                                       bne.s   Offset_0x005C50
00005C4E                            Offset_0x005C4C:
00005C4E 4238 EE55                                  clr.b   (Act_Id_2).w                                 ; $FFFFEE55
00005C52                            Offset_0x005C50:
00005C52 11FC 000C F600                             move.b  #gm_PlayMode, (Game_Mode).w             ; $0C, $FFFFF600
00005C58 11FC 0003 FE12                             move.b  #$03, (Life_Count).w                         ; $FFFFFE12
00005C5E 11FC 0003 FEC6                             move.b  #$03, (Life_Count_P2).w                      ; $FFFFFEC6
00005C64 7000                                       moveq   #$00, D0
00005C66 31C0 FE20                                  move.w  D0, (Ring_Count_Address).w                   ; $FFFFFE20
00005C6A 21C0 FE22                                  move.l  D0, (Time_Count_Address).w                   ; $FFFFFE22
00005C6E 21C0 FE26                                  move.l  D0, (Score_Count_Address).w                  ; $FFFFFE26
00005C72 31C0 FED0                                  move.w  D0, (Ring_Count_Address_P2).w                ; $FFFFFED0
00005C76 21C0 FED2                                  move.l  D0, (Time_Count_Address_P2).w                ; $FFFFFED2
00005C7A 21C0 FED6                                  move.l  D0, (Score_Count_Address_P2).w               ; $FFFFFED6
00005C7E 11C0 FE18                                  move.b  D0, (Continue_Count).w                       ; $FFFFFE18
00005C82 21FC 0000 1388 FFC0                        move.l  #$00001388, (Next_Extra_Life_Score).w        ; $FFFFFFC0
00005C8A 21FC 0000 1388 FFC4                        move.l  #$00001388, (Next_Extra_Life_Score_P2).w     ; $FFFFFFC4
00005C92 103C 00D0                                  move.b  #Special_Stage_Entry_Sfx, D0                       ; $D0
00005C96 4EB9 0000 1176                             jsr     (Play_Music)                           ; Offset_0x001176
00005C9C 7000                                       moveq   #$00, D0
00005C9E 31C0 FF8A                                  move.w  D0, (Two_Player_Flag_2).w                    ; $FFFFFF8A
00005CA2 31C0 FFD8                                  move.w  D0, (Two_Player_Flag).w                      ; $FFFFFFD8
00005CA6 0C38 000E FE10                             cmpi.b  #ALz_Id, (Level_Id).w                   ; $0E, $FFFFFE10
00005CAC 6500                                       bcs.s   Offset_0x005CBA
00005CAE 0C38 0013 FE10                             cmpi.b  #GM_BS_Id, (Level_Id).w                 ; $13, $FFFFFE10
00005CB4 6400                                       bcc.s   Offset_0x005CBA
00005CB6 31FC 0001 FFD8                             move.w  #$0001, (Two_Player_Flag).w                  ; $FFFFFFD8
00005CBC                            Offset_0x005CBA:
00005CBC 4E75                                       rts   
00005CBE                            ;-------------------------------------------------------------------------------
00005CBE                            Level_Select_Controls:                                         ; Offset_0x005CBC
00005CBE 1238 F605                                  move.b  (Control_Ports_Buffer_Data+$0001).w, D1      ; $FFFFF605
00005CC2 0201 0003                                  andi.b  #$03, D1
00005CC6 6600                                       bne.s   Offset_0x005CCC
00005CC8 5378 FF80                                  subq.w  #$01, (Level_Select_Hold_Timer).w            ; $FFFFFF80
00005CCC 6A00                                       bpl.s   Offset_0x005D02
00005CCE                            Offset_0x005CCC:
00005CCE 31FC 000B FF80                             move.w  #$000B, (Level_Select_Hold_Timer).w          ; $FFFFFF80
00005CD4 1238 F604                                  move.b  (Control_Ports_Buffer_Data).w, D1            ; $FFFFF604
00005CD8 0201 0003                                  andi.b  #$03, D1
00005CDC 6700                                       beq.s   Offset_0x005D02
00005CDE 3038 FF82                                  move.w  (Level_Select_Menu_Cursor).w, D0             ; $FFFFFF82
00005CE2 0801 0000                                  btst    #$00, D1
00005CE6 6700                                       beq.s   Offset_0x005CEC
00005CE8 5340                                       subq.w  #$01, D0
00005CEA 6400                                       bcc.s   Offset_0x005CEC
00005CEC 701C                                       moveq   #$1C, D0
00005CEE                            Offset_0x005CEC:
00005CEE 0801 0001                                  btst    #$01, D1
00005CF2 6700                                       beq.s   Offset_0x005CFC
00005CF4 5240                                       addq.w  #$01, D0
00005CF6 0C40 001D                                  cmpi.w  #$001D, D0
00005CFA 6500                                       bcs.s   Offset_0x005CFC
00005CFC 7000                                       moveq   #$00, D0
00005CFE                            Offset_0x005CFC:
00005CFE 31C0 FF82                                  move.w  D0, (Level_Select_Menu_Cursor).w             ; $FFFFFF82
00005D02 4E75                                       rts
00005D04                            Offset_0x005D02:
00005D04 0C78 001C FF82                             cmpi.w  #$001C, (Level_Select_Menu_Cursor).w         ; $FFFFFF82
00005D0A 6600                                       bne.s   Offset_0x005D78
00005D0C 3038 FF84                                  move.w  (Sound_Test_Sound).w, D0                     ; $FFFFFF84
00005D10 1238 F605                                  move.b  (Control_Ports_Buffer_Data+$0001).w, D1      ; $FFFFF605
00005D14 0801 0002                                  btst    #$02, D1
00005D18 6700                                       beq.s   Offset_0x005D1E
00005D1A 5300                                       subq.b  #$01, D0
00005D1C 6400                                       bcc.s   Offset_0x005D1E
00005D1E 7000                                       moveq   #$00, D0
00005D20                            Offset_0x005D1E:
00005D20 0801 0003                                  btst    #$03, D1
00005D24 6700                                       beq.s   Offset_0x005D2E
00005D26 5200                                       addq.b  #$01, D0
00005D28 0C40 0100                                  cmpi.w  #$0100, D0
00005D2C 6500                                       bcs.s   Offset_0x005D2E
00005D2E 7000                                       moveq   #$00, D0
00005D30                            Offset_0x005D2E:
00005D30 0801 0006                                  btst    #$06, D1
00005D34 6700                                       beq.s   Offset_0x005D3C
00005D36 0600 0010                                  addi.b  #$10, D0
00005D3A 0200 00FF                                  andi.b  #$FF, D0
00005D3E                            Offset_0x005D3C:
00005D3E 31C0 FF84                                  move.w  D0, (Sound_Test_Sound).w                     ; $FFFFFF84
00005D42 0801 0005                                  btst    #$05, D1
00005D46 6700                                       beq.s   Offset_0x005D66
00005D48 3038 FF84                                  move.w  (Sound_Test_Sound).w, D0                     ; $FFFFFF84
00005D4C 4EB9 0000 1176                             jsr     (Play_Music)                           ; Offset_0x001176
00005D52 41F9 0000 0000                             lea     (Code_Debug_Mode), A0                  ; Offset_0x00604E
00005D58 45F9 0000 0000                             lea     (Code_All_Emeralds), A2                ; Offset_0x006053
00005D5E 43F8 FFD2                                  lea     (Debug_Mode_Flag).w, A1                      ; $FFFFFFD2
00005D62 7401                                       moveq   #$01, D2
00005D64 6000 0000                                  bra     Menu_Check_Secret_Codes                ; Offset_0x005FD8
00005D68                            Offset_0x005D66:
00005D68 0801 0004                                  btst    #$04, D1
00005D6C 6700                                       beq.s   Offset_0x005D76
00005D6E 303C 00D3                                  move.w  #Error_Sfx, D0                                   ; $00D3
00005D72 4EB9 0000 1176                             jsr     (Play_Music)                           ; Offset_0x001176
00005D78                            Offset_0x005D76:
00005D78 4E75                                       rts
00005D7A                            Offset_0x005D78:
00005D7A 1238 F605                                  move.b  (Control_Ports_Buffer_Data+$0001).w, D1      ; $FFFFF605
00005D7E 0201 000C                                  andi.b  #$0C, D1
00005D82 6700                                       beq.s   Offset_0x005D8E
00005D84 3038 FF82                                  move.w  (Level_Select_Menu_Cursor).w, D0             ; $FFFFFF82
00005D88 103B 0000                                  move.b  Menu_Left_Right_Select(PC, D0), D0     ; Offset_0x005D92
00005D8C 31C0 FF82                                  move.w  D0, (Level_Select_Menu_Cursor).w             ; $FFFFFF82
00005D90                            Offset_0x005D8E:
00005D90 6000                                       bra.s   Offset_0x005DB0  
00005D92 4E75                                       rts
00005D94                            ;-------------------------------------------------------------------------------
00005D94                            Menu_Left_Right_Select:                                        ; Offset_0x005D92
00005D94 1213 1415 1617 1819                        dc.b    $12, $13, $14, $15, $16, $17, $18, $19
00005D9C 1A1B 1C1C 1C1C 1C1C                        dc.b    $1A, $1B, $1C, $1C, $1C, $1C, $1C, $1C
00005DA4 1C1C 0001 0203 0405                        dc.b    $1C, $1C, $00, $01, $02, $03, $04, $05
00005DAC 0607 0809 0A0B                             dc.b    $06, $07, $08, $09, $0A, $0B   
00005DB2                            ;-------------------------------------------------------------------------------
00005DB2                            Offset_0x005DB0:
00005DB2 0838 0005 F605                             btst    #$05, (Control_Ports_Buffer_Data+$0001).w    ; $FFFFF605
00005DB8 6700                                       beq.s   Offset_0x005DCA
00005DBA 5238 FFDA                                  addq.b  #$01, (Menu_Player_One_Cursor).w             ; $FFFFFFDA
00005DBE 0C38 0003 FFDA                             cmpi.b  #$03, (Menu_Player_One_Cursor).w             ; $FFFFFFDA
00005DC4 6500                                       bcs.s   Offset_0x005DCA
00005DC6 11FC 0000 FFDA                             move.b  #$00, (Menu_Player_One_Cursor).w             ; $FFFFFFDA
00005DCC                            Offset_0x005DCA:
00005DCC 0838 0005 F607                             btst    #$05, (Control_Ports_Buffer_Data+$0003).w    ; $FFFFF607
00005DD2 6700                                       beq.s   Offset_0x005DE4
00005DD4 5238 FFDB                                  addq.b  #$01, (Menu_Player_Two_Cursor).w             ; $FFFFFFDB
00005DD8 0C38 0003 FFDB                             cmpi.b  #$03, (Menu_Player_Two_Cursor).w             ; $FFFFFFDB
00005DDE 6500                                       bcs.s   Offset_0x005DE4
00005DE0 11FC 0000 FFDB                             move.b  #$00, (Menu_Player_Two_Cursor).w             ; $FFFFFFDB
00005DE6                            Offset_0x005DE4:
00005DE6 4E75                                       rts     
00005DE8                            ;-------------------------------------------------------------------------------
00005DE8                            Offset_0x005DE6:
00005DE8 49F9 FFFF 0000                             lea     (M68K_RAM_Start), A4                         ; $FFFF0000
00005DEE 4BF9 0000 0000                             lea     (Menu_Text_Highlight), A5              ; Offset_0x005F44
00005DF4 4DF9 00C0 0000                             lea     (VDP_Data_Port), A6                          ; $00C00000
00005DFA 7000                                       moveq   #$00, D0
00005DFC 3038 FF82                                  move.w  (Level_Select_Menu_Cursor).w, D0             ; $FFFFFF82
00005E00 E548                                       lsl.w   #$02, D0
00005E02 47F5 0000                                  lea     $00(A5, D0), A3
00005E06 7000                                       moveq   #$00, D0
00005E08 1013                                       move.b  (A3), D0
00005E0A C0FC 0050                                  mulu.w  #$0050, D0
00005E0E 7200                                       moveq   #$00, D1
00005E10 122B 0001                                  move.b  $0001(A3), D1
00005E14 D041                                       add.w   D1, D0
00005E16 43F4 0000                                  lea     $00(A4, D0), A1
00005E1A 7200                                       moveq   #$00, D1
00005E1C 1213                                       move.b  (A3), D1
00005E1E EF49                                       lsl.w   #$07, D1
00005E20 D22B 0001                                  add.b   $0001(A3), D1
00005E24 0641 C000                                  addi.w  #$C000, D1
00005E28 E589                                       lsl.l   #$02, D1
00005E2A E449                                       lsr.w   #$02, D1
00005E2C 0041 4000                                  ori.w   #$4000, D1
00005E30 4841                                       swap.w  D1
00005E32 2D41 0004                                  move.l  D1, $0004(A6)
00005E36 740E                                       moveq   #$0E, D2
00005E38                            Offset_0x005E36:
00005E38 3019                                       move.w  (A1)+, D0
00005E3A D043                                       add.w   D3, D0
00005E3C 3C80                                       move.w  D0, (A6)
00005E3E 51CA FFF8                                  dbra    D2, Offset_0x005E36
00005E42 544B                                       addq.w  #$02, A3
00005E44 7000                                       moveq   #$00, D0
00005E46 1013                                       move.b  (A3), D0
00005E48 6700                                       beq.s   Offset_0x005E7A
00005E4A C0FC 0050                                  mulu.w  #$0050, D0
00005E4E 7200                                       moveq   #$00, D1
00005E50 122B 0001                                  move.b  $0001(A3), D1
00005E54 D041                                       add.w   D1, D0
00005E56 43F4 0000                                  lea     $00(A4, D0), A1
00005E5A 7200                                       moveq   #$00, D1
00005E5C 1213                                       move.b  (A3), D1
00005E5E EF49                                       lsl.w   #$07, D1
00005E60 D22B 0001                                  add.b   $0001(A3), D1
00005E64 0641 C000                                  addi.w  #$C000, D1
00005E68 E589                                       lsl.l   #$02, D1
00005E6A E449                                       lsr.w   #$02, D1
00005E6C 0041 4000                                  ori.w   #$4000, D1
00005E70 4841                                       swap.w  D1
00005E72 2D41 0004                                  move.l  D1, $0004(A6)
00005E76 3019                                       move.w  (A1)+, D0
00005E78 D043                                       add.w   D3, D0
00005E7A 3C80                                       move.w  D0, (A6)
00005E7C                            Offset_0x005E7A:
00005E7C 0C78 001C FF82                             cmpi.w  #$001C, (Level_Select_Menu_Cursor).w         ; $FFFFFF82
00005E82 6600                                       bne.s   Offset_0x005E86
00005E84 6000 0000                                  bra     Offset_0x005EA6
00005E88                            Offset_0x005E86:
00005E88 23FC 41B8 0003 00C0 0004                   move.l  #$41B80003, (VDP_Control_Port)               ; $00C00004
00005E92 1038 FFDA                                  move.b  (Menu_Player_One_Cursor).w, D0               ; $FFFFFFDA
00005E96 6100                                       bsr.s   Offset_0x005EB4
00005E98 23FC 41C0 0003 00C0 0004                   move.l  #$41C00003, (VDP_Control_Port)               ; $00C00004
00005EA2 1038 FFDB                                  move.b  (Menu_Player_Two_Cursor).w, D0               ; $FFFFFFDB
00005EA6 6000                                       bra.s   Offset_0x005EB4
00005EA8                            Offset_0x005EA6:
00005EA8 23FC 4846 0003 00C0 0004                   move.l  #$48460003, (VDP_Control_Port)               ; $00C00004
00005EB2 3038 FF84                                  move.w  (Sound_Test_Sound).w, D0                     ; $FFFFFF84
00005EB6                            Offset_0x005EB4:
00005EB6 1400                                       move.b  D0, D2
00005EB8 E808                                       lsr.b   #$04, D0
00005EBA 6100                                       bsr.s   Offset_0x005EBC
00005EBC 1002                                       move.b  D2, D0
00005EBE                            Offset_0x005EBC:
00005EBE 0240 000F                                  andi.w  #$000F, D0
00005EC2 0C00 000A                                  cmpi.b  #$0A, D0
00005EC6 6500                                       bcs.s   Offset_0x005ECA
00005EC8 0600 0004                                  addi.b  #$04, D0
00005ECC                            Offset_0x005ECA:
00005ECC 0600 0010                                  addi.b  #$10, D0
00005ED0 D043                                       add.w   D3, D0
00005ED2 3C80                                       move.w  D0, (A6)
00005ED4 4E75                                       rts     
00005ED6                            ;-------------------------------------------------------------------------------
00005ED6                            Offset_0x005ED4:
00005ED6 3038 FF82                                  move.w  (Level_Select_Menu_Cursor).w, D0             ; $FFFFFF82
00005EDA 47F9 0000 0000                             lea     (Menu_Icon_List), A3                   ; Offset_0x005F26
00005EE0 47F3 0000                                  lea     $00(A3, D0), A3
00005EE4 43F9 FFFF 08C0                             lea     (M68K_RAM_Start+$08C0), A1                   ; $FFFF08C0
00005EEA 7000                                       moveq   #$00, D0
00005EEC 1013                                       move.b  (A3), D0
00005EEE E748                                       lsl.w   #$03, D0
00005EF0 3200                                       move.w  D0, D1
00005EF2 D040                                       add.w   D0, D0
00005EF4 D041                                       add.w   D1, D0
00005EF6 43F1 0000                                  lea     $00(A1, D0), A1
00005EFA 203C 4B36 0003                             move.l  #$4B360003, D0
00005F00 7203                                       moveq   #$03, D1
00005F02 7402                                       moveq   #$02, D2
00005F04 4EB9 0000 12BC                             jsr     (ShowVDPGraphics)                      ; Offset_0x0012BC
00005F0A 43F9 0000 0000                             lea     (Pal_Levels_Icons), A1                 ; Offset_0x006230
00005F10 7000                                       moveq   #$00, D0
00005F12 1013                                       move.b  (A3), D0
00005F14 EB48                                       lsl.w   #$05, D0
00005F16 43F1 0000                                  lea     $00(A1, D0), A1
00005F1A 45F8 ED40                                  lea     (Palette_Row_2_Offset).w, A2                 ; $FFFFED40
00005F1E 7207                                       moveq   #$07, D1
00005F20                            Offset_0x005F1E:
00005F20 24D9                                       move.l  (A1)+, (A2)+
00005F22 51C9 FFFC                                  dbra    D1, Offset_0x005F1E
00005F26 4E75                                       rts     
00005F28                            ;-------------------------------------------------------------------------------
00005F28                            Menu_Icon_List:                                                ; Offset_0x005F26
00005F28 0000 0707 0808 0606                        dc.b    $00, $00, $07, $07, $08, $08, $06, $06
00005F30 0202 0505 0404 0101                        dc.b    $02, $02, $05, $05, $04, $04, $01, $01
00005F38 0909 0A0A 0303 0B0B                        dc.b    $09, $09, $0A, $0A, $03, $03, $0B, $0B
00005F40 0B0B 0C0C 0E00                             dc.b    $0B, $0B, $0C, $0C, $0E, $00  
00005F46                            ;-------------------------------------------------------------------------------
00005F46                            Menu_Text_Highlight:                                           ; Offset_0x005F44
00005F46 0106 0124 0106 0224 0406+                  dc.w    $0106, $0124, $0106, $0224, $0406, $0424, $0406, $0524
00005F56 0706 0724 0706 0824 0A06+                  dc.w    $0706, $0724, $0706, $0824, $0A06, $0A24, $0A06, $0B24
00005F66 0D06 0D24 0D06 0E24 1006+                  dc.w    $0D06, $0D24, $0D06, $0E24, $1006, $1024, $1006, $1124
00005F76 1306 1324 1306 1424 1606+                  dc.w    $1306, $1324, $1306, $1424, $1606, $1624, $1606, $1724
00005F86 1906 1924 1906 1A24 012C+                  dc.w    $1906, $1924, $1906, $1A24, $012C, $014A, $012C, $024A
00005F96 042C 044A 042C 054A 072C+                  dc.w    $042C, $044A, $042C, $054A, $072C, $074A, $072C, $084A
00005FA6 0A2C 0A4A 0A2C 0B4A 0D2C+                  dc.w    $0A2C, $0A4A, $0A2C, $0B4A, $0D2C, $0D4A, $0D2C, $0E4A
00005FB6 102C 104A                                  dc.w    $102C, $104A 
00005FBA                            ;-------------------------------------------------------------------------------                
00005FBA                            Menu_Text_Positions:                                           ; Offset_0x005FB8
00005FBA 0056 0146 0236 0326 0416+                  dc.w    $0056, $0146, $0236, $0326, $0416, $0506, $05F6, $06E6
00005FCA 07D6 007C 016C 025C 034C+                  dc.w    $07D6, $007C, $016C, $025C, $034C, $043C, $052C, $061C 
00005FDA                            ;-------------------------------------------------------------------------------
00005FDA                            Menu_Check_Secret_Codes:                                       ; Offset_0x005FD8
00005FDA 3038 FFD4                                  move.w  (Secret_Code_Input_Entries).w, D0            ; $FFFFFFD4
00005FDE D0C0                                       adda.w  D0, A0
00005FE0 3038 FF84                                  move.w  (Sound_Test_Sound).w, D0                     ; $FFFFFF84
00005FE4 B010                                       cmp.b   (A0), D0
00005FE6 6600                                       bne.s   Offset_0x005FFC
00005FE8 5278 FFD4                                  addq.w  #$01, (Secret_Code_Input_Entries).w          ; $FFFFFFD4
00005FEC 4A28 0001                                  tst.b   $0001(A0)
00005FF0 6600                                       bne.s   Offset_0x006002
00005FF2 32BC 0101                                  move.w  #$0101, (A1)
00005FF6 7032                                       moveq   #Ring_Sfx, D0                                      ; $32
00005FF8 4EB9 0000 1176                             jsr     (Play_Music)                           ; Offset_0x001176
00005FFE                            Offset_0x005FFC:
00005FFE 31FC 0000 FFD4                             move.w  #$0000, (Secret_Code_Input_Entries).w        ; $FFFFFFD4
00006004                            Offset_0x006002:
00006004 3038 FFD6                                  move.w  (Secret_Code_Input_Entries_2).w, D0          ; $FFFFFFD6
00006008 D4C0                                       adda.w  D0, A2
0000600A 3038 FF84                                  move.w  (Sound_Test_Sound).w, D0                     ; $FFFFFF84
0000600E B012                                       cmp.b   (A2), D0
00006010 6600                                       bne.s   Offset_0x00603C
00006012 5278 FFD6                                  addq.w  #$01, (Secret_Code_Input_Entries_2).w        ; $FFFFFFD6
00006016 4A2A 0001                                  tst.b   $0001(A2)
0000601A 6600                                       bne.s   Offset_0x006042
0000601C 4A42                                       tst.w   D2
0000601E 6600                                       bne.s   Offset_0x00602E
00006020 11FC 000F FE18                             move.b  #$0F, (Continue_Count).w                     ; $FFFFFE18
00006026 7028                                       moveq   #Continue_Snd, D0                                  ; $28
00006028 4EB9 0000 1176                             jsr     (Play_Music)                           ; Offset_0x001176
0000602E 6000                                       bra.s   Offset_0x00603C
00006030                            Offset_0x00602E:
00006030 31FC 0007 FFB0                             move.w  #$0007, (SS_Completed_Flag).w                ; $FFFFFFB0
00006036 702B                                       moveq   #Got_Emerald_Snd, D0                               ; $2B
00006038 4EB9 0000 1176                             jsr     (Play_Music)                           ; Offset_0x001176
0000603E                            Offset_0x00603C:
0000603E 31FC 0000 FFD6                             move.w  #$0000, (Secret_Code_Input_Entries_2).w      ; $FFFFFFD6
00006044                            Offset_0x006042:
00006044 4E75                                       rts    
00006046                            ;-------------------------------------------------------------------------------                    
00006046                            S2_Code_Level_Select:                                          ; Offset_0x006044
00006046 1965 0917 00                               dc.b    $19, $65, $09, $17, $00  
0000604B                            ;-------------------------------------------------------------------------------                 
0000604B                            S2_Code_14_Continues:                                          ; Offset_0x006049
0000604B 0101 0204 00                               dc.b    $01, $01, $02, $04, $00    
00006050                            ;-------------------------------------------------------------------------------                  
00006050                            Code_Debug_Mode:                                               ; Offset_0x00604E
00006050 0103 0507 00                               dc.b    $01, $03, $05, $07, $00   
00006055                            ;-------------------------------------------------------------------------------                 
00006055                            Code_All_Emeralds:                                             ; Offset_0x006053
00006055 0204 0506 00                               dc.b    $02, $04, $05, $06, $00  
0000605A                            ;-------------------------------------------------------------------------------                  
0000605A                            Map_Player_Select_Caption:                                     ; Offset_0x006058
0000605A 10                                         dc.b    $10
0000605B 1A00 2D29 1E36 222F 0030+                  dc.b    _st,__,_P,_L,_A,_Y,_E,_R,__,_S,_E,_L,_E,_C,_T,__,_st                   
0000606C                            Map_Sonic_And_Miles:                                           ; Offset_0x00606A
0000606C 0E                                         dc.b    $0E
0000606D 302C 2B26 2000 1E2B 2100+                  dc.b    _S,_O,_N,_I,_C,__,_A,_N,_D,__,_M,_I,_L,_E,_S 
0000607C                            Map_Sonic_And_Tails:                                           ; Offset_0x00607A 
0000607C 0E                                         dc.b    $0E
0000607D 302C 2B26 2000 1E2B 2100+                  dc.b    _S,_O,_N,_I,_C,__,_A,_N,_D,__,_T,_A,_I,_L,_S   
0000608C                            Map_Sonic_Alone:                                               ; Offset_0x00608A
0000608C 0E                                         dc.b    $0E
0000608D 302C 2B26 2000 1E29 2C2B+                  dc.b    _S,_O,_N,_I,_C,__,_A,_L,_O,_N,_E,__,__,__,__
0000609C                            Map_Miles_Alone:                                               ; Offset_0x00609A
0000609C 0E                                         dc.b    $0E
0000609D 2A26 2922 3000 1E29 2C2B+                  dc.b    _M,_I,_L,_E,_S,__,_A,_L,_O,_N,_E,__,__,__,__
000060AC                            Map_Tails_Alone:                                               ; Offset_0x0060AA
000060AC 0E                                         dc.b    $0E
000060AD 311E 2629 3000 1E29 2C2B+                  dc.b    _T,_A,_I,_L,_S,__,_A,_L,_O,_N,_E,__,__,__,__
000060BC                            ;-------------------------------------------------------------------------------     
000060BC                            Map_Vs_Mode_Items_Caption:                                     ; Offset_0x0060BA
000060BC 10                                         dc.b    $10
000060BD 1A00 3330 002A 2C21 2200+                  dc.b    _st,__,_V,_S,__,_M,_O,_D,_E,__,_I,_T,_E,_M,_S,__,_st  
000060CE                            Map_All_Kinds_Items:                                           ; Offset_0x0060CC 
000060CE 0E                                         dc.b    $0E
000060CF 1E29 2900 2826 2B21 3000+                  dc.b    _A,_L,_L,__,_K,_I,_N,_D,_S,__,_I,_T,_E,_M,_S
000060DE                            Map_Teleport_Only:                                             ; Offset_0x0060DC
000060DE 0E                                         dc.b    $0E
000060DF 3122 2922 2D2C 2F31 002C+                  dc.b    _T,_E,_L,_E,_P,_O,_R,_T,__,_O,_N,_L,_Y,__,__                
000060EE                            ;---------------------------------------------------------------------                
000060EE                            Map_Sound_Test_Caption:                                        ; Offset_0x0060EC
000060EE 10                                         dc.b    $10
000060EF 1A00 0030 2C32 2B21 0031+                  dc.b    _st,__,__,_S,_O,_U,_N,_D,__,_T,_E,_S,_T,__,__,__,_st
00006100                            Map_Sound_Test_Sound:                                          ; Offset_0x0060FE   
00006100 0E                                         dc.b    $0E
00006101 0000 0000 0000 1010 0000+                  dc.b    __,__,__,__,__,__,_0,_0,__,__,__,__,__,__,__                    
00006110                            ;-------------------------------------------------------------------------------  
00006110                            Map_Emerald_Hill:                                              ; Offset_0x00610E
00006110 0B22 2A22 2F1E 2921 0025+                  dc.b    $0B,_E,_M,_E,_R,_A,_L,_D,__,_H,_I,_L,_L              
0000611D                            Map_Mystic_Cave:                                               ; Offset_0x00611B
0000611D 0B00 2A36 3031 2620 0020+                  dc.b    $0B,__,_M,_Y,_S,_T,_I,_C,__,_C,_A,_V,_E              
0000612A                            Map_Casino_Night:                                              ; Offset_0x006128
0000612A 0B20 1E30 262B 2C00 2B26+                  dc.b    $0B,_C,_A,_S,_I,_N,_O,__,_N,_I,_G,_H,_T
00006137                            ; Map_Special_Stage:                                           ; Offset_0x006135
00006137 0C30 2D22 2026 1E29 0030+                  dc.b    $0C,_S,_P,_E,_C,_I,_A,_L,__,_S,_T,_A,_G,_E  
00006145                            Map_Special:                                                   ; Offset_0x006143    
00006145 0B00 0000 302D 2220 261E+                  dc.b    $0B,__,__,__,_S,_P,_E,_C,_I,_A,_L,__,__  
00006152                            Map_Zone:                                                      ; Offset_0x006150
00006152 0437 2C2B 2200                             dc.b    $04,_Z,_O,_N,_E,__ 
00006158                            Map_Stage:                                                     ; Offset_0x006156
00006158 0430 311E 2422                             dc.b    $04,_S,_T,_A,_G,_E                  
0000615E                            ; Map_Game_Over: 
0000615E 0824 1E2A 2200 2C33 222F                   dc.b    $08,_G,_A,_M,_E,__,_O,_V,_E,_R
00006168                            ; Map_Time_Over:              
00006168 0831 262A 2200 2C33 222F                   dc.b    $08,_T,_I,_M,_E,__,_O,_V,_E,_R
00006172                            ; Map_No_Game: 
00006172 062B 2C00 241E 2A22                        dc.b    $06,_N,_O,__,_G,_A,_M,_E
0000617A                            ; Map_Tied:  
0000617A 0331 2622 21                               dc.b    $03,_T,_I,_E,_D
0000617F                            ; Map_1P:
0000617F 0200 112D                                  dc.b    $02,__,_1,_P
00006183                            ; Map_2P:         
00006183 0200 122D                                  dc.b    $02,__,_2,_P
00006187                            ; Map_Blank: 
00006187 0300 0000 00                               dc.b    $03,__,__,__,__
0000618C                            ;-------------------------------------------------------------------------------                                                                                
0000618C                            Menu_Level_Select_Text:                                        ; Offset_0x00618A
0000618C 0B1E 2B24 2229 0026 3029+                  dc.b    $0B,_A,_N,_G,_E,_L,__,_I,_S,_L,_A,_N,_D 
00006199 0825 3621 2F2C 2026 3136                   dc.b    $08,_H,_Y,_D,_R,_O,_C,_I,_T,_Y
000061A3 0C2A 1E2F 1F29 2200 241E+                  dc.b    $0C,_M,_A,_R,_B,_L,_E,__,_G,_A,_R,_D,_E,_N
000061B1 0D20 1E2F 2B26 331E 2900+                  dc.b    $0D,_C,_A,_R,_N,_I,_V,_A,_L,__,_N,_I,_G,_H,_T
000061C0 0D23 2936 262B 2400 1F1E+                  dc.b    $0D,_F,_L,_Y,_I,_N,_G,__,_B,_A,_T,_T,_E,_R,_Y
000061CF 0526 2022 201E 2D                          dc.b    $05,_I,_C,_E,_C,_A,_P 
000061D6 0A29 1E32 2B20 2500 1F1E+                  dc.b    $0A,_L,_A,_U,_N,_C,_H,__,_B,_A,_S,_E 
000061E2 0E2A 3230 252F 2C2C 2A00+                  dc.b    $0E,_M,_U,_S,_H,_R,_O,_O,_M,__,_V,_A,_L,_L,_E,_Y
000061F2                                            
000061F2 0930 1E2B 212C 2D2C 2926+                  dc.b    $09,_S,_A,_N,_D,_O,_P,_O,_L,_I,_S
000061FD 0412 2D00 3330                             dc.b    $04,_2,_P,__,_V,_S
00006203 0412 2D00 3330                             dc.b    $04,_2,_P,__,_V,_S 
00006209 0412 2D00 3330                             dc.b    $04,_2,_P,__,_V,_S
0000620F 041F 2C2B 3230                             dc.b    $04,_B,_O,_N,_U,_S
00006215 0C30 2D22 2026 1E29 0030+                  dc.b    $0C,_S,_P,_E,_C,_I,_A,_L,__,_S,_T,_A,_G,_E
00006223 0C30 2C32 2B21 0031 2230+                  dc.b    $0C,_S,_O,_U,_N,_D,__,_T,_E,_S,_T,__,__,_st,__                    
00006232                            ;------------------------------------------------------------------------------- 
00006232                            Pal_Levels_Icons:                                              ; Offset_0x006230               
00006232                                            incbin  'data\menus\lvsicons.pal'  
00006412                            ;------------------------------------------------------------------------------- 
00006412                            Vs_Level_Select_Frame_Mappings:                                ; Offset_0x006410
00006412                                            incbin  'data\menus\vsslctmn.eni'                                 
00006464                            ;-------------------------------------------------------------------------------   
00006464                            Options_Frame_Mappings:                                        ; Offset_0x006462
00006464                                            incbin  'data\menus\optframe.eni' 
00006490                            ;-------------------------------------------------------------------------------                 
00006490                            S2_Menu_Level_Select_Text:                                     ; Offset_0x00648E 
00006490                                            incbin  'data\menus\menutext.eni'  
000065E4                            ;-------------------------------------------------------------------------------                
000065E4                            Menu_Icons_Mappings:                                           ; Offset_0x0065E2
000065E4                                            incbin  'data\menus\iconsmap.eni'     
00006616                            ;-------------------------------------------------------------------------------
00006616                            Menu_Animate:                                                  ; Offset_0x006614
00006616 0000                                       dc.w    $0000                        ; Total de Anima__es     
00006618 0000 0000                                  dc.l    ($FF<<$18)|Art_Menu_Sonic_Miles        ; Offset_0x0A8DC0
0000661C 0020                                       dc.w    $0020                        ; VRAM 
0000661E 060A                                       dc.b    $06, $0A                     ; Quadros / Tiles
00006620 00C7 0A05 1405                             dc.b    $00, $C7, $0A, $05, $14, $05 ; Carregar quadro / Tempo do quadro
00006626 1EC7 1405 0A05                             dc.b    $1E, $C7, $14, $05, $0A, $05 ; Carregar quadro / Tempo do quadro                                                                                                                                                                                                                                                                                                       